'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program reads the value of a DS18B20 connected to a port.
'''The DS18B20 must be setup to correctly.
'''The serial connection must be to the hardware RX port and to a common ground.
'''The receiving serial terminal must be set to 9600 bps.n.
'''@author  EvanV plus works of others
'''@licence GPL
'''@version 1.0a
'''@date    04.02.2018
'''********************************************************************************

; ----- Configuration
 #chip 16f690, 16
 #option explicit
 #include <ds18b20mulltiport.h>

; ----- Define Hardware settings
  'Config UART
  #define USART_BLOCKING
  #define USART_BAUD_RATE 9600

; ----- Constants
  ' DS18B20 port settings
  #define DQ1 PortA.1
  #define DQ2 PortA.0

; ----- Variables
  'TempC_100 required to support temp sensor
  Dim TempC_100 as word
  Dim CCOUNT, SIGNBIT, WHOLE, FRACT, DIG as Byte

; ----- Main body of program commences here.
  ccount = 1

  'Serial print a start message
  HSerPrintCRLF 2
  HSerPrint "Temperature Sensor"
  HSerPrintCRLF 2

  dim dqErrorCheck as byte

  do forever

' The readtempfromPort method returns the integer value of the sensor in readTemp and raw data is readTemp
       #define DS18B20MaxReads 3
       dqErrorCheck=0
       do
            readtempfromPort ( DQ1 )    'readTemp and readTemp12 is now set.. or, should be set.
            if DS18B20DeviceReadBusy = true then
              dqErrorCheck++
            else
              exit do
            end if
       loop while dqErrorCheck <> DS18B20MaxReads 'to ensure this IS NOT BLOCKING

       if DS18B20DeviceReadBusy = true  then
          HSerPrint "Error Reading DS18B20"
          HSerSend 9
       end if

       'Serial print the event count
       hserprint hex(ccount)
       hserprint "> Port1: "
       'Serial print a tab
       hsersend 9
       ' Serial print the integer value of the sensor
       hserprint readTemp
       'Serial print a special character
       hserprint chr(0xB0)+"C"
       HSerSend 9

       ' The readtempfromPort method returns the integer value of the sensor in readTemp
       dqErrorCheck=0
       do
            readtempfromPort ( DQ2 )    'readTemp and readTemp12 is now set.. or, should be set.
            if DS18B20DeviceReadBusy = true then
              dqErrorCheck++
            else
              exit do
            end if
       loop while dqErrorCheck <> DS18B20MaxReads 'to ensure this IS NOT BLOCKING

       if DS18B20DeviceReadBusy = true  then
          HSerPrint "Error Reading DS18B20"
          HSerSend 9
       end if

       'Serial print the event count
       hserprint hex(ccount)
       hserprint "> Port2: "
       'Serial print a tab
       hsersend 9
       ' Serial print the integer value of the sensor
       hserprint readTemp
       'Serial print a special character
       hserprint chr(0xB0)+"C"

       HSerSend 9

' Now display the decimal value of the last sensor read using readTemp12 variable

       ' The method readtempfromPort returns the raw value of the sensor as readTemp12.
       ' The sensor is read as a 12 bit value therefore each unit equates to 0.0625 of a degree
       DSdata = readtemp12
       SignBit = DSdata / 256 / 128
       If SignBit = 0 Then goto Positive
       ' its negative!
       DSdata = ( DSdata # 0xffff ) + 1 ' take twos comp

    Positive:

       ' Convert value * 0.0625. Mulitple value by 6 then add result to multiplication of the value with 25 then divide result by 100.
       TempC_100 =  DSdata * 6
       DSdata = ( DSdata * 25 ) / 100
       TempC_100 = TempC_100 + DSdata

       Whole = TempC_100 / 100
       Fract = TempC_100 % 100
       If SignBit = 0 Then goto DisplayTemp
       hserprint "-"

    DisplayTemp:
       hserprint str(Whole)
       hserprint "."
      ' To ensure the decimal part is two digits
       Dig = Fract / 10
       hserprint Dig
       Dig = Fract % 10
       hserprint Dig
       hserprint chr(0xB0)
       hserprint "C"
       HSerPrintCRLF

       wait 2 s

       ccount++
  Loop
