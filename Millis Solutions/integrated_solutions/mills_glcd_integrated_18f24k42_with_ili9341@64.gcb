
'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the ILI9341 GLCD capabilities.
'''It is a nice graphical LCD, suitable for a lot of various projects.
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
''':
'''This has been tested using the hardware SPI option.
''':
''':
'''@author  EvanV
'''@licence GPL
'''@version 1.0
'''@date    29/03/19
'''********************************************************************************

  'Chip Settings
    #chip 18f24k42, 64
     #config MCLRE=on
    #option Explicit
    #include <glcd.h>

    #define GLCD_TYPE GLCD_TYPE_ILI9341

    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.5.25
    'PinManager data: Not available (3)
    'Generated for 18F24K42
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F24K42

    Sub InitPPS

        'This has been added to turn off PPS SPI when in SPI software mode
        #ifdef ILI9341_hardwarespi
            'Module: SPI1
            RC5PPS = 0x001F    'SDO1 > RC5
            RC3PPS = 0x001E    'SCK1 > RC3
            SPI1SCKPPS = 0x0013    'RC3 > SCK1 (bi-directional)
        #endif

    End Sub
    'Template comment at the end of the config file


    'Pin mappings for ILI9341
    #define GLCD_DC portb.0
    #define GLCD_CS portb.2
    #define GLCD_RESET portb.1

    'This is a PPS chip, so, needs to make the PPS match these assignments
    'The following example is commented out intentionally
    '#define GLCD_DI portc.4
    #define GLCD_DO portc.5
    #define GLCD_SCK portc.3

    #define ILI9341_hardwarespi

    'For the K42 type SPI MODULE ONLY hardware SPI only
    'You can specify an SPI baud rate - the baud rate is dependent on the chip frequency!
    'If you get nothing, you have exceeded the SPI modules capabilites, so, slow down the BAUD RATE or use the SPI_BAUD_RATE_REGISTER constant, shown below.

    'The default SPI_BAUD_RATE is 1/4th of the clock frequency in khz. Khz is used to allow for fine adjustment
    'The following example is commented out intentionally
        '#define SPI_BAUD_RATE 32000

    'or, use an explicit constant as show below
    'The following example is commented out intentionally
        '#define SPI_BAUD_RATE_REGISTER 3

    'Optionally, you can define the HWSPIMode by using #define HWSPIMode masterfast where #define HWSPIMode is masterslow|master|masterfast
    'This will overwrite the default in the GLCD SPI library.  This is so users do not have to change the library.
    'the default is "master"
    'The following example can be commented out if you want to use the default value
        '#define HWSPIMode masterfast

' ********************** MILLIS DEMO REALLY STARTS HERE ************************************************

    #include <millis.h>

    #define LED PORTA.0       ' Define the LED Pin - Digital Pin 2
    #define LEDRate 1000      ' Flash rate in mS
    ' Setup
    Dir LED Out               ' Make the LED Pin an Output
    LED = 0

    Dim CurMs, LstMs as word  ' declare working variables
    ' Main                    ' This loop runs over and over forever.
    LstMs = 0
    CurMs = 0

' ********************** GLCD DEMO REALLY STARTS HERE ************************************************

    'GLCD selected extension font set. ASCII characters 31-254, the extended font uses 1358 bytes of program memory
    #define GLCD_EXTENDEDFONTSET1
    GLCDfntDefaultsize = 2

    'GLCDCLS  supports GLCDBackground as default
    'GLCDCLS  also support passing color parameter.
    'GLCDCLS [color]
    GLCDRotate ( Landscape_rev )     ' optionally you can rotate the screen.


    'Available colors
    'ILI9341_BLACK
    'ILI9341_RED
    'ILI9341_GREEN
    'ILI9341_BLUE
    'ILI9341_WHITE
    'ILI9341_PURPLE
    'ILI9341_YELLOW
    'ILI9341_CYAN
    'ILI9341_D_GRAY
    'ILI9341_L_GRAY
    'ILI9341_SILVER
    'ILI9341_MAROON
    'ILI9341_OLIVE
    'ILI9341_LIME
    'ILI9341_AQUA
    'ILI9341_TEAL
    'ILI9341_NAVY
    'ILI9341_FUCHSIA

    Dim CCOUNT, BYTENUMBER, OLDFONT, OLDFONT as Byte

    CCount = 31
    dim longNumber as long
    longNumber = 0 ' max value = 4294967290
    dim wordNumber as Word
    wordNumber = 0
    byteNumber = 0



        GLCDRotate ( Landscape_rev )

        GLCDDrawString (2, 1, "GCB",ILI9341_WHITE)
        GLCDDrawString (56,1,"v1.xx",ILI9341_YELLOW)
        GLCDDrawString (2, 18, "DrawStr",ILI9341_WHITE)

        GLCDDrawString ( 2, 52, "Long:" )
        GLCDDrawString ( 2, 70, "Word:" )
        GLCDDrawString ( 2, 88, "Byte:" )

        GLCDDrawString ( 128, 18, "Asc:"+"  " )

        box 0,0,ILI9341_GLCD_WIDTH-1, ILI9341_GLCD_HEIGHT-1, ILI9341_YELLOW
        box ILI9341_GLCD_WIDTH-5, ILI9341_GLCD_HEIGHT-5,ILI9341_GLCD_WIDTH-1, ILI9341_GLCD_HEIGHT-1, ILI9341_WHITE

        Circle( ILI9341_GLCD_WIDTH/2, ILI9341_GLCD_HEIGHT/2, 50, ILI9341_SILVER )            ;center
        FilledCircle( ILI9341_GLCD_WIDTH/2, ILI9341_GLCD_HEIGHT/2, 25, ILI9341_D_GRAY  )

        line 0,  ILI9341_GLCD_HEIGHT-1 , ILI9341_GLCD_WIDTH/2 +100,  (ILI9341_GLCD_HEIGHT /2) - 50, ILI9341_CYAN
        line  0, (ILI9341_GLCD_HEIGHT /2) - 50, ILI9341_GLCD_WIDTH/2 +100, (ILI9341_GLCD_HEIGHT /2) - 50, ILI9341_CYAN

        filledbox 2,ILI9341_GLCD_HEIGHT/2+10,42,ILI9341_GLCD_HEIGHT/2+50, ILI9341_RED

        oldfont = GLCDfntDefaultsize
        GLCDfntDefaultsize = 3
        GLCDDrawString ( 50, ILI9341_GLCD_HEIGHT - 30 , "ILI9341 Driver" , ILI9341_WHITE )

        GLCDfntDefaultsize = 1
        GLCDDrawString ( ILI9341_GLCD_WIDTH - 60, 2 , "July 2019" , ILI9341_WHITE )

        #ifdef ILI9341_HardwareSPI
            GLCDDrawString ( ILI9341_GLCD_WIDTH - 42, 10 , "HW SPI" , ILI9341_WHITE )
        #endif

        #ifndef ILI9341_HardwareSPI
            GLCDDrawString ( ILI9341_GLCD_WIDTH - 42, 10 , "SW SPI" , ILI9341_WHITE )
        #endif

        'Revert the font size
        GLCDfntDefaultsize = oldfont
        GLCDForeground = ILI9341_WHITE
        BigPrint_ILI9341 ( 100 , ILI9341_GLCD_HEIGHT - 60 , "Great Cow BASIC" )

        DO forever

          CurMs = millis()

          if CurMs - LstMs >= LEDRate then  ' required Time has Elapsed

            LED = !LED                      ' So Toggle state of LED
            LstMs = CurMs                   ' And Record Toggle Time
          end if

          GLCDPrint ( 64 , 52, CurMs - LstMs)
          GLCDPrint ( 64 , 70, pad( str(wordnumber),5))
          GLCDPrint ( 64 , 88, pad( str(bytenumber),3))

          GLCDDrawChar(99, 18, CCount )
          Box 98,18,117,42, ILI9341_WHITE               'Draw a box around the Char below

          GLCDDrawString ( 180, 18 , pad( str(CCount),3) )

          CCount++
          if CCount = 0 then CCount = 31
          if CCount = 128 then CCount = 192
          longNumber = longNumber + 7
          wordNumber = wordNumber + 3
          byteNumber++

        LOOP
