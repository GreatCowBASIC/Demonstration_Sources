'''A demonstration program for GCBASIC.
'''------------------------------------------------------------------------------------------------------------------------------
''' Description: this library provides an ISR to implement
''' a stateful i2c hardware slave.
''' This is a GCB implementation of Microchip Application Note AN734.
'''
'''
''' This demonstration responds to a write of 4 bytes to I2C address 0x4C (which is really Read Address 0x4D)
''' This example requires two pots and terminal to show the results.
'''
'''
''' According to AN734, there are 5 possible i2c states. During ISR, each
''' of this states are detected. This ISR provides a standard skeleton to implement
''' an i2c hardware slaves, while client code must implement several callbacks
''' the ISR is expecting to call while processing states.
'''
''' Callbacks:
''' - HI2C_Process_In_Message ( in HI2CMESSAGESIZE as byte )
'''      called when slave has a full buffer
'''
''' - HI2C_Process_Out_Message
'''      called when slave is requested to respond to a masters request
'''
''' - You can redirect any of the standard callbacks like HI2CSlave_State_Error, HI2CSlave_State_1-5
'''   Use a define to call your own specific routine. like #define HI2CSlave_State_Error  MyHI2CSlave_State_Error
'''
'''
'''

'''@author  EvanV
'''@licence GPL
'''@version 0.9b
'''@date    30.12.2016
'''********************************************************************************

; ---'''Configuration

    #chip 18f45k80, 16
    #option explicit


    #include <hwi2c_messageinterface.h>  'defines a set of callbacks - you do not need to define hi2cslave_state_1-5
    'Buffer size
    #define HI2CBUFFERSIZE 16
    #define HI2CSlaveEnableStartStopInterrupts

    'Required I2C settings - CHANGE PORTS if required
    #define hi2c_BAUD_RATE 400
    #define hi2c_DATA PORTc.3
    #define hi2c_CLOCK PORTc.4
    'Initialise I2C Master
    'I2C pins need to be input for SSP module
    Dir hi2c_DATA in
    Dir hi2c_CLOCK in

 ' THIS CONFIG OF THE SERIAL PORT WORKS WITH max232 THEN TO PC
 ' USART settings
    #define USART_BAUD_RATE 19200
    #define USART_TX_BLOCKING

; ---'''Define Hardware settings

    #define LED0  porta.1
    #define LED1  porta.2
    #define LED2  porta.3

    dir LED0 out                  ;0, 1 and 2 are outputs (LEDs)
    dir LED1 out                  ;0, 1 and 2 are outputs (LEDs)
    dir LED2 out                  ;0, 1 and 2 are outputs (LEDs

     'Set the appropiate ADC port
     dir portb.4 in
     dir portb.5 in

; ---'''Variables
    dim HI2CForLoop, ADCValue as byte

; ---'''Main body of program commences here.

    Repeat 20

        LED0 = !LED0
        LED1 = !LED1
        LED2 = !LED2
        wait 100 ms

    end Repeat

    'Now set up the I2C slave library - four commands needed
    HI2CSetAddress 0x40
    HI2CMode Slave
    HI2CSlave_ISR_Init
    On Interrupt  SSP1Ready call HI2CSlave_ISR_Handler
    'end of I2C slave library setup


    do Forever
      'Do stuff
    Loop

    sub HI2C_Process_In_Message ( in HI2CMESSAGESIZE )

    'We have incoming data!!
     if HI2CBUFFER(0) = 0x23 then
       Select CASE HI2CBUFFER(1)

             Case 0x00
                LED0 = 0
                LED1 = 0
                LED2 = 0

             Case 0x01
                LED0 = 1
                LED1 = 0
                LED2 = 0

             Case 0x02
                LED0 = 0
                LED1 = 1
                LED2 = 0

             Case 0x03
                LED0 = 1
                LED1 = 1
                LED2 = 0
             Case Else
                porta = HI2CBUFFER(1) * 2

        end Select
     end if


     if HI2CBUFFER(0) = 0x24 then
       Select CASE HI2CBUFFER(1)

             Case 0x09
                ADCValue = ReadAD(AN9)

             Case Else
                ADCValue = 0

        end Select
     end if

    end sub


    sub HI2C_Process_Out_Message

      'WARNING - placing time driven calls here may cause i2c buffer overruns. Move calls to I2C_Process_In_Message.
      'WARNING - changing the Interrupts, stop or starting the Interrupts may cause i2c buffer overruns. Do not do this.

      'Want to post process the data. Do it here.
      HI2CBUFFER(0) = ADCValue  'Place read value into Output Buffer

    end sub
