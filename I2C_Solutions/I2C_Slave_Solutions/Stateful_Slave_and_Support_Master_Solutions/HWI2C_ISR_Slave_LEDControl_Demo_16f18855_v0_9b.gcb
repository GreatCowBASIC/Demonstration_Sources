'''A demonstration program for GCBASIC.
'''------------------------------------------------------------------------------------------------------------------------------
''' Description: this library provides an ISR to implement
''' a stateful i2c hardware slave.
''' This is a GCB implementation of Microchip Application Note AN734.
'''
'''
''' This demonstration responds to a write of 4 bytes to I2C address 0x4C (which is really Read Address 0x4D)
''' This example requires two pots and terminal to show the results.
'''
'''
''' According to AN734, there are 5 possible i2c states. During ISR, each
''' of this states are detected. This ISR provides a standard skeleton to implement
''' an i2c hardware slaves, while client code must implement several callbacks
''' the ISR is expecting to call while processing states.
'''
''' Callbacks:
''' - HI2C_Process_In_Message ( in HI2CMESSAGESIZE as byte )
'''      called when slave has a full buffer
'''
''' - HI2C_Process_Out_Message
'''      called when slave is requested to respond to a masters request
'''
''' - You can redirect any of the standard callbacks like HI2CSlave_State_Error, HI2CSlave_State_1-5
'''   Use a define to call your own specific routine. like #define HI2CSlave_State_Error  MyHI2CSlave_State_Error
'''
'''
'''

'''@author  EvanV
'''@licence GPL
'''@version 0.9b
'''@date    30.12.2015
'''********************************************************************************

; ---'''Configuration

  #chip 16f18855,32
  #option explicit


  'Set the PPS of the I2C and the RS232 ports.
  #startup InitPPS, 85
  Sub InitPPS
    RC0PPS = 0x0010       'RC0->EUSART:TX;
    RXPPS  = 0x0011       'RC1->EUSART:RX;

    SSP1CLKPPS = 0x14     'RC3->MSSP1:SCL1;
    SSP1DATPPS = 0x13     'RC4->MSSP1:SDA1;
    RC3PPS = 0x15         'RC3->MSSP1:SCL1;
    RC4PPS = 0x14         'RC4->MSSP1:SDA1;
  End Sub

   #include <hwi2c_messageinterface.h>  'defines a set of callbacks - you do not need to define hi2cslave_state_1-5
   'Buffer size
   #define HI2CBUFFERSIZE 16

 ' Required I2C settings - CHANGE PORTS if required
    #define hi2c_BAUD_RATE 400
    #define hi2c_DATA PORTC.4
    #define hi2c_CLOCK PORTC.3
    'Initialise I2C Master
    'I2C pins need to be input for SSP module
    Dir hi2c_DATA in
    Dir hi2c_CLOCK in

  ' THIS CONFIG OF THE SERIAL PORT WORKS WITH A  MAX232 (or equiv) THEN TO PC
   ' USART settings - CHANGE PORTS if required
    #define USART_BAUD_RATE 19200
    #define USART_TX_BLOCKING

; ---'''Define Hardware settings

    dir porta.0 Out
    dir porta.1 Out
    dir porta.2 Out
    dir porta.3 Out

; ---'''Variables
    dim HI2CForLoop as byte


; ---'''Main body of program commences here.

    wait 100 ms
    HSerPrint "Demo of HWI2C_ISR_Slave_LEDControl_Demov0_9a.gcb"
    HSerPrintCRLF

    HSerPrint ChipNameStr
    HSerPrintCRLF

    Repeat 20

        porta.0 = !porta.0
        porta.1 = !porta.1
        porta.2 = !porta.2
        porta.3 = !porta.3
        wait 100 ms


    end Repeat


    'Now set up the I2C slave library - four commands needed
    HI2CSetAddress 0x40
    HI2CMode Slave
    HI2CSlave_ISR_Init
    On Interrupt  SSP1Ready call HI2CSlave_ISR_Handler
    'end of I2C slave library setup


    do Forever

      'This terminal output WILL cause timing issues. This NOT a Recommend method to show the data stream - use HserSend in HEX!

        'Do stuff
    Loop

    sub HI2C_Process_In_Message ( in HI2CMESSAGESIZE )

    'We have data!!  Just send some the First byte back
       Select CASE HI2CBUFFER(0)

             Case 0x23
                if (HI2CMESSAGESIZE = 2) then
                    porta = HI2CBUFFER(1)
                end if

        end Select

    end sub


    sub HI2C_Process_Out_Message
      'Want to post process the data? do it here.

    end sub
