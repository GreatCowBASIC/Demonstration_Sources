'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program searches for I2C devices and display their adresses to the attached PC terminal.
'''This program uses the software implementation of I2C for the Microchip microprocessors.
'''The hardware serial connections are shown in the program.
'''@author  EvanV
'''@licence GPL
'''@version 1.0a
'''@date    14.12.15
'''********************************************************************************

; ----- Configuration
  #chip 16F690
  #option explicit

'************************** YOU MUST VERIFY THIS ADDRESS!!!!!! *********************

  #define TargetGCBI2CAddress 0x70


; ----- Define Hardware settings
  ' Define I2C settings - CHANGE PORTS
 #define I2C_MODE Master
 #define I2C_DATA PORTb.4
 #define I2C_CLOCK PORTb.6
 #define I2C_DISABLE_INTERRUPTS ON


#define I2C_BIT_DELAY   4 us      'width of data bit on SDA
#define I2C_CLOCK_DELAY 2 us      'width of clock pulse on SCL
#define I2C_END_DELAY   2 us      'interval between clock pulses



 ' THIS CONFIG OF THE SERIAL PORT WORKS WITH A  MAX232 (or equiv) THEN TO PC
 ' USART settings - CHANGE PORTS if required
 #define USART_BAUD_RATE 19200
 Dir PORTb.7 Out
 Dir PORTb.5 In
 #define USART_TX_BLOCKING
 #define USART_DELAY 1 ms

 wait 500 ms

;----- Variables
  #define STRINGSIZE 32

  dim DeviceID, invar, outvar, I2CRetry as byte
  Dim eepromVal1, eepromVal2, eepromVal3 as Byte

  outvar = 0

; ----- Main body of program commences here.
         ' Now assumes Serial Terminal is operational
  dim DeviceID as byte

  #define LED3 portc.0
  #define LED2 portc.1
  #define LED1 portc.2
  #define LED4 portc.3

  dir LED4 Out
  dir LED3 Out
  dir LED2 Out
  dir LED1 Out



  Repeat  4

     I2CRetry = 0
      do
        I2CStart                              ;generate a start signal
        I2CSend(TargetGCBI2CAddress)                       ;inidcate a write
        I2CRetry++
      loop While I2CSendState = 0 and I2CRetry <> 255
      I2CSend(0x23)
      I2CSend(0)                      ;this value is incrementing - just to get the demo Slave to figure out a packet has been sent
      I2CStop
      wait 100 ms

     I2CRetry = 0
      do
        I2CStart                              ;generate a start signal
        I2CSend(TargetGCBI2CAddress)                       ;inidcate a write
        I2CRetry++
      loop While I2CSendState = 0 and I2CRetry <> 255
      I2CSend(0x23)
      I2CSend(15)                      ;this value is incrementing - just to get the demo Slave to figure out a packet has been sent
      I2CStop
      wait 500 ms




  End Repeat

  do

' Send request for ADC
      I2CRetry = 0
      do
        I2CStart                              ;generate a start signal
        I2CSend(TargetGCBI2CAddress)                       ;inidcate a write
        I2CRetry++
      loop While I2CSendState = 0 and I2CRetry <> 255
      I2CSend(0x81)
      I2CSend(0x04)                      ;this value for the ADC4 port
      I2CStop


      led4 = !led4
      wait 100 ms

'Get Adc value
      I2CRetry = 0
      do
        I2CStart                              ;generate a start signal
        I2CSend(TargetGCBI2CAddress+1)                       ;inidcate a write
        I2CRetry++
      loop While I2CSendState = 0 and I2CRetry <> 255
      I2CReceive( invar, nack )
      I2CStop

'Set the local LEDS

      select case invar
          case < 10
            led1 = 0
            led2 = 0
            led3 = 0
            outvar = 0
          case < 80
            led1 = 1
            led2 = 0
            led3 = 0
            outvar = 1
          case < 160
            led1 = 0
            led2 = 1
            led3 = 0
            outvar = 2
          case else
            led1 = 0
            led2 = 0
            led3 = 1
            outvar = 4
      end select



'set the remote LEDs to the same value
      I2CRetry = 0
      do
        I2CStart                              ;generate a start signal
        I2CSend(TargetGCBI2CAddress)                       ;inidcate a write
        I2CRetry++
      loop While I2CSendState = 0 and I2CRetry <> 255
      I2CSend(0x23)
      I2CSend(outvar)                      ;this value is incrementing - just to get the demo Slave to figure out a packet has been sent
      I2CStop

  loop

; ----- Support methods.  Subroutines and Functions
