'''
'''  This demonstration shows the I2C2 devices attached the microcontroller, this program support the Microchip I2C2 module.
'''
'''  I2C device required a data bus and a clock bus, devices also required an input voltage and 0v.
'''  I2C2 data bus is connected to PortB.2
'''  I2C2 clock bus is connected to PortB.1
'''  Serial output is connected, as previously, to PortC.6
'''
'''  Connect your I2C2 devices and see the results on the serial terminal.
'''
'''  An example
/*
--- Hardware I2C2 ---


   00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
00 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
10 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
20 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
30 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
40 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
50 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
60 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
70 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
80 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
90 -- -- 92 93 -- -- -- -- -- -- -- -- -- -- -- --
A0 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
B0 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
C0 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
D0 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
E0 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
F0 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

End of Search

Test Will Restart in 5 Seconds

*/

'''************************************************************************

'''@author  BillR
'''@licence GPL
'''@version 1.00
'''@date    05.05.2020
' ----- Configuration

'Chip Settings.
#CHIP 18f47k42
#OPTION Explicit
#CONFIG mclr=On

'Generated by PIC PPS Tool for GCBASIC
'PPS Tool version: 0.0.6.1
'PinManager data: v1.79.0
'Generated for 18f47k42

#startup InitPPS, 85
#define PPSToolPart 18f47k42
Sub InitPPS

    'Module: I2C2
    I2C2SCLPPS = 0x0009    'RB1 > SCL2
    RB1PPS = 0x0023    'SCL2 > RB1 (bi-directional)
    I2C2SDAPPS = 0x000A    'RB2 > SDA2
    RB2PPS = 0x0024    'SDA2 > RB2 (bi-directional)

    'Module: I2C2 extra settings
    'This is a dedicated PIC I2C module
    'The clock speed is 125kHz by default (not 100kHz/400kHz)
    'See the HWI2C section of the Help, or refer to the chip specific datasheet,  for how to change the clock speed to the desired frequency
    #Define HI2C2_CLOCK PORTB.1    'Define a constant
    Dir HI2C2_CLOCK out    'Set I2C pin as output
    RB1I2C_TH0=1    'Set the I2C level for the pin
    ODCB1=1    'Set pin as open drain output
    #Define HI2C2_DATA PORTB.2    'Define a constant
    Dir HI2C2_DATA out    'Set I2C pin as output
    RB2I2C_TH0=1    'Set the I2C level for the pin
    ODCB2=1    'Set pin as open drain output

    'Module: UART pin directions
    Dir PORTC.6 Out    ' Make TX1 pin an output
    'Module: UART1
    RC6PPS = 0x0013    'TX1

End Sub




'Setup Serial port
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING


' Define I2C settings
#DEFINE HI2C2_BAUD_RATE 125
' #DEFINE HI2C2_DATA PORTB.2   (See Sub INITPPPS)
' #DEFINE HI2C2_CLOCK PORTB.1  (See Sub INITPPS)


'For this solution we can set the TSCL period to Zero as the Stop condition must be held for TSCL after Stop transition
'    #define HI2C2ITSCLWaitPeriod 0

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

Dim DeviceID As Byte
Dim DISPLAYNEWLINE As Byte

 Do

    HSerPrintCRLF
    HSerPrint "--- Hardware I2C2 --- "
    HSerPrintCRLF 2

    ' Now assumes Serial Terminal is operational
    HSerPrintCRLF
    HSerPrint "   "
    'Create a horizontal row of numbers
    For DeviceID = 0 To 15
        HSerPrint Hex(deviceID)
        HSerPrint " "
    Next

    'Create a vertical column of numbers
    For DeviceID = 0 To 255
        DisplayNewLine = DeviceID % 16
        If DisplayNewLine = 0 Then
            HSerPrintCRLF
            HSerPrint Hex(DeviceID)
            If DisplayNewLine > 0 Then
                HSerPrint " "
            End If
        End If
        HSerPrint " "

        'Do an initial Start
        SI2C2Discovery ( DeviceID )

        If HI2C2WaitMSSPTimeout <> TRUE Then

            'Did device fail to respond?
            If HI2C2AckpollState = FALSE Then
                HSerPrint   Hex(deviceID)
            Else
                HSerPrint "--"
            End If
            'Do a stop.


        Else
            HSerPrint "! "
        End If

    Next

    HSerPrintCRLF 2
    HSerPrint   "End of Search"
    HSerPrintCRLF 2
    HSerprint "Test Will Restart in 5 Seconds"
    HserprintCRLF 2
    Wait 5 s

 Loop

' ----- Support methods.  Subroutines and Functions
'NONE
