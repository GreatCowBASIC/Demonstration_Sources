/*
 An I2C discovery program for GCGB and GCB.

  This demonstration examines the I2C/TWI devices attached and displays then devices discovered on a serial terminal and/or LCD using the primary I2C module.

  You will to connect I2C/TWI devices to the I2C/TWI ports - there will be two of them.
' The data and clock lines respectively.  The two lines are need to be pull high by suitable resistors supply voltage.
  You will also need to connect a serial Terminal to serial port.  Using PUTTY.EXE for an excellent terminal program.  
  Also, you may need to connect the microcontroller via a TTL converter.
  You can connect a switch to a port.  The needs to be connected the supply voltage via a 10k pullup resistor.

  For PPS chips - you must specify the PPS for the I2C/TWI ports and the Serial Port(s)


  ************************************************************************************************************************************************************************************


  PIC: 16f18326
  Compiler: GCB
  IDE: GCB@SYN


@author   EvanV
@licence  GPL
@version  2.0
@date     04/03/2023
*/

// ----- Configuration
// Chip Settings.
//! Change the chip
#CHIP 16f18326,32
#OPTION Explicit
#option NoConfig


    //! Change or delete the PPS section.  YOU NEED A PPS section for PPS PICs.
    // Generated by PIC PPS Tool for Great Cow Basic
    // PPS Tool version: 0.0.6.3
    // Generated for 16lf18326
    //
    // Template comment at the start of the config file
    //
    #startup InitPPS, 85
    #define PPSToolPart 16lf18326

    Sub InitPPS
        UNLOCKPPS

        'Module: EUSART
        RA0PPS = 0x0014    'TX > RA0
        RXPPS = 0x0001     'RA1 > RX
        
        'Module: MSSP1
        RC1PPS = 0x0019    'SDA1 > RC1
        SSP1DATPPS = 0x0011    'RC1 > SDA1 (bi-directional)
        RC0PPS = 0x0018    'SCL1 > RC0
        SSP1CLKPPS = 0x0010    'RC0 > SCL1 (bi-directional)
        
    End Sub
    // Template comment at the end of the config file


// -------------------PORTA----------------
// Bit#:  -7---6---5---4---3---2---1---0---
// IO:   --------------------------RX--TX--
// ICSP-------------------MCLR-----CLK-DAT-
//

// -------------------PORTB----------------
// Bit#:  -7---6---5---4---3---2---1---0---
// IO:    ---------------------------------
//-----------------------------------------
//

// ------------------PORTC-----------------
// Bit#:  -7---6---5---4---3---2---1---0---
// IO:    ------------SW1-SW2--------------
// IO:    ------------------------SDA-SCL--
//-----------------------------------------

//! You can define SWITCH or SWITCH1 or SWITCH2 constant.  If you do not have a switch, then, comment out these two constants
    #DEFINE SWITCH1             PORTC.3
    #DEFINE SWITCH2             PORTC.4

//! You can change the value from 1 to 0 or 0 to 1 but do not delete these two constants
    #DEFINE SWITCH_DOWN         1
    #DEFINE SWITCH_UP           0

//! You can change the BPS from the default of 19200
    #DEFINE USART_BAUD_RATE     19200
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY         OFF


//! You can change the LCD setup
    #DEFINE LCD_IO              10
    #DEFINE LCD_I2C_ADDRESS_1   0X7E
    #DEFINE LCD_WIDTH 20                ;specified lcd width for clarity only.  20 is the default width                
//! This constant controls showing the discovered I2C devices on the LCD display
    #DEFINE USE_LCD_SETUP


//! You MUST define Hardware settings for I2C/TWI
    ' Define I2C settings - CHANGE PORTS if required for your specific device.
    #DEFINE HI2C_BAUD_RATE 100
    #DEFINE HI2C_DATA PORTC.1
    #DEFINE HI2C_CLOCK PORTC.0
    'Initialise I2C Master
    'I2C pins may need to be input for SSP module
    Dir HI2C_DATA In
    Dir HI2C_CLOCK In
    'MASTER Second Port
    HI2CMode Master



// ----- Main body of program commences here *******************************************
// Now assumes Serial Terminal and/or LCD is operational

    #DEFINE WAITDELAY 5

    Dim DeviceID, I2CData, DeviceState, DeviceStateCount As Byte
    Dim DISPLAYNEWLINE As Byte

    Do Forever

        #ifdef USART_BAUD_RATE
            HSerPrintCRLF
            HSerPrint "Hardware I2C"
            HSerPrintCRLF 2
        #endif
        #ifdef USE_LCD_SETUP
            print "Hardware I2C"
            wait 1 s
        #endif
        #ifndef USART_BAUD_RATE
            #ifndef USE_LCD_SETUP
                Error - the program assume either/or Serial or LCD is setup
            #endif
        #endif

        DeviceStateCount  = 0

        #ifdef USART_BAUD_RATE
            HSerPrint "     "
        #endif

        For DeviceID = 0 To 15
            #ifdef USART_BAUD_RATE
                HSerPrint Hex(deviceID)
                HSerPrint " "
            #endif
        Next

        For DeviceID = 0 To 255
            DisplayNewLine = DeviceID % 16
            If DisplayNewLine = 0 Then
            
                #ifdef USART_BAUD_RATE        
                    HSerPrintCRLF
                    HSerPrint Hex(DeviceID)
                    HSerPrint ": "
                #endif
            
            End If
            
            #ifdef USART_BAUD_RATE
                HSerPrint " "
                HI2CStart
            #endif

            If HI2CWaitMSSPTimeout <> TRUE Then

                If deviceID.0 = 0 Then    
                    HI2CSend ( deviceID )
                    If HI2CAckpollState = FALSE Then
                        DeviceState = 1
                        DeviceStateCount++
                    Else
                        DeviceState = 0
                    End If
                End if

                //! Request data with NACK only Read Options and Device responded
                If deviceID.0 = 1 Then
                    HI2CStop
                    HI2CStart
                    HI2CSend ( deviceID )
                    If HI2CAckpollState = FALSE Then
                        DeviceState = 1
                        DeviceStateCount++
                        HI2CReceive ( I2CData, NACK)
                    Else
                        DeviceState = 0
                    End If
                    
                End if

                If DeviceState = 1 Then
                    #ifdef USART_BAUD_RATE
                        HSerPrint   Hex(deviceID)
                    #endif
                    #ifdef USE_LCD_SETUP
                        CLS
                        Print "0x"
                        Print Hex(deviceID)
                        wait 1 s
                    #endif
                    
                Else
                    #ifdef USART_BAUD_RATE
                        HSerPrint "--"
                    #endif

                End if 

            End If
            HI2CStop

        Next
        
        #ifdef USART_BAUD_RATE
            HSerPrintCRLF 2

            #ifdef switch
                HSerPrint   "End of Search - Press button to repeat test"
            #else
                #ifdef switch1
                    HSerPrint   "End of Search - Press button to repeat test"
                #else
                    #ifdef switch2
                        HSerPrint   "End of Search - Press button to repeat test"
                    #else
                        HSerPrint   "End of Search - repeats in "
                        HSerPrint   Str(WAITDELAY) + " seconds"
                    #endif
                #endif
            #endif
            HSerPrintCRLF 2


        #endif
        #ifdef USE_LCD_SETUP
            Locate 1,0
            Print "Found "
            Print DeviceStateCount
            Print " devices"
        #endif

        // Wait for switch event
        #ifdef switch
                wait while switch = SWITCH_UP
        #else
            #ifdef switch1
                wait while switch1 = SWITCH_UP
            #else
                #ifdef switch2
                    wait while switch2 = SWITCH_UP
                #else
                    // else wait WAITDELAY s
                    wait WAITDELAY s
                #endif
            #endif
        #endif

        #ifdef USE_LCD_SETUP
            CLS
        #endif
        
    Loop
    End



// ----- Support methods.  Subroutines and Functions
