'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program shows the converter capabilities of GCBASIC by converting an external BMP file to a GCB table.
'''This program will convert a graphical BMP file to a GCB table.  The table will be then used as the data source of the GLCD device.
'''This program requires the BMP2GCB.exe utility and the configuration file to be installed in the GCBasic converters folder.  The source BMP should be in the same folder.
'''The GLCD should be connected as shown in the program.  The GLCD connection can be changed to suit your specific configuration.
'''@author 	EvanV
'''@licence	GPL
'''@version	1.0a
'''@date   	09.3.2015
'''********************************************************************************

; ----- Configuration

 #chip 16f877a, 20
 #option explicit
 #option explicit
 #include <glcd.h>

; ----- Constants
  ' No Constants specified in this example.
  ' See below

; ----- Define Hardware settings
'  Setup GLCD
  #define GLCD_TYPE GLCD_TYPE_KS0108
  #define GLCD_WIDTH 128
  #define GLCD_HEIGHT 64


  #define GLCD_CS1 PORTa.4 'CS1, CS2 can be reversed on some devices
  #define GLCD_CS2 PORTa.5
  #define GLCD_DB0 PORTD.0 'D0 to pin 7 on LCD
  #define GLCD_DB1 PORTD.1 'D1 to pin 8 on LCD
  #define GLCD_DB2 PORTD.2 'D2 to pin 9 on LCD
  #define GLCD_DB3 PORTD.3 'D3 to pin 10 on LCD
  #define GLCD_DB4 PORTD.4 'D4 to pin 11 on LCD
  #define GLCD_DB5 PORTD.5 'D5 to pin 12 on LCD
  #define GLCD_DB6 PORTD.6 'D6 to pin 13 on LCD
  #define GLCD_DB7 PORTD.7 'D7 to pin 14 on LCD


  #define GLCD_RS PORTa.0
  #define GLCD_Enable PORTA.1
  #define GLCD_RW PORTA.2
  #define GLCD_RESET PORTA.3


; ----- Variables
  ' These must be WORDs as this a large table.
  dim TableReadPosition, TableLen as word
  OptmiseGLCDDraw  = 0            ; either 0 or 1.  Needs to match the background pixel state.
  
  dim objwidth, objheight, wholebytes, hcount, widthcount, wbyte, OptmiseGLCDDraw, OnPageBoundary as byte
  dim GLCDYPOS, glcdxpos, oldglcdxpos, GLCDX, GLCDY as Word
  Dim WHOLEYBYTES, CURRPAGE, MAXHEIGHT, CURRCHARROW as Byte


; ----- Quick Command Reference:
  #include <..\converters\anobium.bmp>
  ' define the BMP here to minimise any changes to code.  Simply change this define your specific filename
  '
  ' If the include statement has the file specific of Anobium then define TestDataSource as Anobium. And, therefore if the file specific of BatteryMon then define TestDataSource as BatteryMon.

  #define TestDataSource Anobium



; ----- Main body of program commences here.
      TableReadPosition = 1
      ReadTable TestDataSource, TableReadPosition, objwidth: TableReadPosition++
      ReadTable TestDataSource, TableReadPosition, objHeight: TableReadPosition++

      ;Draw at the upper left corner is set with GLCDXPos, GLCDYPos
      GLCDXPos = 0
      GLCDYPos = 0

      oldGLCDXPos = GLCDXPos
      TableReadPosition = 3

      ; Number of whole bytes within Y Axis.  This is integer maths!
      WholeYBytes = objHeight /  8

      ; If GLCDYPos as a memory page boundary.  Used to fast write the byte method
      onPageBoundary = ( GLCDYPos % 8 ) = 0

      if WholeYBytes <> 0 then

          for hCount = 0 to (WholeYBytes - 1)  ; counter to number of whole bytes

                ;Note: It is safe to use GLCDY and X here as PSET is not called when this is used as a variable
                GLCDY = GLCDYPos+hCount
                for widthCount = 0 to (objwidth - 1)  ; increment thru bytes horizontally
                    ReadTable TestDataSource, TableReadPosition, wByte: TableReadPosition++   ; get the next byte
                    if wByte <> OptmiseGLCDDraw then             ; if the incoming byte is the same as the background, dont draw
                       ;So,  we have to draw this byte
                       ;If a a page boundary  this is a faster draw routine
                       if onPageBoundary = true then
                          ;use fast draw byte - essentially just write the data out, no, reading whats there.
                          GLCDX = GLCDXPos+widthCount
                          If GLCDX.6 = Off Then
                             Set GLCD_CS2 On
                             Set GLCD_CS1 off
                          end if
                          If GLCDX.6 = On Then
                             Set GLCD_CS1 On
                             GLCDX -= 64
                             Set GLCD_CS2 off
                          end if

                          ;Select page
                          CurrPage = GLCDY / 8
                          Set GLCD_RS Off
                          GLCDWriteByte b'10111000' Or CurrPage
                            		
                          ;Select column
                          GLCDWriteByte 64 Or GLCDX
                          ;Write data back
                          Set GLCD_RS On
                          GLCDWriteByte wByte

                       else

                          ;slow draw method using X Y position and interate throught the bits
                          For CurrCharRow = 0 to 7
                                    If wByte.0 = 0 Then
                                              PSet GLCDXPos+widthCount, CurrCharRow + GLCDYPos, GLCDBackground
                                    Else
                                              PSet GLCDXPos+widthCount, CurrCharRow + GLCDYPos, GLCDForeground
                                    End If
                                    Rotate wByte Right
                          Next
                       end if

                     end if

                next widthCount

                GLCDXPos =  oldGLCDXPos
                GLCDYPos = GLCDYPos + 8

          next hCount

      end if

      ; calculate the remaining bits
      maxHeight = objHeight % 8

      ;writes and remaining bits, if any
      if maxHeight <> 0 then

        for widthCount = 0 to objwidth - 1
          ReadTable TestDataSource, TableReadPosition, wByte: TableReadPosition++
              ;use a slow draw using X Y position and interate throught the bits
              For CurrCharRow = 0 to maxHeight-1
                        If wByte.0 = 0 Then
                                  PSet GLCDXPos+widthCount, ( CurrCharRow + GLCDYPos ), GLCDBackground
                        Else
                                  PSet GLCDXPos+widthCount, ( CurrCharRow + GLCDYPos ), GLCDForeground
                        End If
                        Rotate wByte Right
              Next
        next
      end if
      Set GLCD_CS1 Off
      Set GLCD_CS2 Off
      End
; ----- Support methods.  Subroutines and Functions
