'''A demonstration program for GCBASIC
'''---------------------------------------------------------------------------------
''' This program shows PWM duty changer test in the AVRrc chips - change the constant CURRENTTEST to change the program
'''
''' Change TCCR0B to change the frequency.  OCR0AL controls the DUTY
'''
'''@author  Evan Venn
'''@licence GPL
'''@version 1.0
'''@date    28/06/2020
'''********************************************************************************

; ----- Configuration
#chip tiny104, 8
#option Explicit

; ----- Include library
#include <softserial.h>

; ----- Constants

  #DEFINE GreenLED  PORTB.2
  #DEFINE RedLED    PORTB.1
  #DEFINE YellowLED PORTB.0


  #Define CURRENTTEST 1


; ----- Variables
  'See inline

; ----- Main body of program commences here.

  #IFDEF  CURRENTTEST 1
    'Test 1

      dir YellowLED out
      dir GreenLED  out
      dir RedLED    out
      YellowLED = 0
      GreenLED  = 0
      RedLED    = 0

      COM0A1 = 1: COM0A0 = 0                       ' Set OC0A1 Low for a port that is PULLED HIGH, examine COM0A1 and COM0A0 for other options
      WGM00  = 1: WGM01 = 1                        ' Set OC0A1 Low , Fast 10bit PWM mode
      WGM02  = 1: TCCR0B = TCCR0B or 2             ' Fast PWM with OCR0A as TOP;  clkI/O/8 (From prescaler)

        'Main loop
        'Simply index OCR0AL to change the DUTY %

        Dim OCR0A as word
        OCR0A = 0

        do
              '10 bit addressing by using 1024
              repeat 1024
                OCR0AH = OCR0A_h
                OCR0AL = OCR0A
                OCR0A++
                wait 1 ms
              end repeat
              GreenLED= !GreenLED
              YellowLED = !YellowLED
              repeat 1024
                OCR0AH = OCR0A_h
                OCR0AL = OCR0A
                OCR0A--
                wait 1 ms
              end repeat
              GreenLED = !GreenLED
              YellowLED = !YellowLED
        Loop

  #ENDIF


  #IFDEF  CURRENTTEST 2
    'Test2 -
      dir YellowLED out
      dir GreenLED  out
      dir RedLED    out
      YellowLED = 1
      GreenLED  = 1
      RedLED    = 1

    do

    loop
  #ENDIF


  #IFDEF  CURRENTTEST 3
    'Test3 -
  #ENDIF


End



; ----- Config Serial UART :
#define SER1_BAUD 9600     ; baudrate must be defined
#define SER1_DATABITS 8    ; databits optional (default = 8)
#define SER1_STOPBITS 1    ; stopbits optional (default = 1)
#define SER1_INVERT Off    ; inverted polarity optional (default = Off)
; Config I/O ports for transmitting:
#define SER1_TXPORT PORTB  ; I/O port (without .bit) must be defined
#define SER1_TXPIN 1       ; portbit  must be defined
