''' A demonstration program for GCBASIC.
'''
'''
''' Pulse-Width Modulation (PWM) is a scheme that provides power to a load by switching
''' quickly between fully on and fully off states. The PWM signal resembles a square wave
''' where the high portion of the signal is considered the on state and the low portion of
''' the signal is considered the off state. The high portion, also known as the pulse width,
''' can vary in time and is defined in steps. A longer, high on time will illuminate the LED
''' brighter. The frequency or period of the PWM does not change. A larger number of
''' steps applied, which lengthens the pulse width, also supplies more power to the load.
''' Lowering the number of steps applied, which shortens the pulse width, supplies less
''' power. The PWM period is defined as the duration of one complete cycle or the total
''' amount of on and off time combined.
'''
''' The demo vary the PWM to all the LEDS. This is achieved by redirected PMW6 to the LEDS.
'''
'''
'''   You need four LEDs connnect to portc.0, portc.1, portc.2 and portc.3 connected via suitable resistors.
'''  ************************************************************************************************************************************************************************************
'''
'''
'''  PIC: 16F18326
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''@author   EvanV
'''@licence  GPL
'''@version  1.0
'''@date     29.07.2016

  #chip 18F45K80, 16

    #define LEDD2  PORTC.2
    #define LEDD3  PORTC.6
    #define LEDD4  PORTC.7
    #define LEDD5  PORTB.5

    'You do need to specfic the ports as outputs
    Dir     LEDD2 OUT
    Dir     LEDD3 OUT
    Dir     LEDD4 OUT
    Dir     LEDD5 OUT


    'Optimise commands  for PWM modules to reduce the size of the code produced.
    #define USE_HPWMCCP1 FALSE      ' not used Optimise
    #define USE_HPWMCCP2 TRUE       ' not used Optimise
    #define USE_HPWMCCP3 TRUE       ' not used Optimise
    #define USE_HPWMCCP4 TRUE       ' not used Optimise
    #define USE_HPWMCCP4 TRUE       ' not used Optimise

    #define USE_HPWM6 FALSE         ' not used Optimise
    #define USE_HPWM5 FALSE         ' not used Optimise

    #define myFrequency 60
    dim myDuty as byte
    dim myPMWControl alias myDuty
    myDuty = 127  'start at 50%

    HPWM ( 2, myFrequency, myDuty )

    Do Forever

        Repeat 4
              for myDuty = 0 to 255
                  wait 1 ms
                  HPWM ( 2, myFrequency, myDuty )
                  HPWM ( 3, myFrequency, myDuty )
                  HPWM ( 4, myFrequency, myDuty )
                  HPWM ( 5, myFrequency, myDuty )
            next
        End Repeat

        for myPMWControl = 2 to 5
              HPWMOff ( myPMWControl )
              wait 250 ms
        next

        for myPMWControl = 5 to 2
              HPWM ( myPMWControl, myFrequency, 255 )
              wait 250 ms
        next

        Repeat 4
            for myDuty = 255 to 0
                  wait 1 ms
                  HPWM ( 2, myFrequency, myDuty )
                  HPWM ( 3, myFrequency, myDuty )
                  HPWM ( 4, myFrequency, myDuty )
                  HPWM ( 5, myFrequency, myDuty )
            next
        End Repeat

        for myPMWControl = 2 to 5
              HPWM ( myPMWControl, myFrequency, 255 )
              wait 250 ms
        next


        for myPMWControl = 5 to 2
              HPWMOff ( myPMWControl )
              wait 250 ms
        next



    Loop
