'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program shows how to use Fixed Mode PWM for CCP/PWM and PWM modules - therefore both PWM in this chip.
'''
'''We will set up CCP/PWM on PortB ports - examine with a scope.
'''We will also set up PWM on the PWM module on the PortA ports - also, examine with a scope.
'''
'''An important note is that timer 2 is ALWAYS used by CCP/PWM and therefore CCP/PWM is dependent on timer 2 PWM module.
'''Therefore, f you set #define PWM_Timer2_Freq then will be the frequency of CCP/PWM
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.02
'''@date       20.11.17
'''********************************************************************************
#chip 16f18855, 32        'Use a chip with the correct operating frequency!

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.5.11
    'PinManager data: v1.55
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85

    Sub InitPPS

            'Assign the PWM module to PORTA
            'Module: PWM6
            RA1PPS = 0x000E    'PWM6 > RA1
            'Module: PWM7
            RA2PPS = 0x000F    'PWM7 > RA2

           'Assign the CCP/PWM module to PORTB
           'Module: CCP1
            RB0PPS = 0x0009    'CCP1 > RB0
            CCP1PPS = 0x0008    'RB0 > CCP1 (bi-directional)
            'Module: CCP2
            RB1PPS = 0x000A    'CCP2 > RB1
            CCP2PPS = 0x0009    'RB1 > CCP2 (bi-directional)
            'Module: CCP3
            RB2PPS = 0x000B    'CCP3 > RB2
            CCP3PPS = 0x000A    'RB2 > CCP3 (bi-directional)
            'Module: CCP4
            RB3PPS = 0x000C    'CCP4 > RB3
            CCP4PPS = 0x000B    'RB3 > CCP4 (bi-directional)


    End Sub
    'Template comment at the end of the config file

    '' -------------------LATA-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' LED:   ---------------|D5 |D4 |D3 |D1 |-
    ''-----------------------------------------
    ''
    #define LEDD2 PORTA.0
    #define LEDD3 PORTA.1
    #define LEDD4 PORTA.2
    #define LEDD5 PORTA.3


'Details on setup for fixed mode CCP/PWM for the CCP module - these happen to be the defaults aslo - this is shown here for clarity
  'For the CCP/PWM module the frequency and the duty is the same across all the channels - this is a limitation of the microcontroller not the program.
  #define PWM_Freq 38      'Frequency of PWM in KHz
  #define PWM_Duty 50      'Duty cycle of PWM (%)

'Details on setup for fixed mode PWM for the PWM module

    'The only options are PWM_Timer2_Freq nn|PWM_Timer4_Freq nn|PWM_Timer6_Freq nn. These are the PWM timers
    'The PWM_yy_Duty xx' where yy is between 1 and 9 and is a valid PWM module, and, xx is the Duty cycle for specific channels
    'The PWM_zz_Clock_Source tt.  Where zz is channel and tt is the PWM clock source.
    'You do not need to define all the timers and channels, just define the constants you need.
    'The minimum is
    '   A timer with a frequency
    '   A PWM channel with a duty
    '   A PWM channel clock source
    '   For PWM channel 2 with a frequency of 38Khz with a duty of 50% with a clock source of timer 2, use
    '     #define PWM_Timer2_Freq 38
    '     #define PWM_7_Duty 50
    '     #define PWM_7_Clock_Source 2

    #define PWM_Timer4_Freq 40        'Set frequency in KHz, just change the number
    #define PWM_Timer6_Freq 60        'Set frequency in KHz, just change the number

    #define PWM_6_Duty 60             'Set the duty, just change the value
    #define PWM_6_Clock_Source 6      'Set the duty, just change the value

    #define PWM_7_Duty 70
    #define PWM_7_Clock_Source 4



main:

    'Do NOT forget to set the port direction... setting everything to out! the lazy way!
    dir porta Out
    dir portb Out
    dir portc Out

    'Enable CCP channels
    PWMOn             'Enable CCP/PWM 1
    PWMOn ( 2 )       'Enable CCP/PWM 2
    PWMOn ( 3 )       'Enable CCP/PWM 3
    PWMOn ( 4 )       'Enable CCP/PWM 4

    'Enable PWM Modules
    PWMOn  ( 6, PWMModule ) 'Enable PWM 6 Module
    PWMOn  ( 7, PWMModule ) 'Enable PWM 7 Module


    do
    loop

End
