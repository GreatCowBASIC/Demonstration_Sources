'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''
'''Demonstration of the GCBASIC capabilities for LibK/WinUSB library
'''
'''Connect the 18f25K50 to the USB
'''  D- to portc.4
'''  D+ to portc.5
'''  Cap between port.c3 and 0V
'''  You can provide supply voltage via the USB, or, you can provide local voltage.
'''
''' LEDs to ports c.7, b.5 and b.4 via suitable resistors.  They are KeepAlive LED and two LEDs for remote control
''' POTS to ports a.0, a.1, a.3 and a.3,  you will read those remotely
''' A serial terminal at 115200bps can be connected to portc.6
'''
''' Use the Windows application to control!
'''
'''
'''
'''
'''This program is the very first program for GCBASICUSB
'''
'''@author     HughC and EvanV
'''@licence    GPL
'''@version    1.0
'''@date       29/10/2018
'''********************************************************************************

' ----- Configuration
    #chip 18F25K50, 48
    #include <usb.h>
    #option Explicit


    ' ----- Constants for the usb.h
    'Define a name - 30 chars max long
    '#define USB_PRODUCT_NAME versionString
    #define USB_PRODUCT_NAME  "GCB USB v1.4.2"
    #define USB_VID 0x1209      'Should not be changed unless you have your own Vendor Identity - this VID is allocate to GCBASIC Lib/WinUSB Solutions.
    #define USB_PID 0x2006      'Should not be changed unless you have your own Vendor Identity - this PID is allocate to GCBASIC Lib/WinUSB Solutions.
    #define USB_REV 0x0000      'You MUST obtain a REV number from https://github.com/Anobium/GreatCowBASICpidcodes1209_2006 to develop your own Open Source USB solutions


    #define USBDeviceReadPortb5LEDStatus  130
    #define USBDeviceSetPortb5StatusOn    131
    #define USBDeviceSetPortb5StatusOff   132
    #define USBDeviceReadADCValues        133

    #define USBDeviceReadPortb4LEDStatus  134
    #define USBDeviceSetPortb4StatusOn    135
    #define USBDeviceSetPortb4StatusOff   136

    ' ------ Version Control - optional

    #include "gcbversionnumber.cnt"
    'Include the GCBVersionNumber.cnt to increment versionString and create the build time string called GCBBuildTimeStr.
    ' versionString a string is created automatically.
    ' GCBBuildTimeStr is a string that is also created automatically.
    ' use "GCBVersionNumber.cnt" as this will create a local copy of the versionString tracker.
    ' if you use <GCBVersionNumber.cnt> this is a system wide versionString tracker.

    dim versionString as string * 40
    versionString = "Build"+GCBBuildStr
    versionString = versionString + "@"+GCBBuildTimeStr
    HSerPrint "USB CGB  "
    HSerPrint versionString
    HSerPrintCRLF

    ' ------ End of Version Control - optional

    'Define USB specific callback handlers
    'MANDATED to handle you solution
    #define USB_SETUP_HANDLER           SetupHandler_CallBack
    'optional callback handlers for error and descriptor call.
    #define USB_ERROR_HANDLER           ErrorHandler_CallBack
    #define USB_DESCRIPTOR_HANDLER      DescriptorHandler_CallBack



    'Solution specific configuration
        ' ----- Define Hardware settings
        'USART
        #define USART_BAUD_RATE 115200
        #define USART_BLOCKING

        'ADC
        #define ADSpeed LowSpeed


        ' ------ Ports
        Dir PORTB.4 out
        Dir PORTB.5 out
        Dir PORTc.7 out





        // ----- Main body of program commences here
        Do

        Loop

        end


        ' ----- Support methods.  User call backs
        Sub ErrorHandler_CallBack
              HSerPrint "Error: "
              HSerPrint Hex(UEIR)
              HSerPrintCRLF
        End Sub

        Sub SetupHandler_CallBack


              Select Case USBRequest

                'Response to control request: Transfer USBDeviceReadPortb4LEDStatus, send status of port
                Case USBDeviceReadPortb4LEDStatus
                  USBBufferWrite( PORTB.4 )

                'Response to control request: Transfer USBDeviceSetPortb4StatusOn, turn on LED
                Case USBDeviceSetPortb4StatusOn
                  Set PORTB.4 On

                'Response to control request: Transfer USBDeviceSetPortb4StatusOff, turn off LED
                Case USBDeviceSetPortb4StatusOff
                  Set PORTB.4 Off

                'Response to control request: Transfer USBDeviceReadPortb5LEDStatus, send status of port
                Case USBDeviceReadPortb5LEDStatus
                  USBBufferWrite( PORTB.5 )

                'Response to control request: Transfer USBDeviceSetPortb5StatusOn, turn on LED
                Case USBDeviceSetPortb5StatusOn
                  Set PORTB.5 On

                'Response to control request: Transfer USBDeviceSetPortb5StatusOff, turn off LED
                Case USBDeviceSetPortb5StatusOff
                  Set PORTB.5 Off

                'Response to control request: Transfer USBDeviceReadADCValues, send back ADC readings
                Case USBDeviceReadADCValues

                  USBBufferWrite( ReadAD10(AN0) )
                  USBBufferWrite( ReadAD10(AN1) )
                  USBBufferWrite( ReadAD10(AN2) )
                  USBBufferWrite( ReadAD10(AN3) )

                'Response to control request: Transfer 255, keep alive
                Case USBDeviceKeepAlive
                  USBBufferWrite( USBDeviceKeepAlive )
                  PORTc.7 = !PORTc.7

                'Handle the others via the serial port as we do not know what they are
                Case Else
                  HSerPrint "Req "
                  HSerPrint USBTempBuffer(1)
                  HSerPrintCRLF

              End Select

        End Sub




        Sub DescriptorHandler_Callback
              HSerPrint "Desc: "
              HSerPrint USBDescType
              HSerPrintCRLF
        End Sub
