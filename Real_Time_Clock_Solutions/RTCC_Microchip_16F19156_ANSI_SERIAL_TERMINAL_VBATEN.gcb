'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program shows the real time clock on an ASCII terminal at 19200bps. Putty.exe is recommended terminal.
''':
''':    There are two pushbuttons: Mode and Set equates to Set and the Mode button.  Set the setBut and modeBut port assignment in the program below.
''':
''':    The RTCC 1/2 second clock signal can be
''':    brought out to a pin via PPS called RCC. See
''':    Section 15.0 �Peripheral Pin Select
''':    (PPS) Module� and Table 15-3 in the datasheet
''':
''':    Clock support battery is connected to Pin 7 (porta.5).  No port assignment is required to support standby batter operation.
''':
''':    This has two modes US date and UK date style.
''':    Change 'clocktype' to 0 for US and 1 for UK
''':
''':    To set a new date and time, press the Set button
''':    which will take you consecutively to Month, Day, Year,
''':    Day of the Week, Hour, Minute and Second. Within each of
''':    these, press Mode to cycle through the possible values.
''':    You may hold the Mode button to increment automatically,
''':    or press momentarily for a single increment. Time is
''':    always set in 24-hour clock format.

'''@author  EvanV based on the works of Thomas Henry
'''@licence GPL
'''@version 1.1
'''@date    29.09.18
'''********************************************************************************


    'Chip Settings.
    #chip 16F19156, 32

    #option Explicit
    #config VBATEN=On                             'for the battery support. Enable battery support for the RTCC.
    #config RSTOSC = SOSC                         'for the 32.768hz clock support.  This value is the Reset-default value for COSC and selects the oscillator first used by user software
                                                  'INITSYS will handle the correct setting of the internal oscillator for frequency specified on the #chip directive.
    #config BOREN = ON, LPBOREN=ON                'for the battery support
    #config FEXTOSC=OFF                           'to ensure FEXOSC is not specified
    #config CLKOUTEN=OFF                          'to show clock on PortA.6 this is a hardcoded port. PPS cannot change.  You may loose SOSC clarity on your scope if you enable.
    #config MCLR = On                             'to enable master clear reset


    #include <microchiprtcc.h>                    'to enable the 16f19156 clock support
    #include <lcd2serialredirect.h>               'to enable ansi terminal rather that the lcd

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.5.11
    'PinManager data: v1.55
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85

    Sub InitPPS

            'Module: EUSART1
            RC4PPS = 0x000D    'TX1 > RC4

            'Setup Serial port
            #define USART_BAUD_RATE 19200
            #define USART_TX_BLOCKING

            RA1PPS = 0x0018    'RTCC > RA1

    End Sub

    '*****************************************************************************************************
    'Main program commences here.. everything before this is setup for the board.

    'RTCC specific setup
    #define  rttc_AlarmPulse    porta.1
    #define  rttc_AlarmPort     porta.0
    #define  rttc_OSCout        porta.6

    dir rttc_AlarmPulse out
    dir rttc_AlarmPort  out
    dir rttc_OSCout     out

; ----- Define clock parameter/settings for the user interface
  #define clocktype   1               ;0 is US or 1 is UK style
  #define debounce    250 mS          ;settling time for switches
  #define pressed     1               ;flag for pressed pushbutton. You could set to 0 if you are using pull down switches.
  #define setBut      portb.0         ;Set pushbutton
  #define modeBut     portb.1         ;Mode pushbutton

  dir setBut in
  dir modeBut in

;----- Variables used in the program

  Dim DAYSMAX, DAYSMAX as Byte
  dim changed as bit
  dim oldsec as byte
  dim mode, Oldmode, dayMax as byte
  oldsec = 255                        ;      init value


'    SETUP THE RTCC
'    rtcc_SetAlarm( 0 , 0 , 4 , 0, 0, 0 )   ' every 4th second
'    rtcc_SetAlarmMark ( rtcc_AlarmAssertion_EverySecond )
'    on Interrupt RTCAlarmTrigger call rttc_Interrupt

;----- Adjust the clock, if required.   See section 24.1.7 CALIBRATION of the datasheet for usage
  #define rtcc_Calibration_Offset 0


;----- Program

  CLS
  HserPrintStringCRLF "MicroChip RTCC"
  HserPrintStringCRLF "Demonstration v1.1"
  HserPrintStringCRLF ""
  HserPrintStringCRLF "VBATEN support"
  HserPrintStringCRLF "Great Cow BASIC"
  HserPrintStringCRLF "December 2019"

  wait 2 s
  cls

'
'  Locate 10,0
'  Print "VBATBOR = "
'  Print VBATBOR
'  Print " : BOR = "
'  print NOT_BOR

  ;Main body of program commences here.

  'get initial date
  rtcc_ReadDate( tm_wday, tm_mday, tm_mon, tm_year )

  'Hold down these two buttons to init the clock
  if setBut = pressed and modeBut = pressed  then

    cls
    HSerPrintStringCRLF "Init Clock"
    'format rtcc_SetClock(hour ,minute ,second ,DOW ,date ,month ,year)
            rtcc_SetClock(19   ,42      ,0      ,1   ,26   ,9     ,18 )

    'get initial date
            rtcc_ReadDate( tm_wday, tm_mday, tm_mon, tm_year )
  end if


  'main loop
  do

    updateDisp                        ;show time and date
    if setBut = pressed then
      changeSetting                   ;change time and date
    end if

  loop

end

;----- Subroutines

  sub printTime
    if tm_hour < 10 then               ;left pad with zero
      Print "0"
    end if
    Print tm_hour

    Print ":"
    if tm_min < 10 then                  ;left pad with zero
      Print "0"
    end if
    Print tm_min

    Print ":"
    if tm_sec < 10 then                  ;left pad with zero
      Print "0"
    end if
    Print tm_sec

    Print "     "                        ;wipe out garbage
  end sub

  ;-----

  sub printDate
    select case tm_wday                   ;day of the week
      case 0:
        Print "Sun."
      case 1:
        Print "Mon."
      case 2:
        Print "Tue."
      case 3:
        Print "Wed."
      case 4:
        Print "Thu."
      case 5:
        Print "Fri."
      case 6:
        Print "Sat."
      case else
        Print "Err."
    end select

    if clocktype = 0 then
      Print tm_mon
      Print "/"
      Printtm_mday
    else
      Print tm_mday
      Print  "/"
      Print tm_mon
    end if
    Print "/"
    Print tm_year
    Print "    "                        ;blank any garbage
  end sub

  ;-----

  sub updateDisp
    ;for best efficiency update the time only when the second changes
    rtcc_ReadClock( tm_hour, tm_min, tm_sec, tm_wday, tm_mday, tm_mon, tm_year)

    if oldsec <> tm_sec and tm_wday < 7 then

      'Support RTCC - clear the flags
      if VBATBOR = 1 then
          VBATBOR = 1
          NOT_BOR = 1
      end if

      locate 0, 0

      printTime                         ;show time

      printDate

      oldsec =  tm_sec
    end if
  end sub

  ;-----

  sub changeSetting
    changed = false                   ;assume no change will be made
    mode = 24                         ;ensure the display is correct

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    wait while ( setBut = pressed ) or ( modeBut = pressed )

    if clocktype = 0 then             ; handle US and UK clock type
       SetMonth
       SetDate
    else
       SetDate
       SetMonth
    end if
    SetYear

    ;***** Day of the Week

    cls
    Print "Set Weekday:"
    locate 1,0
    printDate

    do
      do while modeBut = pressed      ;Mode button held
        tm_wday++                         ;increment while pressed
        if tm_wday > 6 then               ;1 = Sunday, etc.
          tm_wday = 0
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
        wait debounce
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Hour

    cls
    Print "Set Hours:"
    locate 1,0
    printTime

    do
      do while modeBut = pressed      ;Mode button held
        tm_hour++                        ;increment while pressed
        if tm_hour > 23 then             ;remember, set in 24-hour mode
          tm_hour = 0
        end if

        locate 1,0                    ;Print updated display
        printTime
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
        wait debounce
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Minutes

    cls
    Print "Set Minutes:"
    locate 1,0
    printTime

    do
      do while modeBut = pressed      ;Mode button held
        tm_min++                         ;increment while pressed
        if tm_min > 59 then              ;0 to 59 minutes
          tm_min = 0
        end if

        locate 1,0                    ;Print updated display
        printTime
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
        wait debounce
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Second

    cls
    Print "Set Seconds:"
    locate 1,0
    printTime

    do
      do while modeBut = pressed      ;Mode button held
        tm_sec++                         ;increment while pressed
        if tm_sec > 59 then              ;0 to 59 seconds
          tm_sec = 0
        end if

        locate 1,0                    ;Print updated display
        printTime
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
        wait debounce
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Execute the new settings

    if changed then
      cls
      Print "Press Set, or"
      locate 1,0
      Print "Mode to revert"

      do while (setBut <> pressed)          ;wait for the Set button
        wait debounce
        if ModeBut = pressed then
           cls                               ;clear last message
           exit Sub                          ;do not set, exit set routine
        end if
      loop

      dim tm_temp_year Alias DAYSMAX
      tm_temp_year = tm_year mod 2000
      rtcc_SetClock( tm_hour , tm_min, tm_sec, tm_wday, tm_mday, tm_mon, tm_temp_year )
      rtcc_ReadDate( tm_wday, tm_mday, tm_mon, tm_year )
      rtcc_ReadTime(tm_hour, tm_min, tm_sec)
    end if

    do while (setBut = pressed)       ;wait for Set release
    loop

    wait debounce                     ;let it settle
    cls                               ;clear last message
    mode = Oldmode                    ;restore mode
  end sub


  sub setMonth
    ;***** Month
    cls
    Print "Set Month:"
    locate 1,0
    printDate

    do
      do while modeBut = pressed      ;Mode button held
        tm_mon++                       ;increment while pressed
        if tm_mon > 12 then
          tm_mon = 1
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
      loop
      wait debounce
    loop while setBut <> pressed      ;Set moves you on

    readTable monthDays, tm_mon, daysMax

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop
  end Sub

  sub SetDate
    ;***** Date

    cls
    Print "Set Date:"
    locate 1,0
    printDate
    readTable monthDays, tm_mon, daysMax
    do
      do while modeBut = pressed      ;Mode button held
        tm_mday++                        ;increment while pressed
        if tm_mday> daysMax then        ;stay within legal days
          tm_mday = 1
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeatt
        changed = true                ;a change was made
      loop
      wait debounce
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop
  end sub


  sub SetYear
    ;***** Year

    cls
    Print "Set Year:"
    locate 1,0
    printDate

    do
      do while modeBut = pressed      ;Mode button held
        tm_year++                        ;increment while pressed
        if tm_year > 2099 then             ;this millennium only
          tm_year = 2000
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
      loop
      wait debounce
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop



  end sub



'Handle the interrupt
sub rttc_Interrupt
    'Clear the Interrupt
    RTCCIF = 0
    rttc_AlarmPort = !rttc_AlarmPort
    rtcc_ReStartAlarm
end sub




;----- Tables

  table monthDays                     ;# of days in months
    31
    29                                ;leap years only
    31
    30
    31
    30
    31
    31
    30
    31
    30
    31
  end table
