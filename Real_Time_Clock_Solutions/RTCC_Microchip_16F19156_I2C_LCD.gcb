'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program shows the real time clock on a LCD. The LCD is driven by a LCD I2C adapter.
'''Two types of LCD are supported using this method, as shown below:
''':        Set LCD_10 to 10 for the YwRobot LCD1602 IIC V1 or the Sainsmart LCD_PIC I2C adapter
''':        Set LCD_10 to 12 for the Ywmjkdz I2C adapter with pot bent over top of chip
''':
''':    There are two pushbuttons: Mode and Set equates to Key1 and Key2. Connected to portb.0 and portb.1 resepectively.
''':
''':    This has two modes US date and UK date style.
''':    Change ''':clocktype''': to 0 for US and 1 for UK
''':
''':    To set a new date and time, press the Set button
''':    which will take you consecutively to Month, Day, Year,
''':    Day of the Week, Hour, Minute and Second. Within each of
''':    these, press Mode to cycle through the possible values.
''':    You may hold the Mode button to increment automatically,
''':    or press momentarily for a single increment. Time is
''':    always set in 24-hour clock format.

'''@author  EvanV
'''@licence GPL
'''@version 1.0
'''@date    15.12.17
'''********************************************************************************


    'Chip Settings.
    #chip 16F19156, 32
    #option Explicit

    #config FEXTOSC=OFF                           'to ensure FEXOSC is not specified
    #config CLKOUTEN=OFF                          'to show clock on PortA.6 this is a hardcoded port. PPS cannot change.  You may loose SOSC clarity on your scope if you enable.
    #config MCLR = On                             'to enable master clear reset



    #include <microchiprtcc.h>
    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.5.11
    'PinManager data: v1.55
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85

    Sub InitPPS

            'Module: MSSP1
            RC3PPS = 0x0013    'SCL1 > RC3
            SSP1CLKPPS = 0x0013    'RC3 > SCL1 (bi-directional)
            RC4PPS = 0x0014    'SDA1 > RC4
            SSP1DATPPS = 0x0014    'RC4 > SDA1 (bi-directional)
            'Module: RTCC - clock output
            RA1PPS = 0x0018    'RTCC > RA1

    End Sub
    'Template comment at the end of the config file

    #define LEDD1 PORTB.1
    #define LEDD2 PORTB.5
    #define SwitchIn        PORTB.0

    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     SwitchIn      In

        ' Define I2C settings
    #define HI2C_BAUD_RATE 100
    #define HI2C_DATA PORTC.4
    #define HI2C_CLOCK PORTC.3

    HI2CMode Master

    'Initialise I2C - For the MSSP module the ports need to be set to Input
    Dir HI2C_DATA in
    Dir HI2C_CLOCK in

    '''Set up LCD
    #define LCD_IO 10
    #define LCD_I2C_Address_1 0x4C

    'You may need to use SLOW or MEDIUM if your LCD is a slower device.
    #define LCD_SPEED slow
    'You may need to invert these states. Dependent of LCD I2C adapter.
    #define LCD_Backlight_On_State  1
    #define LCD_Backlight_Off_State 0


    'RTCC specific setup
    #define  rttc_AlarmPulse porta.1
    #define  rttc_AlarmPort porta.0

    '*****************************************************************************************************
    'Main program commences here.. everything before this is setup for the board.

    'SETUP THE RTCC
'    rtcc_setClock( 7, 55, 0, 5, 15, 12, 17)
'    rtcc_SetAlarm( 0 , 0 , 4 , 0, 0, 0 )   ' every 4th second
'    rtcc_SetAlarmMark ( rtcc_AlarmAssertion_EverySecond )
'    on Interrupt RTCAlarmTrigger call rttc_Interrupt

; ----- Define Hardware settings
  dir setBut in
  dir modeBut in

  #define clocktype   1               ;0 is US or 1 is UK style
  #define debounce    100 mS          ;settling time for switches
  #define delay       150 mS          ;delay time for pushbutton
  #define pressed     1               ;flag for pressed pushbutton
  #define setBut      portb.0         ;Set pushbutton
  #define modeBut     portb.1         ;Mode pushbutton


;----- Variables

  Dim DAYSMAX, DAYSMAX as Byte
  dim changed as bit
  dim oldsec as byte
  dim mode, Oldmode, dayMax as byte
  oldsec = 255                        ;      init value


;----- Adjust the clock, if required.   See section 24.1.7 CALIBRATION of the datasheet for usage
  #define rtcc_Calibration_Offset 0

;----- Program

  CLS

  locate 0,0
  Print "MicroChip RTCC"
  locate 1,0
  Print "No VBATEN support"
  wait 2 s
  CLS

  locate 0,0
  Print "Great Cow BASIC"
  locate 1,0
  Print "@2018"
  wait 2 s
  CLS


  ;Main body of program commences here.
  rtcc_ReadDate( tm_wday, tm_mday, tm_mon, tm_year )   ;get initial date

  'Hold down these two buttons to init the clock
  if setBut = pressed and modeBut = pressed  then
    locate 0,0
    Print "Init Clock"
    rtcc_SetClock( 1 , 1, 1 , 1, 1 , 1, 17 )
    rtcc_ReadDate( tm_wday, tm_mday, tm_mon, tm_year )   ;get initial date
  end if

  do

    updateDisp                        ;show time and date
    if setBut = pressed then
      changeSetting                   ;change time and date
    end if

  loop

end

;----- Subroutines

  sub printTime
    if tm_hour < 10 then               ;left pad with zero
      Print "0"
    end if
    Print tm_hour

    Print ":"
    if tm_min < 10 then                  ;left pad with zero
      Print "0"
    end if
    Print tm_min

    Print ":"
    if tm_sec < 10 then                  ;left pad with zero
      Print "0"
    end if
    Print tm_sec

    Print "     "                        ;wipe out garbage
  end sub

  ;-----

  sub printDate
    select case tm_wday                   ;day of the week
      case 0:
        Print "Sun."
      case 1:
        Print "Mon."
      case 2:
        Print "Tue."
      case 3:
        Print "Wed."
      case 4:
        Print "Thu."
      case 5:
        Print "Fri."
      case 6:
        Print "Sat."
      case else
        Print "Err."
    end select

    if clocktype = 0 then
      Print tm_mon
      Print "/"
      Print tm_mday
    else
      Print tm_mday
      Print "/"
      Print tm_mon
    end if
    Print "/"
    Print tm_year
    Print "    "                        ;blank any garbage
  end sub

  ;-----

  sub updateDisp
    ;for best efficiency, date is only updated once a day
    rtcc_ReadClock( tm_hour, tm_min, tm_sec, tm_wday, tm_mday, tm_mon, tm_year)

    if oldsec <> tm_sec then

      locate 0,0                        ;home the cursor
      printTime                         ;show time

      locate 1,0                        ;show the date
      printDate
      oldsec =  tm_sec
    end if
  end sub

  ;-----

  sub changeSetting
    changed = false                   ;assume no change will be made
    mode = 24                         ;ensure the display is correct

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    wait while ( setBut = pressed ) or ( modeBut = pressed )

    if clocktype = 0 then             ; handle US and UK clock type
       SetMonth
       SetDate
    else
       SetDate
       SetMonth
    end if
    SetYear

    ;***** Day of the Week

    cls
    Print "Set Weekday:"
    locate 1,0
    printDate

    do
      do while modeBut = pressed      ;Mode button held
        tm_wday++                         ;increment while pressed
        if tm_wday > 6 then               ;1 = Sunday, etc.
          tm_wday = 0
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
        wait debounce
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Hour

    cls
    Print "Set Hours:"
    locate 1,0
    printTime

    do
      do while modeBut = pressed      ;Mode button held
        tm_hour++                        ;increment while pressed
        if tm_hour > 23 then             ;remember, set in 24-hour mode
          tm_hour = 0
        end if

        locate 1,0                    ;Print updated display
        printTime
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
        wait debounce
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Minutes

    cls
    Print "Set Minutes:"
    locate 1,0
    printTime

    do
      do while modeBut = pressed      ;Mode button held
        tm_min++                         ;increment while pressed
        if tm_min > 59 then              ;0 to 59 minutes
          tm_min = 0
        end if

        locate 1,0                    ;Print updated display
        printTime
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
        wait debounce
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Second

    cls
    Print "Set Seconds:"
    locate 1,0
    printTime

    do
      do while modeBut = pressed      ;Mode button held
        tm_sec++                         ;increment while pressed
        if tm_sec > 59 then              ;0 to 59 seconds
          tm_sec = 0
        end if

        locate 1,0                    ;Print updated display
        printTime
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
        wait debounce
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Execute the new settings

    if changed then
      cls
      Print "Press Set, or"
      locate 1,0
      Print "Mode to revert"

      do while (setBut <> pressed)          ;wait for the Set button
        wait debounce
        if ModeBut = pressed then
           cls                               ;clear last message
           exit Sub                          ;do not set, exit set routine
        end if
      loop

      dim tm_temp_year Alias DAYSMAX
      tm_temp_year = tm_year mod 2000
      rtcc_SetClock( tm_hour , tm_min, tm_sec, tm_wday, tm_mday, tm_mon, tm_temp_year )
      rtcc_ReadDate( tm_wday, tm_mday, tm_mon, tm_year )
      rtcc_ReadTime(tm_hour, tm_min, tm_sec)
    end if

    do while (setBut = pressed)       ;wait for Set release
    loop

    wait debounce                     ;let it settle
    cls                               ;clear last message
    mode = Oldmode                    ;restore mode
  end sub


  sub setMonth
    ;***** Month
    cls
    Print "Set Month:"
    locate 1,0
    printDate

    do
      do while modeBut = pressed      ;Mode button held
        tm_mon++                       ;increment while pressed
        if tm_mon > 12 then
          tm_mon = 1
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
        wait debounce
      loop
      wait debounce
    loop while setBut <> pressed      ;Set moves you on

    readTable monthDays, tm_mon, daysMax

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop
  end Sub

  sub SetDate
    ;***** Date

    cls
    Print "Set Date:"
    locate 1,0
    printDate
    readTable monthDays, tm_mon, daysMax
    do
      do while modeBut = pressed      ;Mode button held
        tm_mday++                        ;increment while pressed
        if tm_mday> daysMax then        ;stay within legal days
          tm_mday = 1
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeatt
        changed = true                ;a change was made
        wait debounce
      loop
      wait debounce
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop
  end sub


  sub SetYear
    ;***** Year

    cls
    Print "Set Year:"
    locate 1,0
    printDate

    do
      do while modeBut = pressed      ;Mode button held
        tm_year++                        ;increment while pressed
        if tm_year > 2099 then             ;this millennium only
          tm_year = 2000
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
        wait debounce
      loop
      wait debounce
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop



  end sub



'Handle the interrupt
sub rttc_Interrupt
    'Clear the Interrupt
    RTCCIF = 0
    rttc_AlarmPort = !rttc_AlarmPort
    rtcc_ReStartAlarm
end sub


;----- Tables

  table monthDays                     ;# of days in months
    31
    29                                ;leap years only
    31
    30
    31
    30
    31
    31
    30
    31
    30
    31
  end table
