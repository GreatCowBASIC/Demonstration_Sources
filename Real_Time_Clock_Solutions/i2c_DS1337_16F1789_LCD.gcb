'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program shows the real time clock on a LCD. The LCD is driven by a LCD I2C adapter.
'''Two types of LCD are supported using this method, as shown below:
''':        Set LCD_10 to 10 for the YwRobot LCD1602 IIC V1 or the Sainsmart LCD_PIC I2C adapter
''':        Set LCD_10 to 12 for the Ywmjkdz I2C adapter with pot bent over top of chip
'''The DS1337 is attached to the I2C ports with appropiate resistors to the supply voltage.  Typically a 5k or 2.2k resistor 'pulling up' to the supply voltage can be used.
''':
''':    There are two pushbuttons: Mode and Set equates to Key1 and Key2. Connected to portb.0 and portb.1 resepectively.
''':
''':    During normal operation, the Mode button will toggle
''':    between 12- and 24-hours modes.
''':
''':    This has two modes US date and UK date style.
''':    Change ''':clocktype''': to 0 for US and 1 for UK
''':
''':    To set a new date and time, press the Set button
''':    which will take you consecutively to Month, Day, Year,
''':    Day of the Week, Hour, Minute and Second. Within each of
''':    these, press Mode to cycle through the possible values.
''':    You may hold the Mode button to increment automatically,
''':    or press momentarily for a single increment. Time is
''':    always set in 24-hour clock format.

'''@author          EvanV
'''@licence GPL
'''@version 1.2a
'''@date    23.02.15
'''********************************************************************************

; ----- Configuration
 #chip 16F1789, 32
 #option explicit

 #include <ds1337.h>


; ----- Define Hardware settings
  dir setBut in
  dir modeBut in


; Define Hardware I2C settings for SSP module
'        #define HI2C_BAUD_RATE 400
'        #define HI2C_DATA PORTC.4
'        #define HI2C_CLOCK PORTC.3
'        ;I2C pins need to be input for SSP module
'        Dir HI2C_DATA in
'        Dir HI2C_CLOCK in
'       ;MASTER I2C Device for SSP module
'        HI2CMode Master


;       Define I2C settings - CHANGE PORTS
  #define I2C_MODE Master
  #define I2C_DATA PORTC.4
  #define I2C_CLOCK PORTC.3
  #define I2C_DISABLE_INTERRUPTS ON
    ;   #define I2C_BIT_DELAY   20 us      width of data bit on SDA
    ;   #define I2C_CLOCK_DELAY 10 us      width of clock pulse on SCL

  '''Set up LCD
  #define LCD_IO 10
  #define LCD_I2C_Address_1 0x4E

  #define clocktype   1               ;0 is US or 1 is UK style
  #define debounce    50 mS            ;settling time for switches
  #define delay       150 mS          ;delay time for pushbutton
  #define pressed     1               ;flag for pressed pushbutton
  #define setBut      portb.0         ;Set pushbutton
  #define modeBut     portb.1         ;Mode pushbutton

;----- Variables

  Dim CENTURY_FLAG, POWERLOSS, DAYSMAX, DAYSMAX, ALARM1TRACK, ALARM2TRACK as Byte
  dim changed as bit
  dim hour, min, sec, am_pm as byte
  dim oldsec as byte
  dim date, month, year, DOW, century as byte
  dim mode, Oldmode, dayMax as byte
  oldsec = 255                        ; init value
  century = 20                        ; will be updated by Century calculation... if a century roll ever occurs!! Required in this example code.
    ;----- Tables

  table monthDays                     ;# of days in months. Required in this example code.
    31
    29                                ;leap years only
    31
    30
    31
    30
    31
    31
    30
    31
    30
    31
  end table



;----- Program
  CLS

  #ifdef HI2C_DATA
        Locate 0, 12
        Print "i2cHW"
        HI2CReStart                          ; is DS1337 present?
        HI2CSend(DS_AddrWrite)
        HI2CStop

        if HI2CAckPollState = True  then  ; is DS1337 present?
           Print "No DS1337"              ; user message
           locate 1,0
           Print "Stopped"                ; user message
           end
        end if
  #endif

  #ifdef I2C_DATA
        Locate 0, 12
        Print "i2cSW"
        I2CStart                          ; is DS1337 present?
        I2CSend(DS_AddrWrite)
        I2CStop

        if I2CSendState = False  then     ; is DS1337 present?
           Print "No DS1337"              ; user message
           locate 1,0
           Print "Stopped"                ; user message
           end
        end if
   #endif

  locate 0,0
  Print "DS1337"
  locate 1,0
  Print "GCBASIC"
  wait 2 s
  CLS

  ; Quick Command Reference:

  ; DS1337_EnableOscillator(flag [true|false])
  ; DS1337_OscillatorStopFlagStatus
  ; DS1337_ClearOscillatorStopFlag
  ; DS1337_ResetClock
  ; DS1337_SetClock(hour, minute, second, DOW, date, month, year)
  ; DS1337_SetTime(hour, minute, second)
  ; DS1337_SetDate(DOW, date, month, year)
  ; DS1337_ReadClock(hour, minute, second, a.m.|p.m., DOW, date, month, year)
  ; DS1337_ReadTime(hour, minute, second, a.m.|p.m.)
  ; DS1337_ReadDate(DOW, date, month, year)
  ; DS1337_SetHourMode(12|24)
  ; DS1337_ReadHourMode(12|24)
  ; DS1337_SetSQW(rate)
  ; DS1337_EnableSQW
  ; DS1337_DisableSQW

  ; DS1337_SetControl(value)
  ; DS1337_ReadControl. A function return currrent value
  ; DS1337_SetControlStatus(value)
  ; DS1337_ReadControlStatus. A function return currrent value

  ; DS1337_SetAlarm1 ( hour, minute, second, DOW, date )
  ; DS1337_SetAlarmMask1 ( alarmAssertionMatch )
  ; DS1337_ReadAlarm1 ( hour, minute, second, DOW, date ). Return values
  ; DS1337_ClearAlarm1
  ; DS1337_EnableAlarm1Interrupt
  ; DS1337_DisableAlarm1Interrupt
  ; DS1337_Alarm1Status
  ; DS1337_DisableAlarm1

  ; DS1337_SetAlarm2 ( hour, minute, DOW, date )
  ; DS1337_SetAlarmMask2 ( alarmAssertionMatch )
  ; DS1337_ReadAlarm2 ( hour, minute, DOW, date ). Return values
  ; DS1337_ClearAlarm2
  ; DS1337_EnableAlarm2Interrupt
  ; DS1337_DisableAlarm2Interrupt
  ; DS1337_Alarm2Status
  ; DS1337_DisableAlarm2

  ; DS1337_ReadRegister. A function
  ; DS1337_WriteRegister


  ; example uses of the DS1337 functions
  ;
  ; Example of setting the clock
  ;   DS1337_SetClock( 15, 33 , 0 , 1 , 4 , 1 , 15 )  ;h ours, minutes, seconds, day of week, date, month, year
  DS1337_ReadDate(DOW, date, month, year, century_flag )   ;get initial date
  if century_flag = 1 then
     DS1337_HandleCentury ( century_flag, Century )
  end if

  DS1337_ReadHourMode(mode)                 ;and the current mode
  DS1337_SetHourMode(mode)                  ;update hour mode from RTC
  DS1337_EnableOscillator( true )           ;and, ensure the clock is running

  ;
  ; Example of configuration of the 1hz output
  ;
  '  DS1337_EnableSQW
  '  DS1337_SetSQW 0
  '  DS1337_DisableSQW


  ; Examples of how to set the Alarms
  ; You MUST do the following:
      ;1. DS1337_SetAlarm1 (  hour, minute, second, DOW, date ) or DS1337_SetAlarm2 (  hour, minute, DOW, date )
      ;2. DS1337_SetAlarmMask1 ( DS1337_Alarm1Assertion_Seconds ) to set the mask, see below for the options.
      ;3. DS1337_ClearAlarm1 or DS1337_ClearAlarm2
      ;4. DS1337_EnableAlarm1Interrupt if you want to raise the SQW as external interrupt
      ;5. DS1337_Alarm1InterruptEnable

  ; You can test the status of the alarm by raising an interrupt in your PIC but you can also test DS1337_Alarm[1|2]Status.  DS1337_Alarm[1|2]Status. will return true | false.
  ; After the alarm event has occured you MUST clear the alarm, using DS1337_ClearAlarm1 or DS1337_ClearAlarm2


   ; DS1337_DisableAlarm1Interrupt                           ;turn off the SQW interrupt
   ; DS1337_DisableAlarm2Interrupt                           ;turn off the SQW  interrupt


    ; set Alarm1 - alert every time the Seconds is each 30th second
    DS1337_SetAlarm1 ( 11, 45, 30, 0, 1 )    ;DS1337_SetAlarm ( [0 |  1] , hour, minute, second, DOW, date )

        ; These are defined for usage
        ; DS1337_Alarm1Assertion_EverySecond                    = 0x0F
        ; DS1337_Alarm1Assertion_Seconds                        = 0x0E
        ; DS1337_Alarm1Assertion_MinutesSeconds                 = 0x0C
        ; DS1337_Alarm1Assertion_HoursMinutesSeconds            = 0x08
        ; DS1337_Alarm1Assertion_DateHoursMinutesSeconds        = 0x00
        ; DS1337_Alarm1Assertion_DayHoursMinutesSeconds         = 0x00

    DS1337_SetAlarmMask1 ( DS1337_Alarm1Assertion_Seconds ) ;DS1337_SetAlarmMask1 ( alarmAssertionMatch )
    DS1337_ClearAlarm1
    DS1337_EnableAlarm1Interrupt
    DS1337_ReadAlarm1( hour, min, sec, DOW, date )

    ; set Alarm2 - alert every Minute
    DS1337_SetAlarm2 ( 10, 1, 0, 1 )    ;DS1337_SetAlarm2 ( hour, minute, DOW, date )

        ; These are defined for usage
        ; DS1337_Alarm2Assertion_EveryMinute                    = 0x07
        ; DS1337_Alarm2Assertion_Minutes                        = 0x06
        ; DS1337_Alarm2Assertion_HoursMinutes                   = 0x04
        ; DS1337_Alarm2Assertion_DateHoursMinutes               = 0x00
        ; DS1337_Alarm2Assertion_DayHoursMinutesSeconds         = 0x00

    DS1337_SetAlarmMask2 ( DS1337_Alarm2Assertion_EveryMinute )
    DS1337_ClearAlarm2
    DS1337_EnableAlarm2Interrupt
    DS1337_ReadAlarm2( hour, min, DOW, date )                 ; just an example....

    ' DS1337_DisableAlarm1            ; if you want to turn the alarm off
    ' DS1337_DisableAlarm2            ; if you want to turn the alarm off

   ; End of example Alarm setup commands

; Main body of program commences here.
  DS1337_ReadDate(DOW, date, month, year, century_flag )   ;get initial date. This is required for main routine.
  if century_flag = 1 then
     DS1337_HandleCentury ( century_flag, Century )
  end if
  DS1337_ReadHourMode(mode)                 ;and the current mode

  ' initialise a tracking varaible
  powerloss = false

  ; display all registers in realtime display - you will need a big display!!
'    DS1337_ClearOscillatorStopFlag
'    DS1337_EnableAlarm1Interrupt
'    DS1337_EnableAlarm2Interrupt
'    oldsec = 61
'    do forever
'      do
'            DS1337_ReadTime(hour, min, sec, am_pm)
'      loop while oldsec = sec
'      oldsec = sec
'      for xloop = 0X00 to 0X0F
'        locate xloop, 0
'        LCDHex( xloop, LeadingZeroActive )
'        print "H "
'        print ByteToBin( DS1337_ReadRegister ( xloop ) )
'      next
'      if DS1337_Alarm1Status = 1 then    ; display message
'       oldsec = sec
'       DS1337_ClearAlarm1
'       locate 0,0
'       print sec
'      end if
'
'      if DS1337_Alarm2Status = 1 then    ; display message
'        wait 10 us
'        DS1337_ClearAlarm2
'      end if
'
'    loop


  do

    updateDisp                        ;show time and date

    if DS1337_OscillatorStopFlagStatus = true then           ; has a power loss occurred? and the oscillator has stopped?
      powerloss = true
      DS1337_ClearOscillatorStopFlag
    end if
    if powerloss = true then
       changeSetting
       powerloss = false
       DS1337_ClearOscillatorStopFlag
    end if

    if setBut = pressed then
      changeSetting                   ;change time and date
    end if

    if modeBut = pressed then
      changeMode                      ;12 or 24 hour mode
    end if

    ;Alarm Handling code. Simply tests the status and displays a message on the LCD

            if DS1337_Alarm1Status = 1 then    ; display message
               locate 0,15
               print "*1"
               DS1337_ClearAlarm1
               Alarm1track = sec
            end if


            if DS1337_Alarm2Status = 1 then    ; display message
               locate 1,15
               print "*2"
               DS1337_ClearAlarm2
               Alarm2track = sec
            end if

            if ((Alarm1track + 4) % 60 ) < sec then     ; clear the line after time delay of 4 secs
               locate 0,15
               print "  "
            end if

            if ((Alarm2track + 4) % 60 ) < sec then     ; clear the line after time delay of 4 secs
               locate 1,15
               print "  "
            end if
    ;End of Alarm Handling code.

  loop
end
  ;----- Subroutines

  sub printTime
    if mode = 24 then
      if hour < 10 then               ;left pad with zero
        Print "0"
      end if
    end if
    Print hour

    Print ":"
    if min < 10 then                  ;left pad with zero
      Print "0"
    end if
    Print min

    Print ":"
    if sec < 10 then                  ;left pad with zero
      Print "0"
    end if
    Print sec

    if mode = 12 then                 ;Print a.m or p.m
      if am_pm then                   ;only in 12-hour mode
        Print " p.m. "
      else
        Print " a.m. "
      end if
    else
      Print "     "                   ;wipe out garbage
    end if
  end sub

  ;-----

  sub printDate
    select case DOW                   ;day of the week
      case 1:
        Print "Sun:"
      case 2:
        Print "Mon:"
      case 3:
        Print "Tue:"
      case 4:
        Print "Wed:"
      case 5:
        Print "Thu:"
      case 6:
        Print "Fri:"
      case 7:
        Print "Sat:"
      case else
        Print "Err:"
    end select

    if clocktype = 0 then
      Print month
      Print "/"
      Print date
      Print "/"                       ;make four-digit year
      Print century
      if year < 10 then
        Print "0"
      end if

    else
      Print date
      Print "/"
      Print month
      Print "/"                       ;make four-digit year
      Print century
      if year < 10 then
        Print "0"
      end if
    end if
    Print year
    Print " "                        ;blank any garbage
  end sub

  ;-----

  sub updateDisp
    ;for best efficiency, date is only updated once a day
    DS1337_ReadTime(hour, min, sec, am_pm)
    if oldsec <> sec then
      if !(hour | min | sec) then       ;time to update
        DS1337_ReadDate(DOW, date, month, year, century_flag )
        if century_flag = 1 then
           DS1337_HandleCentury ( century_flag, Century )
           CLS
        end if
      end if

      locate 0,0                        ;home the cursor
      printTime                         ;show time

      locate 1,0                        ;show the date
      printDate
      oldsec =  sec
    end if
  end sub

  ;-----

  sub changeSetting
    changed = false                   ;assume no change will be made
    DS1337_ReadHourMode(Oldmode)      ;and the current mode
    mode = 24                         ;ensure the display is correct
    DS1337_SetHourMode(24)            ;change settings in 24-hour mode

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    wait while ( setBut = pressed ) or ( modeBut = pressed )

    if clocktype = 0 then             ; handle US and UK clock type
       SetMonth
       SetDate
    else
       SetDate
       SetMonth
    end if
    SetYear

    ;***** Day of the Week

    cls
    Print "Set Weekday:"
    locate 1,0
    printDate

    do
      do while modeBut = pressed      ;Mode button held
        DOW++                         ;increment while pressed
        if DOW > 7 then               ;1 = Sunday, etc.
          DOW = 1
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Hour

    cls
    Print "Set Hours:"
    locate 1,0
    if OldMode = 12 and am_pm then    ; make correction of AM_PM mode by adding 12 hours to handle mode changes
       hour = hour + 12
    end if

    printTime

    do
      do while modeBut = pressed      ;Mode button held
        hour++                        ;increment while pressed
        if hour > 23 then             ;remember, set in 24-hour mode
          hour = 0
        end if

        locate 1,0                    ;Print updated display
        printTime
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Minutes

    cls
    Print "Set Minutes:"
    locate 1,0
    printTime

    do
      do while modeBut = pressed      ;Mode button held
        min++                         ;increment while pressed
        if min > 59 then              ;0 to 59 minutes
          min = 0
        end if

        locate 1,0                    ;Print updated display
        printTime
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Second

    cls
    Print "Set Seconds:"
    locate 1,0
    printTime

    do
      do while modeBut = pressed      ;Mode button held
        sec++                         ;increment while pressed
        if sec > 59 then              ;0 to 59 seconds
          sec = 0
        end if

        locate 1,0                    ;Print updated display
        printTime
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Execute the new settings

    if changed then
      cls
      Print "Press Set, or"
      locate 1,0
      Print "Mode to revert"

      do while (setBut <> pressed)          ;wait for the Set button
        wait debounce
        if ModeBut = pressed then
           cls                               ;clear last message
           DS1337_SetHourMode(Oldmode)       ;restore current mode
           exit Sub                          ;do not set, exit set routine
        end if
      loop

      DS1337_SetHourMode(24)                 ;change settings in 24-hour mode
      DS1337_SetClock(hour, min, sec, DOW, date, month, year)
      powerloss  = false                      ; reset tracker variable
      DS1337_ClearOscillatorStopFlag
    end if

    do while (setBut = pressed)       ;wait for Set release
    loop

    wait debounce                     ;let it settle
    cls                               ;clear last message
    DS1337_SetHourMode(Oldmode)      ;restore current mode
    mode = Oldmode                    ;restore mode
  end sub

  ;-----

  sub changeMode
    DS1337_SetHourMode(24)            ;change settings in 24-hour mode

    if mode = 12 then                 ;toggle between 12 and 24
      mode = 24
    else
      mode = 12
    end if

    DS1337_SetHourMode(mode)          ;change to new mode

    do while modeBut = pressed        ;wait for a release
      wait debounce
    loop
  end sub

  sub setMonth
    ;***** Month
    cls
    Print "Set Month:"
    locate 1,0
    printDate

    do
      do while modeBut = pressed      ;Mode button held
        month++                       ;increment while pressed
        if month > 12 then
          month = 1
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
      loop
      wait debounce
    loop while setBut <> pressed      ;Set moves you on

    readTable monthDays, month, daysMax

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop
  end Sub



  sub SetDate
    ;***** Date

    cls
    Print "Set Date:"
    locate 1,0
    printDate
    readTable monthDays, month, daysMax
    do
      do while modeBut = pressed      ;Mode button held
        date++                        ;increment while pressed
        if date > daysMax then        ;stay within legal days
          date = 1
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeatt
        changed = true                ;a change was made
      loop
      wait debounce
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop
  end sub


  sub SetYear
    ;***** Year

    cls
    Print "Set Year:"
    locate 1,0
    printDate

    do
      do while modeBut = pressed      ;Mode button held
        year++                        ;increment while pressed
        if year > 99 then             ;this millennium only
          year = 0
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
      loop
      wait debounce
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop


  end sub

