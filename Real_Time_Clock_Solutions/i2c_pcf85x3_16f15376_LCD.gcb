'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
''': This program shows the real time clock on a LCD. The LCD is driven by a LCD I2C adapter.
''': Two types of LCD are supported using this method, as shown below:
''':        Set LCD_10 to 10 for the YwRobot LCD1602 IIC V1 or the Sainsmart LCD_PIC I2C adapter
''':        Set LCD_10 to 12 for the Ywmjkdz I2C adapter with pot bent over top of chip
''': The PCF85x3 is attached to the I2C ports with appropiate resistors to the supply voltage.  Typically a 5k or 2.2k resistor 'pulling up' to the supply voltage can be used.
''':
''':    There are two pushbuttons: Mode and Set equates to Key1 and Key2. Connected to portb.0 and portb.1 resepectively.
''':
''':    During normal operation, the Mode button will toggle the Alarm
''':
''':    This has two modes US date and UK date style.
''':    Change ''':clocktype''': to 0 for US and 1 for UK
''':
''':    To set a new date and time, press the Set button
''':    which will take you consecutively to Month, Day, Year,
''':    Day of the Week, Hour, Minute and Second. Within each of
''':    these, press Mode to cycle through the possible values.
''':    You may hold the Mode button to increment automatically,
''':    or press momentarily for a single increment. Time is
''':    always set in 24-hour clock format.

'''@author  EvanV
'''@licence GPL
'''@version 1.0a
'''@date    29.1.2019
'''********************************************************************************

; ----- Configuration
#chip 16f15376, 32
#option explicit

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.5.22
    'PinManager data: Not available (3)
    'Generated for 16F15376
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 16F15376

    Sub InitPPS

            'Module: MSSP1
            RB5PPS = 0x0016        'SDA1 > RB5
            SSP1DATPPS = 0x000D    'RB5 > SDA1 (bi-directional)
            RB7PPS = 0x0015        'SCL1 > RB7
            SSP1CLKPPS = 0x000F    'RB7 > SCL1 (bi-directional)

    End Sub
    'Template comment at the end of the config file

; ----- Set up LCD - not specific to the clock solution. Change to meet your needs
   #define LCD_IO 10
   #define LCD_I2C_Address_1 0x4C ; default to 0x4E
   'You may need to use SLOW or MEDIUM if your LCD is a slower device.
   #define LCD_SPEED FAST
   'You may need to invert these states. Dependent of LCD I2C adapter.
   #define LCD_Backlight_On_State  1
   #define LCD_Backlight_Off_State 0



; ----- Define Hardware settings for hwi2c - I2c is specific to the clock solution. Software and hardware i2C is supported.
    ' Define I2C settings - CHANGE PORTS if required for your specific device.
    #define hi2c_BAUD_RATE 100
    #define hi2c_DATA PORTb.5
    #define hi2c_CLOCK PORTb.7
    'Initialise I2C Master
    'I2C pins need to be input for SSP2 module
    Dir hi2c_DATA in
    Dir hi2c_CLOCK in



; ----- Commence the Clock specific solution
; ----- Define Clock include, clock addres and the input switch hardware settings

  #include <PCF85X3.h>
  #define DS_AddrWrite 0xA2
  #define DS_AddrRead  0xA3

  #define setBut      portb.0         ;Set pushbutton
  #define modeBut     portb.1         ;Mode pushbutton

  dir setBut in
  dir modeBut in

  #define clocktype   1               ;0 is US or 1 is UK style
  #define debounce    150 ms           ;settling time for switches
  #define delay       150 ms          ;delay time for pushbutton
  #define pressed     1               ;flag for pressed pushbutton

  #define Alarm0 0x00                 ;a reference to the alarm 0
  #define Alarm1 0x01                 ;a reference to the alarm 1



;----- Variables

  Dim DAYSMAX, DAYSMAX as Byte
  dim changed as bit
  dim hour, min, sec as byte
  dim oldsec as byte
  dim date, month, year, DOW as byte
  dim dayMax as byte
  oldsec = 255                        ;      init value

;----- Tables

  table monthDays                     ;# of days in months
    31
    29                                ;leap years only
    31
    30
    31
    30
    31
    31
    30
    31
    30
    31
  end table



;----- The user program

  'Create some custom characters
  CreateCustomCharacters

  LCDCursor CURSOROFF
  locate 0,0
  Print "PCF85x3 Clock"
  locate 1,0
  Print "Great Cow Basic 2019"
  wait 2 s
  CLS

  'Constants when calling PCF85x3_ResetClock that can/could be set.

  #define  PCF85x3_DEFAULT_HOUR        8
  #define  PCF85x3_DEFAULT_MIN         16
  #define  PCF85x3_DEFAULT_SEC         0
  #define  PCF85x3_DEFAULT_DAY         1
  #define  PCF85x3_DEFAULT_WEEKDAY     5
  #define  PCF85x3_DEFAULT_MONTH       2
  #define  PCF85x3_DEFAULT_YEAR        19
  'The constants above are used as the defaults when you reset the clock
  PCF85x3_ResetClock
  PCF85x3_Enable

  'or, set the clock this way
'  PCF85x3_SetClock(        8,         16,       55 ,         29,          5,        2,          19)

  'set the ClockOut by enabling like this
  PCF85x3_SetClockout ( true )

  'set the ClockOut frequency like this, using the following Constants
      'PCF85x3_CLKOUT_CTRL_REG_32_768_kHz
      'PCF85x3_CLKOUT_CTRL_REG_1_024_kHz
      'PCF85x3_CLKOUT_CTRL_REG_32_Hz
      'PCF85x3_CLKOUT_CTRL_REG_1_Hz
  PCF85x3_SetClockoutFrequency ( PCF85x3_CLKOUT_CTRL_REG_1_Hz )

  'set the alarm like this...
  '      PCF85x3_SetAlarm( hour, mins )
  'or
  '      PCF85x3_SetAlarm( hour, mins, day of the month [1-31], day of the week[0-6] )

  'set the alarm for 07:00 hrs
  PCF85x3_SetAlarm( 7, 0 )
  PCF85x3_ClearAlarm

  'Set the Alarm for each minute, each hour and minute (therefore daily) by using these assertions.  You can create you own assertions, simple OR the constants.
    'PCF85x3_Alarm_Off                                     0x00
    'PCF85x3_AlarmAssertion_Minute                         0x01
    'PCF85x3_AlarmAssertion_Hour                           0x02
    'PCF85x3_AlarmAssertion_Date                           0x04
    'PCF85x3_AlarmAssertion_DoW                            0x08

    'PCF85x3_AlarmAssertion_MinuteHour                     0x03       'at a specfic hour and every minute

 ;Set by passing correct data
  PCF85x3_EnableAlarm ( PCF85x3_AlarmAssertion_MinuteHour )


;----- Main body of program commences here.

  PCF85x3_ReadDate(date, DOW, month, year)   ;get initial date

  do

    updateDisp                        ;show time and date
    if setBut = pressed then
      changeSetting                   ;change time and date
    end if

    if modeBut = pressed then
      ShowAlarm
    end if

  loop

end

  ;----- Support User Subroutines

  sub printTime

    if hour < 10 then                 ;left pad with zero
      Print "0"
    end if
    Print hour

    Print ":"
    if min < 10 then                  ;left pad with zero
      Print "0"
    end if
    Print min

    Print ":"
    if sec < 10 then                  ;left pad with zero
      Print "0"
    end if
    Print sec

    Print "     "                    ;wipe out any garbage

  end sub

  ;-----

  sub printDate

    select case DOW                   ;day of the week
      case 0:
        Print "Sun."
      case 1:
        Print "Mon."
      case 2:
        Print "Tue."
      case 3:
        Print "Wed."
      case 4:
        Print "Thu."
      case 5:
        Print "Fri."
      case 6:
        Print "Sat."
      case else
        Print str(DOW)+":"
    end select

    if clocktype = 0 then
      Print month
      Print "/"
      Print date
      Print "/20"                       ;make four-digit year
      if year < 10 then
        Print "0"
      end if
    else
      Print date
      Print "/"
      Print month
      Print "/20"                       ;make four-digit year
      if year < 10 then
        Print "0"
      end if
    end if
    Print year
    Print " "                        ;blank any garbage
  end sub

  ;-----

  sub updateDisp
    ;for best efficiency, date should be updated once a day
    PCF85x3_ReadTime(hour, min, sec)


    if oldsec <> sec then

      if sec = 0 then                             ;time to update
        PCF85x3_ReadDate( date, DOW, month, year)

        locate 0, 19

        'Show clock integrity or the alarm

            '' If PCF85x3_ReadVL is 0 then the clock integrity is good... show a happy face
            'if PCF85x3_ReadVL = 0 then
            'LCDWriteChar 0
            'else
            'LCDWriteChar 1
            'end if

        'has the Alarm gone off? this clears the alarms automatically
           ' If PCF85x3_Alarm_bit ... show a happy face
            if PCF85x3_ReadAlarmState = 1 then
                LCDWriteChar 1
            else
                LCDWriteChar 0
            end if

      end if

      locate 0,0                        ;home the cursor
      printTime                         ;show time

      locate 1,0                        ;show the date
      printDate
      oldsec =  sec

    end if

  end sub

  ;-----

  sub changeSetting
    changed = false                   ;assume no change will be made

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    wait while ( setBut = pressed ) or ( modeBut = pressed )

    if clocktype = 0 then             ; handle US and UK clock type
       SetMonth
       SetDate
    else
       SetDate
       SetMonth
    end if
    SetYear

    ;***** Day of the Week

    cls
    Print "Set Weekday:"
    locate 1,0
    printDate

    do
      do while modeBut = pressed      ;Mode button held
        DOW++                         ;increment while pressed
        if DOW > 6 then               ;0 = Sunday, etc.
          DOW = 0
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
        wait while modeBut <> pressed  ;wait for repeat
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Hour

    cls
    Print "Set Hours:"
    locate 1,0
    printTime

    do
      do while modeBut = pressed      ;Mode button held
        hour++                        ;increment while pressed
        if hour > 23 then             ;remember, set in 24-hour mode
          hour = 0
        end if

        locate 1,0                    ;Print updated display
        printTime
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Minutes

    cls
    Print "Set Minutes:"
    locate 1,0
    printTime

    do
      do while modeBut = pressed      ;Mode button held
        min++                         ;increment while pressed
        if min > 59 then              ;0 to 59 minutes
          min = 0
        end if

        locate 1,0                    ;Print updated display
        printTime
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Second

    cls
    Print "Set Seconds:"
    locate 1,0
    printTime

    do
      do while modeBut = pressed      ;Mode button held
        sec++                         ;increment while pressed
        if sec > 59 then              ;0 to 59 seconds
          sec = 0
        end if

        locate 1,0                    ;Print updated display
        printTime
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
      loop
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop

    ;***** Execute the new settings

    if changed then
      cls
      Print "Press Set, or"
      locate 1,0
      Print "Mode to revert"

      do while (setBut <> pressed)          ;wait for the Set button
        wait debounce
        if ModeBut = pressed then
           cls                               ;clear last message
                                             ;do nothing - you could add setting the clock
           exit Sub                          ;exit set routine
        end if
      loop

      PCF85x3_SetClock(hour, min, sec, DOW, date, month, year)
    end if

    do while (setBut = pressed)       ;wait for Set release
    loop

    wait debounce                     ;let it settle
    cls                               ;clear last message
    PCF85x3_Enable                    ;ensure the clock is running
  end sub

  ;-----

  sub changeMode
   'Does nothing

    do while modeBut = pressed        ;wait for a release
      wait debounce
    loop
  end sub

  sub setMonth
    ;***** Month
    cls
    Print "Set Month:"
    locate 1,0
    printDate

    do
      do while modeBut = pressed      ;Mode button held
        month++                       ;increment while pressed
        if month > 12 then
          month = 1
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
      loop
      wait debounce
    loop while setBut <> pressed      ;Set moves you on

    readTable monthDays, month, daysMax

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop
  end Sub



  sub SetDate
    ;***** Date

    cls
    Print "Set Date:"
    locate 1,0
    printDate
    readTable monthDays, month, daysMax
    do
      do while modeBut = pressed      ;Mode button held
        date++                        ;increment while pressed
        if date > daysMax then        ;stay within legal days
          date = 1
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeatt
        changed = true                ;a change was made
      loop
      wait debounce
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop
  end sub


  sub SetYear
    ;***** Year

    cls
    Print "Set Year:"
    locate 1,0
    printDate

    do
      do while modeBut = pressed      ;Mode button held
        year++                        ;increment while pressed
        if year > 99 then             ;this millennium only
          year = 0
        end if

        locate 1,0                    ;Print updated display
        printDate
        wait while modeBut = pressed  ;wait for repeat
        changed = true                ;a change was made
      loop
      wait debounce
    loop while setBut <> pressed

    do while setBut = pressed         ;wait for Set release
      wait debounce
    loop


  end sub


  Sub ShowAlarm

      CLS
      dim myreg as Byte
      print "Alarm "
      PCF85x3_ReadRegister ( PCF85x3_HOURS_ALARM_REG, myreg )
      print leftpad( str(BcdToDec( myreg  & 0x7f )),2, "0" )
      print ":"
      PCF85x3_ReadRegister ( PCF85x3_MINS_ALARM_REG, myreg )
      print leftpad( str(BcdToDec( myreg  & 0x7f )),2, "0" )
      wait 5 s

  End Sub


  Sub CreateCustomCharacters

      'Create an array to store the character until it is copied
    Dim CharArray(8)

    'Set the array to hold the character
    'Binary has been used to improve the readability of the code, but is not essential
    CharArray(1) = b'00011011'
    CharArray(2) = b'00011011'
    CharArray(3) = b'00000000'
    CharArray(4) = b'00000100'
    CharArray(5) = b'00000000'
    CharArray(6) = b'00010001'
    CharArray(7) = b'00010001'
    CharArray(8) = b'00001110'

    'Copy the character from the array to the LCD
    LCDCreateChar 0, CharArray()

    'Set the array to hold the character
    'Binary has been used to improve the readability of the code, but is not essential
    CharArray(1) = b'00011011'
    CharArray(2) = b'00011011'
    CharArray(3) = b'00000000'
    CharArray(4) = b'00000100'
    CharArray(5) = b'00000000'
    CharArray(6) = b'00001110'
    CharArray(7) = b'00010001'
    CharArray(8) = b'00010001'

    'Copy the character from the array to the LCD
    LCDCreateChar 1, CharArray()

  End Sub
