'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program shows how to draw sprites on an ILI9326 device.
'''
'''The #define 'spritechoice' defines the sprite to be managed. You can define your own in the sprite tables. Each table is 8 pixles vertical - col1 to col8 in each table.
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.00
'''@date       27.09.18
'''********************************************************************************


#chip 16F1789,32


#option explicit
#include <glcd.h>
#define GLCD_TYPE GLCD_TYPE_ILI9326

    #define GLCD_RD       porta.3        ' read command line
    #define GLCD_WR       porta.2         ' write command line
    #define GLCD_RS       porta.1         ' Command/Data line
    #define GLCD_CS       porta.0         ' Chip select line
    #define GLCD_RST      porta.5         ' Reset line
    #define GLCD_DataPort portD



   ;define the frame_refresh
    #define frame_refresh 3  '1 to 5 is advised
    ;
    ;now rename colours to make it easier to set up sprite data
    #define bk ILI9326_BLACK
    #define re ILI9326_RED
    #define gr ILI9326_GREEN
    #define bl ILI9326_BLUE
    #define wh ILI9326_WHITE
    #define pu ILI9326_PURPLE
    #define ye ILI9326_YELLOW
    #define cy ILI9326_CYAN
    #define dg ILI9326_D_GRAY
    #define lg ILI9326_L_GRAY
    #define si ILI9326_SILVER
    #define ma ILI9326_MAROON
    #define ol ILI9326_OLIVE
    #define li ILI9326_LIME
    #define aq ILI9326_AQUA
    #define te ILI9326_TEAL
    #define na ILI9326_NAVY
    #define fu ILI9326_FUCHSIA
    ;backgroung color
    #define bg bk

    #define GLCD_OLED_FONT
    GLCDfntDefaultsize = 2

    GLCDPrint 30,50, " GCBASIC"
    GLCDPrint 30,70, "   Sprite Demo"
    GLCDPrint 30,90, "  ILI9326 @ 2023"

    Wait 6 s

    GLCDRotate Portrait
    GLCDCLS bg
    ;
    dim sprite_height,sprite_width as byte ;height and width of sprite in pixels
    ;dim spritedata as byte;data to make sprite
    dim sprite_x,sprite_y as Word
    dim ptr,spritedata_ptr,pixel as word
    ;
    ;demo vars
    dim temp,frame,frame_count as byte
    dim dx(8),dy(8) as word
    dim spy(8),oldspy(8) as word
    dim spx(8),oldspx(8) as word
    ;set up start sprite positions and directions
    dx(1)=2:dx(2)=3:dx(3)=65536-4:dx(4)=6
    dx(5)=65536-8:dx(6)=65536-8:dx(7)=65536-8:dx(8)=65536-8
    dy(1)=65536-5:dy(2)=65536-3:dy(3)=65536-8:dy(4)=3
    dy(5)=2:dy(6)=7:dy(7)=2:dy(8)=8
    ;
    spx(1)=30:spx(2)=100:spx(3)=150:spx(4)=50
    spx(5)=160:spx(6)=100:spx(7)=80:spx(8)=30
    spy(1)=20:spy(2)=20:spy(3)=16:spy(4)=50:spy(5)=60:spy(6)=40
    spy(5)=20:spy(6)=30:spy(7)=24:spy(8)=36
    sprite_height=16:sprite_width=16
    spritedata_ptr=1
    frame=0:frame_count=0
    ;
    do ;demo moving sprite
      for temp=1 to 8
        if spx(temp)> (399-sprite_width) then ;check right edge
          dx(temp)= 65536-dx(temp)
        end if
        if spx(temp)<8 then ;check left edge
          dx(temp)= 65536-dx(temp)
        end if
        if spy(temp)> (229-sprite_height) then ;check bottom edge
          dy(temp)= 65536-dy(temp)
        end if
        if spy(temp)<8 then ;check top edge
          dy(temp)= 65536-dy(temp)
        end if
      ;
        oldspx(temp)=spx(temp):oldspy(temp)=spy(temp) ;get last position for erase
        spx(temp)=spx(temp)+dx(temp):spy(temp)=spy(temp)+dy(temp) ;get new position for draw
      ;
        if frame=0 then;which sprite to draw
          erase_sprite (oldspx(temp),oldspy(temp)) ;erase sprite at last position
          ' 1 ;pointer to sprite 1 in table
          sprite (spx(temp),spy(temp), 1 ) ;draw sprite1 at new position
        else
          erase_sprite (oldspx(temp),oldspy(temp)) ;erase sprite at last position
          ' 257 ;pointer to sprite 2 in table
          sprite (spx(temp),spy(temp), 257) ;draw sprite2 at new position
        end if
      ;
      next temp
      frame_count++ ;when to change spritedata_ptr
      if frame_count=frame_refresh then
        frame=!frame
        frame_count=0
      end if
    loop ;end demo
    ;

    sub sprite ( in sprite_x as word , in sprite_y as word , in spritedata_ptr as word  ) ;fills box with sprite data
      dim ptrx, ptry as word

      ptr = spritedata_ptr
      for ptry = sprite_x+1 to sprite_x+16
        for ptrx = sprite_y+1 to sprite_y+16
          ReadTable spritedata,ptr,pixel
          Pset ptrx, ptry, pixel
          ptr++
        next
      next
    end sub
    ;
    sub erase_sprite ( in sprite_x as word , in sprite_y as word ) ;write a box of 0's
      dim ptrx, ptry as word

      for ptry = sprite_x+1 to sprite_x+16
        for ptrx = sprite_y+1 to sprite_y+16
          Pset ptrx, ptry, bg
        next
      next
    end sub
    ;
    table spritedata ;sprite 1
    wh,bl,bl,bl,bl,bg,bg,bg,bg,bg,bg,bl,bl,bl,bl,wh
    bg,bl,re,re,re,bl,bl,bg,bg,bl,bl,re,re,re,bl,bg
    bg,bg,bl,re,re,re,bl,bg,bg,bl,re,re,re,bl,bg,bg
    bg,bg,bg,bl,re,wh,bl,bg,bg,bl,wh,re,bl,bg,bg,bg
    bg,bg,bg,bg,bl,wh,bl,bg,bg,bl,wh,bl,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bl,bl,bg,bg,bl,bl,bg,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg
    bg,bg,bg,bg,ye,ye,ye,bg,bg,ye,ye,ye,bg,bg,bg,bg
    bg,bg,bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg,bg,bg
    bg,ye,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,ye,bg
    bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg
    ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bl,ye
    ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye
    ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye
    bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg
    bg,bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg,bg
    ;
    ;sprite 2
    bl,bl,bl,bl,bl,bg,bg,bg,bg,bg,bg,bl,bl,bl,bl,bl
    bg,bl,re,re,re,bl,bl,bg,bg,bl,bl,re,re,re,bl,bg
    bg,bg,bl,wh,wh,re,bl,bg,bg,bl,re,wh,wh,bl,bg,bg
    bg,bg,bg,bl,re,wh,bl,bg,bg,bl,wh,re,bl,bg,bg,bg
    bg,bg,bg,bg,bl,wh,bl,bg,bg,bl,wh,bl,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bl,bl,bg,bg,bl,bl,bg,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bg,bg,ye,ye,bg,bg,bg,bg,bg,bg,bg
    bg,bg,bg,bg,bg,ye,ye,bg,bg,ye,ye,bg,bg,bg,bg,bg
    bg,bg,bg,bg,ye,ye,bg,bg,bg,bg,ye,ye,bg,bg,bg,bg
    bg,bg,bg,bg,ye,bg,bg,bg,bg,bg,bg,ye,bg,bg,bg,bg
    bg,bg,bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg,bg,bg
    bg,bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg,bg
    bg,bg,bg,ye,ye,bg,bg,bg,bg,bg,bg,ye,ye,bg,bg,bg
    bg,bg,bg,bg,ye,ye,bg,bg,bg,bg,ye,ye,bg,bg,bg,bg
    bg,bg,bg,bg,bg,ye,bg,bg,bg,bg,ye,bg,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bg,ye,bg,bg,ye,bg,bg,bg,bg,bg,bg
    end table


end

