'''A demonstration program for Explicit-Paper from WaveShare.
 '''-------------------------------------------------------------------------
' -------------------------------------------------------
 '''This has been tested using the hardware and software SPI option.

 '''*************************************************************************


     'Chip Settings.
    #chip 18F47k42, 64
      #option explicit


    'PPS Tool version: 0.0.5.27
    'PinManager data: v1.78
    'Generated for 18F47K42
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F47K42

    Sub InitPPS
         'This has been added to turn off PPS SPI when in SPI software mode
            #ifdef SPISRAM_HARDWARESPI
                'Module: SPI1
                RC3PPS = 0x001E    'SCK1 > RC3
                SPI1SCKPPS = 0x0013    'RC3 > SCK1 (bi-directional)
                RC5PPS = 0x001F    'SDO1 > RC5
                SPI1SDIPPS = 0x0014    'RC4 > SDI1
                'Module: UART pin directions
            #endif
            'Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            'Module: UART1
            RC6PPS = 0x0013    'TX1 > RC6
    End Sub
    'Template comment at the end of the config file

    'Setup the E-Paper
     #include <glcd.h>

     #define GLCD_TYPE GLCD_TYPE_EPD_EPD7in5
     #define GLCD_EXTENDEDFONTSET1
     #define GLCD_OLED_FONT


     'Pin mappings for SPI - this GLCD driver supports Hardware SPI and Software SPI
    #define GLCD_DC     portA.0   ' Data(hight)/ command(low) line
    #define GLCD_CS     portC.1   ' Chip select line (negate)
    #define GLCD_RESET  portD.2   ' Reset line       (negate)
    #define GLCD_DO     portC.5   ' GLCD MOSI connect to MCU SDO
    #define GLCD_SCK    portC.3   ' Clock Line
    #define GLCD_Busy   portC.0   ' Busy Line

 '  The following should be used   '#define EPD_HardwareSPI     'remove comment out if you want to use software SPI.
     #define EPD_HardwareSPI

'***************************************************************************


    #define SPISRAM_CS            Porta.2           'Also known as SS, or Slave Select
    #define SPISRAM_SCK           Portc.3           'Also known as CLK
    #define SPISRAM_DO            Portc.5           'Also known as MOSI
    #define SPISRAM_DI            Portc.4           'Also known as MISO

    #define SPISRAM_HARDWARESPI
    #define SPISRAM_TYPE          SRAM_23LC1024

'********************************************************************************
  'main

    #include "resources\emptyspace.bmp640"
    #include "resources\fine.bmp640"
    #include "resources\intermittent.bmp640"
    #include "resources\cloudy.bmp640"

    GLCDForeground=TFT_BLACK
    GLCDBackground=TFT_WHITE
    GLCDfntDefaultSize = 2

    GLCDRotate ( Landscape )

    GLCDDisplay on
    EPD_LoadBMP  emptyspace, true,  TFT_BLACK
    SendCommand_EPD2in13D(DISPLAY_REFRESH)

   GLCDDisplay on


   GLCD_Open_PageTransaction
        localnews
        GLCDPrintLargeFont ( 20 ,  100 , tempstring )
        GLCDPrintLargeFont ( 20 ,  60 , "Preston" )
        GLCDPrintLargeFont ( 200 , GLCDDeviceHeight - 100 , "Fine Weather today" )
        GLCDPrintLargeFont ( 200 , GLCDDeviceHeight - 60 , "GCBASIC" )

    GLCD_Close_PageTransaction

    EPD_LoadBMP  emptyspace, true,  TFT_BLACK
    EPD_LoadBMP  fine,       false, TFT_BLACK
    SendCommand_EPD2in13D(DISPLAY_REFRESH)

    WAIT 3 S

    GLCDDisplay on
    GLCD_Open_PageTransaction
        localnews
        GLCDPrintLargeFont ( 20 ,  100 , tempstring )
        GLCDPrintLargeFont ( 20 ,  60 , "Johannesburg" )
        GLCDPrintLargeFont ( 200 , GLCDDeviceHeight - 100 , "Cloudy Weather today" )
        GLCDPrintLargeFont ( 200 , GLCDDeviceHeight - 60 , "GCBASIC" )

    GLCD_Close_PageTransaction

    EPD_LoadBMP  emptyspace, true,  TFT_BLACK
    EPD_LoadBMP  cloudy,       false, TFT_BLACK
    SendCommand_EPD2in13D(DISPLAY_REFRESH)


    WAIT 3 S

    GLCDDisplay on
    GLCD_Open_PageTransaction
        localnews
        GLCDPrintLargeFont ( 20 ,  100 , tempstring )
        GLCDPrintLargeFont ( 20 ,  60 , "Johannesburg" )
        GLCDPrintLargeFont ( 200 , GLCDDeviceHeight - 100 , "Sunny and cloudy today" )
        GLCDPrintLargeFont ( 200 , GLCDDeviceHeight - 60 , "GCBASIC" )

    GLCD_Close_PageTransaction

    EPD_LoadBMP  emptyspace, true,  TFT_BLACK
    EPD_LoadBMP  intermittent,       false, TFT_BLACK
    SendCommand_EPD2in13D(DISPLAY_REFRESH)


    GLCDDisplay Off
    WAIT 3 S


wait 30 s
GLCDDisplay On
GLCDForeground=TFT_BLACK
GLCDBackground=TFT_WHITE
GLCDCLS
GLCDDisplay Off

end

'*********************************************************************************************************

   dim advalue as Integer
   dim tempstring as string


   sub localnews

      box 0, 70, 180, 200
      GLCDPrint  ( 42, 192, "Local News" )

      dim advalue as Integer
      advalue = ReadAD(AN1)
      advalue = Scale(advalue, 0,255, -40, 40)
      dim tempstring as string
      tempstring = StrInteger (advalue)+"c"

   End sub

'''
'''  table name, clear the screen, color
'''

macro EPD_LoadBMP ( in epd_tablename, in epd_resetscreen, in epd_color )
      'version 1.01
      'Source BMP MUST BE 640 width
      Dim EPD2in13D_Data as word
      Dim EPD7in5_Data_Black, EPD7in5_Data as word
      Dim tableposition as word
      'Requires a long
      Dim monoData as long
      Dim dibHeader_Width, dibHeader_Height as long


      'read table - not key information to this method
      Readtable  epd_tablename, 1 ,  dibHeader_Width
      Readtable  epd_tablename, 2 ,  dibHeader_Height



      'Set up the variables
      monoData = 0
      tableposition = 3
      EPD7in5_Data_Black=epd_color

      if epd_resetscreen = true then
          'Send new data is coming commmand to EPD.
          SendCommand_EPD2in13D(Data_Transmission_1)
      end if

      dim sendDataFlag as byte
      sendDataFlag = 0
      EPD7in5_Data = 0


     'Now to unpack the table data

      SET EPD_CS OFF
      SET EPD_DC ON

      'Protect from crazt tables - if not 640 set to 0xffff... do nothing.
      if dibHeader_Width <> 640 then monoData = 0xffff

      Do while monoData <> 0xFFFF   '0xffff is the end of table marker, as we do not know the length of the table.

          Readtable  epd_tablename, tableposition ,  monoData
          tableposition++

          if monoData <> 0xFFFF then

            'Repeat a number of times - we have a pixel state of 0 or 1 in EPD7in5_Data_Black
            'initally EPD7in5_Data  is 0 so we work thru the variable setting bits as needed
            Repeat monoData

                  'First time through sendDataFlag = 0 so, set the bit.  Then, sendDataFlag =1, so the next test !if sendDataFlag = 2 then" moves the lower nibble to the upper nibble
                  if sendDataFlag < 2 then

                      if EPD7in5_Data_Black= 0 then
                          EPD7in5_Data.0  = 0
                      else
                          EPD7in5_Data.0  = 1
                      end if

                      sendDataFlag++

                  end if


                  if sendDataFlag = 2 then
                      'When sendDataFlag = 2.. the following has happen
                      'the byte that is about to be sent has the folowing.
                      '00110011 where this is setting the pixels to 0x0303, or
                      '00000000 where this is 0x0000.
                      '
                      'Why use this method?
                      '
                      'We do not know that all the table data of bits is an even number.  We need to address when this happens...   0x0003 or 0x0300
                      'The sendDataFlag ensure that if the table in odd the correct sequence of bits in  the byte are correct.

                      'This macro assumes the use of the variable EPD7in5_Data
                      SendData_EPD7in5_Macro

                      'reset the flag as we need to construct a new byte to be sent
                      sendDataFlag = 0

                  else

                      'Shift the nibble to the left
                      repeat 4
                        Set C Off
                        rotate EPD7in5_Data left
                      end repeat

                  end if

            end repeat

            'Change pixel 'color'
            if EPD7in5_Data_Black = 0 then
              EPD7in5_Data_Black = 1
            else
              EPD7in5_Data_Black = 0
            end if

          end if
      Loop
      SET EPD_CS ON

end macro
