'''This program is a simple GLCD demonstration of read a pixel state on the GLCD - see the function ReadPixel_SSD1306()
'''Then, the state of the GLCD is shown on an ANSI serial terminal
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.
'''This program examines the GLCD memory, see https://cdn.sparkfun.com/assets/learn_tutorials/4/7/7/Font1_MicroView_5x8_FontMapping.png
'''
'''The SSD1306 controller a small graphical OLED, suitable for a lot of various projects.
'''The display is 38*35 mm, with an active display surface of 0.96inches , and a 128*64 pixel resolution.
'''The display is easy to interface, using an I2C type of communication.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''
'''The terminal is connect to the serial port of the microcontroller at 115200bps.
'''The terminal software needs to support ANSI as this uses the LCD GCB Serial redirection option.
'''
'''@author  EvanV
'''@licence GPL
'''@version 1.4
'''@date    11.4.17


; ----- Configuration
  #chip mega328p,16
  #option explicit
  #include <glcd.h>

; ----- Define Hardware settings
  ' Define I2C settings
  #define HI2C_BAUD_RATE 400
  #define HI2C_DATA
  HI2CMode Master

; ----- Define GLCD Hardware settings
  #define GLCD_TYPE GLCD_TYPE_SSD1306
  #define GLCD_I2C_Address 0x78

  #include <lcd2serialredirect.h>

  ; ----- Define Hardware settings
  ; Required to LCD to Serial redirection
   #define LCD_IO 0
   #define LCD_WIDTH 20                ;specified lcd width for clarity only.  20 is the default width
   #DEFINE LCD_SPEED  FAST

  'USART settings
  #define USART_BAUD_RATE 115200  'Initializes USART port
  #define USART_TX_BLOCKING ' wait for tx register to be empty
  #define USART_DELAY 0 ms

; ----- Define variables

  Dim BYTENUMBER, xCount, yCount as Byte

  dim longNumber as long
  longNumber = 123456 ' max value = 4294967290
  dim wordNumber as Word
  dim outstring as string
  wordNumber = 0
  byteNumber = 0

  #define LED_GLCD_HEIGHT GLCD_HEIGHT-1

; ----- Main program
        Dim BYTENUMBER, CCOUNT as Byte
      GLCDfntDefaultsize = 1
      CCount = 0
      dim longNumber as long
      longNumber = 4294967290 ' max value = 4294967296
      dim wordNumber as Word
      dim outString as string
      wordNumber = 0
      byteNumber = 0

      box 0,0,GLCD_WIDTH-1, LED_GLCD_HEIGHT-1
      GLCDfntDefaultsize = 2
      GLCDPrint ( 0,   0, "GCBASIC")                                ; Print some texT
      GLCDPrint ( 0,   18, "GCBASIC")                                ; Print some text
      GLCDfntDefaultsize = 1

      GLCDPrint ( 0,   52, "@Anobium")                                ; Print some text
      ShowGLCDonTerminal                                              ; Show GCLD on Serial Terminal
      wait 4 s
      GLCDCLS

      ' Prepare the static components of the screen
      GLCDPrint ( 0,   0, "PrintStr")                                ; Print some text
      GLCDPrint ( 64,  0, "LAT@")                                    ; Print some more text
      GLCDPrint ( 88,  0, ChipMhz)                                   ; Print chip speed
      GLCDPrint ( 100, 0, "Mhz")                                     ; Print some text
      GLCDDrawString( 0,8,"DrawStr")                                 ; Draw some text
      box 0,0,GLCD_WIDTH-1, LED_GLCD_HEIGHT-1                        ; Draw a box
      box GLCD_WIDTH-5, LED_GLCD_HEIGHT-5,GLCD_WIDTH-1, LED_GLCD_HEIGHT-1    ; Draw a box
      Circle( 44,41,15)                                              ; Draw a circle
      line LED_GLCD_HEIGHT,31,0,31                                                ; Draw a line

      DO forever
         for CCount = 32 to 127
              GLCDPrint ( LED_GLCD_HEIGHT ,  36,  hex(longNumber_E ) )                 ; Print a HEX string
              GLCDPrint ( 76 ,  36,  hex(longNumber_U ) )                 ; Print a HEX string
              GLCDPrint ( 88 ,  36,  hex(longNumber_H ) )                 ; Print a HEX string
              GLCDPrint ( 100 ,  36, hex(longNumber   ) )                 ; Print a HEX string
              GLCDPrint ( 112 ,  36, "h" )                                ; Print a HEX string


              GLCDPrint ( LED_GLCD_HEIGHT ,  44, pad(str(wordNumber), 5 ) )           ; Print a padded string
              GLCDPrint ( LED_GLCD_HEIGHT ,  52, pad(str(byteNumber), 3 ) )           ; Print a padded string

              box (46,9,56,19)                                           ; Draw a Box
              GLCDDrawChar(48, 9, CCount )                               ; Draw a character
              outString = str( CCount )                                  ; Prepare a string
              GLCDfntDefaultsize = 2
              GLCDDrawString(LED_GLCD_HEIGHT, 8, pad(outString,3) )                   ; Draw a string
              GLCDfntDefaultsize = 1
              filledbox 3,43,11,51, wordNumber                           ; Draw a filled box

              FilledCircle( 44,41,9, longNumber xor 1)                   ; Draw a filled box
              line 0,LED_GLCD_HEIGHT-2,LED_GLCD_HEIGHT,31                                            ; Draw a line

                                                                         ; Do some simple maths
              longNumber = longNumber + 7 : wordNumber = wordNumber + 3 : byteNumber++
              ShowGLCDonTerminal
          NEXT
      LOOP



    End

; Show GCLD on Serial Terminal - paints the complete buffer
Sub ShowGLCDonTerminal
 'Paints complete screen - can be optimised to show the changes only
 for yCount = 0 to 63
  for xCount = 0 to 127

      'Examine the Pixel here!!
      if ReadPixel_SSD1306( xCount, yCount, 1 ) = On Then
         locate yCount+2, xCount+2          ;add 2 as a serial screen offset only.
         print chr(235)
      else
         print " "
      end if
    next

  HSerPrintCRLF
  next
end sub

'''Draws a pixel on the GLCD
'''@param GLCDX X coordinate of pixel
'''@param GLCDY Y coordinate of pixel
'''@param GLCDColour State of pixel ( GLCDBackground | GLCDForeground )
dim GLCDBitNo, GLCDChange, GLCDDataTemp,GLCDColour as byte
Function ReadPixel_SSD1306(In GLCDX, In GLCDY, Optional In GLCDColour As Word = 1 )
    dim GLCDBitNo, GLCDChange, GLCDDataTemp as byte
    'Examine pixel at X, Y on LCD to State
    'X is 0 to 127
    'Y is 0 to 63
    'Origin in top left

  #if GLCD_TYPE = GLCD_TYPE_SSD1306


          SSD1306_BufferLocationCalc = GLCDY
          Repeat 3
            Set C Off
            Rotate SSD1306_BufferLocationCalc Right
          End Repeat
          SSD1306_BufferLocationCalc = SSD1306_BufferLocationCalc * GLCD_WIDTH

          SSD1306_BufferLocationCalc = GLCDX + SSD1306_BufferLocationCalc+1
          GLCDDataTemp = SSD1306_BufferAlias(SSD1306_BufferLocationCalc)
          'Change data to examine pixel
          GLCDBitNo = GLCDY And 7
          Repeat GLCDBitNo
            Rotate GLCDDataTemp right
          End Repeat

          ReadPixel_SSD1306 = GLCDDataTemp.0

  #endif
end function
