'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the ST7735 GLCD capabilities.  It is a nice small graphical LCD, suitable for a lot of various projects.
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''@author  EvanV
'''@licence GPL
'''@version 1.0
'''@date    17.04.2019
'''********************************************************************************

  'Chip Settings.
  #chip 18F47K42
  #option explicit


    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.5.26
    'PinManager data: v1.76
    'Generated for 18F47K42
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F47K42

    Sub InitPPS

            'Module: SPI1
            RC5PPS = 0x001F    'SDO1 > RC5
            RC3PPS = 0x001E    'SCK1 > RC3
            SPI1SCKPPS = 0x0013    'RC3 > SCK1 (bi-directional)

    End Sub
    'Template comment at the end of the config file


    #include <glcd.h>
    #define GLCD_TYPE GLCD_TYPE_ST7735
    #define ST7735TABCOLOR ST7735_BLACKTAB  ' can be ST7735_BLACKTAB, ST7735_GREENTAB or ST7735_REDTAB.  Each tab is a different ST7735 configuration.
                                            ' you may have to try all three - if you do not know what chipset you have.

   'Pin mappings for SPI
    #define GLCD_DI  portc.4        '  NOT CONNECTED - can loop back if required
    #define GLCD_DO  portc.5        ' > SDA
    #define GLCD_SCK portc.3       ' > SCK

    #define GLCD_DC porta.0       ' > A0
    #define GLCD_CS portc.1        ' > CS    p16
    #define GLCD_RESET portc.0     ' > RESET p15

    #define ST7735_HardwareSPI     ' remove comment out if you want to use software SPI.


    'For the K42 type SPI MODULE ONLY hardware SPI only
    'You can specify an SPI baud rate - the baud rate is dependent on the chip frequency!
    'If you get nothing, you have exceeded the SPI modules capabilites, so, slow down the BAUD RATE or use the SPI_BAUD_RATE_REGISTER constant, shown below.

    'The default SPI_BAUD_RATE is 1/4th of the clock frequency in khz. Khz is used to allow for fine adjustment
    'The following example is commented out intentionally
        '#define SPI_BAUD_RATE 32000

    'or, use an explicit constant as show below
    'The following example is commented out intentionally
        '#define SPI_BAUD_RATE_REGISTER 3

    'Optionally, you can define the HWSPIMode by using #define HWSPIMode masterfast where #define HWSPIMode is masterslow|master|masterfast
    'This will overwrite the default in the GLCD SPI library.  This is so users do not have to change the library.
    'the default is "master"
    'The following example can be commented out if you want to use the default value
        '#define HWSPIMode masterfast






'*************************** GLCD Specific setup ************************************************
    'GLCD selected extension font set. ASCII characters 31-254, the extended font uses 1358 bytes of program memory
    #define GLCD_EXTENDEDFONTSET1
    GLCDfntDefaultsize = 1

    'GLCDCLS  supports GLCDBackground as default
    'GLCDCLS  also support passing color parameter.
    'GLCDCLS [color]
    GLCDRotate ( Landscape_rev )     ' optionally you can rotate the screen.


    'Available colors
    'TFT_BLACK
    'TFT_RED
    'TFT_GREEN
    'TFT_BLUE
    'TFT_WHITE
    'TFT_PURPLE
    'TFT_YELLOW
    'TFT_CYAN
    'TFT_D_GRAY
    'TFT_L_GRAY
    'TFT_LIGHTGREY
    'TFT_MAROON
    'TFT_OLIVE
    'TFT_LIME
    'TFT_AQUA
    'TFT_TEAL
    'TFT_NAVY
    'TFT_FUCHSIA

    Dim CCOUNT, BYTENUMBER, OLDFONT, OLDFONT as Byte

    CCount = 31
    dim longNumber as long
    longNumber = 0 ' max value = 4294967290
    dim wordNumber as Word
    wordNumber = 0
    byteNumber = 0


    repeat 2

            GLCDRotate ( Landscape_rev )
            GLCDCLS TFT_BLUE

            GLCDForeground = TFT_YELLOW
            GLCDfntDefaultsize = 1
            GLCDPrint ( 2, 2, "Font 1" )

            GLCDForeground = TFT_WHITE
            GLCDfntDefaultsize = 2
            GLCDPrint ( 2, 12, "Font 2" )

            GLCDForeground = TFT_YELLOW
            GLCDfntDefaultsize = 3
            GLCDPrint ( 2,30, "Font 3" )

            wait 2 s

            longNumber = 0xFFFFFFFF
            wordNumber = 0xFFFF
            byteNumber = 0xFF

            GLCDRotate ( Portrait )
            GLCDCLS TFT_WHITE
            GLCDfntDefaultsize = 1

            GLCDForeground = TFT_MAROON
            GLCDfntDefaultsize = 1
            GLCDPrint ( 2, 2, bytenumber )


            GLCDForeground = TFT_BLACK
            GLCDfntDefaultsize = 2
            GLCDPrint ( 2, 12, wordNumber )


            GLCDForeground = TFT_CYAN
            GLCDfntDefaultsize = 3
            GLCDPrint ( 2,30, longnumber )

            wait 2 s

    end Repeat



  GLCDCLS TFT_BLUE
  'Set font size.
  GLCDfntDefaultsize = 1     'this determines the demo to execute also
  longNumber = 0 ' max value = 4294967290
  wordNumber = 0
  byteNumber = 0

    'Using the global variable GLCDfntDefaultsize to show the different capabilities
    Select Case GLCDfntDefaultsize

    Case 1

      ShowCase1

    Case 2

      ShowCase2

    Case 3

      GLCDDrawString (2, 0, "GLCD")
      GLCDDrawString (2, 24, "Font")
      GLCDDrawString (2, 48, "size 3")
      box 0,0,GLCDDeviceWidth, GLCDDeviceHeight, TFT_WHITE
      box GLCDDeviceWidth-4, GLCDDeviceHeight-4,GLCDDeviceWidth, GLCDDeviceHeight, TFT_WHITE

  End Select

end


sub ShowCase1

        GLCDRotate ( Portrait_Rev )

        GLCDDrawString (2, 1, "GCB", TFT_WHITE )
        GLCDDrawString (26,1,"v1.xx", TFT_YELLOW )
        GLCDDrawString (2, 20, "DrawStr", TFT_WHITE )

        GLCDDrawString ( 2, 31, "Long#" )
        GLCDDrawString ( 2, 39, "Word#" )
        GLCDDrawString ( 2, 47, "Byte#" )

        GLCDDrawString ( 74, 20, "Asc:" )

        box 0,0,GLCDDeviceWidth, GLCDDeviceHeight, TFT_YELLOW
        box GLCDDeviceWidth-4, GLCDDeviceHeight-4,GLCDDeviceWidth, GLCDDeviceHeight, TFT_WHITE

        Circle( (GLCDDeviceWidth+1)/2, (GLCDDeviceHeight+1)/2, 20, TFT_LIGHTGREY )            ;center
        FilledCircle( (GLCDDeviceWidth+1)/2, (GLCDDeviceHeight+1)/2, 10, TFT_DARKGREY  )

        line 0,  GLCDDeviceHeight , (GLCDDeviceWidth+1)/2 +55,  (GLCDDeviceHeight /2) - 20, TFT_CYAN
        line  0, (GLCDDeviceHeight /2) - 20, (GLCDDeviceWidth+1)/2 +55, (GLCDDeviceHeight /2) - 20, TFT_CYAN

        filledbox 2,(GLCDDeviceHeight+1)/2+10,22,(GLCDDeviceHeight+1)/2+32, TFT_RED

        oldfont = GLCDfntDefaultsize
        GLCDfntDefaultsize = 2
        GLCDDrawString ( 36, GLCDDeviceHeight - 30 , "ST7735" , TFT_WHITE )

        GLCDfntDefaultsize = 1
        GLCDDrawString ( GLCDDeviceWidth - 57, 1 , "Apr 2023" , TFT_WHITE )
        #ifdef ST7735_HardwareSPI
            GLCDDrawString ( GLCDDeviceWidth - 42, 10 , "HW SPI" , TFT_WHITE )
        #endif

        #ifndef ST7735_HardwareSPI
            GLCDDrawString ( GLCDDeviceWidth - 42, 10 , "SW SPI" , TFT_WHITE )
        #endif

        'Revert the font size
        GLCDfntDefaultsize = oldfont
        GLCDForeground = TFT_WHITE

        DO forever

            GLCDPrint ( 40 , 31, longNumber)
            GLCDPrint ( 40 , 39, pad( str(wordnumber),5))
            GLCDPrint ( 40 , 47, pad( str(bytenumber),3))

            GLCDDrawChar(54, 20, CCount )
            Box 52,19,62,30, TFT_WHITE                'Draw a box around the Char below

            GLCDDrawString ( 100, 20 , pad( str(CCount),3) )

            CCount++
            if CCount = 0 then CCount = 31
            if CCount = 128 then CCount = 192
            longNumber = longNumber + 7

            wordNumber = wordNumber + 3
            byteNumber++

        LOOP

end sub

sub ShowCase2


        'Change the font size as this device. This is intended
        GLCDfntDefaultsize = 1

        GLCDRotate ( Landscape_rev )
        GLCDDrawString (2, 1, "GCB", TFT_WHITE )
        GLCDDrawString (26,1,"v1.xx", TFT_YELLOW )
        GLCDDrawString (2, 10, "DrawStr", TFT_WHITE )

        GLCDDrawString ( 64, 10, "Asc:" )
        GLCDDrawString ( 2, 18, "Long#" )
        GLCDDrawString ( 2, 26, "Word#" )
        GLCDDrawString ( 2, 34, "Byte#" )



        box 0,0,GLCDDeviceWidth, GLCDDeviceHeight, TFT_YELLOW
        box GLCDDeviceWidth-5, GLCDDeviceHeight-5,GLCDDeviceWidth, GLCDDeviceHeight, TFT_WHITE

        Circle( (GLCDDeviceWidth+1)/2, (GLCDDeviceHeight+1)/2, 20, TFT_LIGHTGREY )            ;center
        FilledCircle( (GLCDDeviceWidth+1)/2, (GLCDDeviceHeight+1)/2, 10, TFT_DARKGREY  )

        line 0,  GLCDDeviceHeight , (GLCDDeviceWidth+1)/2 +55,  (GLCDDeviceHeight /2) - 20, TFT_CYAN
        line  0, (GLCDDeviceHeight /2) - 20, (GLCDDeviceWidth+1)/2 +55, (GLCDDeviceHeight /2) - 20, TFT_CYAN

        filledbox 2,(GLCDDeviceHeight+1)/2+10,22,(GLCDDeviceHeight+1)/2+32, TFT_RED

        oldfont = GLCDfntDefaultsize
        GLCDfntDefaultsize = 2
        GLCDDrawString ( 50, GLCDDeviceHeight - 30 , "ST7735 " , TFT_WHITE )

        GLCDfntDefaultsize = 1
        GLCDDrawString ( GLCDDeviceWidth - 57, 1 , "Apr 2023" , TFT_WHITE )
        #ifdef ST7735_HardwareSPI
            GLCDDrawString ( GLCDDeviceWidth - 42, 10 , "HW SPI" , TFT_WHITE )
        #endif

        #ifndef ST7735_HardwareSPI
            GLCDDrawString ( GLCDDeviceWidth - 42, 10 , "SW SPI" , TFT_WHITE )
        #endif

        'Revert the font size
        GLCDfntDefaultsize = oldfont
        GLCDForeground = TFT_WHITE

        DO forever

          GLCDPrint ( 40 , 18, longNumber)
          GLCDPrint ( 40 , 26, pad( str(wordnumber),5))
          GLCDPrint ( 40 , 34, pad( str(bytenumber),3))

          GLCDDrawChar(54, 10, CCount )
          Box 52,10,62,20, TFT_WHITE                'Draw a box around the Char below

          GLCDDrawString ( 90, 10 , pad( str(CCount),3) )

          CCount++
          if CCount = 0 then CCount = 31
          if CCount = 128 then CCount = 192
          longNumber = longNumber + 7
          wordNumber = wordNumber + 3
          byteNumber++

        LOOP
end sub
