'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the '''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the SSD1306 GLCD capabilities in Low Memory Operations
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The SSD1306 controller a small graphical OLED, suitable for a lot of various projects.
'''The display is 38*35 mm, with an active display surface of 0.96inches , and a 128*64 pixel resolution.
'''The display is easy to interface, using an I2C type of communication.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''@author  EvanV
'''@licence GPL
'''@version 1.0
'''@date    21.8.17
'''********************************************************************************

    #chip mega328p,16
    #include <glcd.h>

    ; ----- Define Hardware settings
    ' Define I2C settings
    #define HI2C_BAUD_RATE 400
    #define HI2C_DATA
    HI2CMode Master

    ; ----- Define GLCD Hardware settings
    #define GLCD_TYPE GLCD_TYPE_SSD1306  'for 128 * 64 pixels support
    #define GLCD_I2C_Address 0x78
    #define GLCD_TYPE_SSD1306_LOWMEMORY_GLCD_MODE
    #define GLCD_TYPE_SSD1306_CHARACTER_MODE_ONLY

    dim outString as string * 21

    GLCDCLS
    GLCD_Open_PageTransaction 0,7
        GLCDPrint 0, 0, "Great Cow BASIC"
        GLCDPrint (0, 16, "Anobium 2019")
    GLCD_Close_PageTransaction
    wait 3 s
    GLCDCLS

    DO forever

       for CCount = 32 to 127

         outString = str( CCount ) ; Prepare a string

         GLCD_Open_PageTransaction 0,7

            ' Prepare the static components of the screen
            GLCDPrint ( 0,   0, "PrintStr") ; Print some text
            GLCDPrint ( 64,  0, "@")
            ; Print some more text
            GLCDPrint ( 72,  0, ChipMhz) ; Print chip speed
            GLCDPrint ( 86, 0, "Mhz") ; Print some text
            GLCDDrawString( 0,8,"DrawStr") ; Draw some text
            box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1 ; Draw a box
            box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1 ; Draw a box
            Circle( 44,41,15) ; Draw a circle
            line 64,31,0,31 ; Draw a line

            GLCDPrint ( 64 ,  36,  hex(longNumber_E ) ) ; Print a HEX string
            GLCDPrint ( 76 ,  36,  hex(longNumber_U ) ) ; Print a HEX string
            GLCDPrint ( 88 ,  36,  hex(longNumber_H ) ) ; Print a HEX string
            GLCDPrint ( 100 ,  36, hex(longNumber   ) ) ; Print a HEX string
            GLCDPrint ( 112 ,  36, "h" ) ; Print a HEX string

            GLCDPrint ( 64 ,  44, pad(str(wordNumber), 5 ) ) ; Print a padded string
            GLCDPrint ( 64 ,  52, pad(str(byteNumber), 3 ) ) ; Print a padded string

            box (46,8,56,19) ; Draw a Box
            GLCDDrawChar(48, 9, CCount ) ; Draw a character

            GLCDDrawString(64, 9, pad(outString,3) ) ; Draw a string

            filledbox 3,43,11,51, wordNumber ; Draw a filled box

            FilledCircle( 44,41,9, longNumber xor 1) ; Draw a filled box
            line 0,63,64,31 ; Draw a line

         GLCD_Close_PageTransaction

         ; Do some simple maths
         longNumber = longNumber + 7 : wordNumber = wordNumber + 3 : byteNumber++
        NEXT
    LOOP
    end
