'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the SSD1351 GLCD capabilities.
'''It is a nice graphical OLED display, suitable for a lot of various projects.
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''
'''@author 	JoeR
'''@licence	GPL
'''@version	1.0
'''@date   	13.10.2019
'''********************************************************************************


  #chip PIC18F27K40,64
  #include <glcd.h>

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.5.15
    'PinManager data: v1.65.1
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85

    Sub InitPPS
        
            'Module: MSSP1
            RC5PPS = 0x0010    'SDO1 > RC5
            RC4PPS = 0x0010    'SDA1 > RC4
            SSP1DATPPS = 0x0014    'RC4 > SDA1 (bi-directional)
            RC3PPS = 0x000F    'SCL1 > RC3
            SSP1CLKPPS = 0x0013    'RC3 > SCL1 (bi-directional)
            SSP1SSPPS = 0x0017    'RC7 > SS1
 
    End Sub
    'Template comment at the end of the config file

; ----- Define Hardware settings

  #define GLCD_DC PORTC.6
  #define GLCD_CS PORTC.7
  #define GLCD_RESET PORTC.2
  #define GLCD_DO PORTC.5
  #define GLCD_DI PORTC.4
  #define GLCD_SCK PORTC.3
  #define SSD1351_HardwareSPI				'Use Hardware SPI, comment out to use software SPI AND remove SPI PPS support
  #define HWSPIMode MasterSSPADDMode			'Use optimised SPI performance.  Optimised SPI performance is only available on microcontrollers with SSPADD support for SPI

; ----- Define GLCD Hardware settings
  #define GLCD_TYPE GLCD_TYPE_SSD1351

'GLCD selected OLED font set.
    #define GLCD_OLED_FONT
    #define GLCD_PROTECTOVERRUN
    GLCDfntDefaultsize = 1

    GLCDCLS  ' supports GLCDBackground as default

    Dim CCOUNT, BYTENUMBER, OLDFONT, OLDFONT as Byte
    CCount = 31
    dim longNumber as long
    longNumber = 0 ' max value = 4294967290
    dim AnobiumTableAddres, wordNumber, wordNumber2, binary16 as Word
    dim outstring as string
    wordNumber = 0
    byteNumber = 0

    GLCDPrint( 0, 0, "GCBASIC" )
    GLCDPrint( 0, 8, "October 2023" )
    GLCDPrint( 0, 16, "SSD1351 GLCD" )
    GLCDPrint( 0, 24, "by Joseph Realmuto" )
    
    wait 5 s
    filledbox 0,0,127,127, SSD1351_YELLOW
    a0 = 255
    b0 = 255
    c0 = 255
    REPEAT 255
     SetContrast_SSD1351 ( a0, b0, c0 )
     a0 = a0 - 1
     b0 = b0 - 1
     c0 = c0 - 1
     wait 20 ms
    END REPEAT
    
    SetContrast_SSD1351 ( 255, 255, 255 )

    repeat 2

            GLCDRotate ( Landscape )
            GLCDCLS SSD1351_BLUE

            GLCDForeground = SSD1351_MAROON
            GLCDPrint ( 2, 2, "GLCDPrint String" )

            GLCDForeground = SSD1351_WHITE
            GLCDPrint ( 2, 12, "GLCDPrint String" )

            GLCDForeground = SSD1351_GREEN
            GLCDPrint ( 2,30, precharge )


            FilledBox 50,40,55,45,SSD1351_RED

            SetScrollParameters_SSD1351(1, 0, 128, 0)
            StartScroll_SSD1351

            wait 5 s

            StopScroll_SSD1351
            wait 1 s
            SetScrollParameters_SSD1351(128, 0, 128, 0)
            StartScroll_SSD1351

            wait 5 s

            StopScroll_SSD1351
            longNumber = 0xFFFFFFFF
            wordNumber = 0xFFFF
            byteNumber = 0xFF

            GLCDRotate ( Portrait )
            GLCDCLS SSD1351_GREEN

            GLCDForeground = SSD1351_MAROON
            GLCDPrint ( 2, 2, bytenumber )


            GLCDForeground = SSD1351_BLACK
            GLCDPrint ( 2, 12, wordNumber )


            GLCDForeground = SSD1351_CYAN
            GLCDPrint ( 2,30, longnumber )

            wait 2 s
            
            GLCDRotate ( Portrait_Rev )
            
            wait 2 s

    End Repeat

  GLCDRotate ( Landscape )
  GLCDCLS SSD1351_BLUE
  GLCDForeground = SSD1351_WHITE
  ' Prepare the static components of the screen
  GLCDPrint ( 2,   2, "SSD1351 Library")                                ; Print some text
  GLCDPrint ( 2,   9, "PrintStr")                                ; Print some text
  GLCDPrint ( 64,  2, "@")                                    ; Print some more text
  GLCDPrint ( 72,  2, ChipMhz)                                   ; Print chip speed
  GLCDPrint ( 80,  2, "Mhz")                                     ; Print some text
  GLCDDrawString( 2,18,"DrawStr")                                 ; Draw some text
  box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1                            ; Draw a box
  box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1    ; Draw a box
  Circle( 32,41,10)                                              ; Draw a circle
  line 50,31,0,31                                                ; Draw a line
  CCount = 0
  byteNumber = 0xFF
  bit17 = 0

  DO forever
     for CCount = 32 to 127
          outstring = hex(longNumber_E )
          outstring = outstring+hex(longNumber_E )
          outstring = outstring+hex(longNumber_H )
          outstring = outstring+hex(longNumber )
          outstring = outstring+"h"

          GLCDPrint ( 46 ,  36,  Outstring  )                        ; Print a HEX string
          GLCDPrint ( 46 ,  44, pad(str(wordNumber), 6 ) )           ; Print a padded string
          GLCDPrint ( 46 ,  52, pad(str(byteNumber), 4 ) )           ; Print a padded string


          box (46,19,56,28)                                           ; Draw a Box
          GLCDDrawChar(49, 20, CCount )                               ; Draw a character
          outString = str( CCount )                                  ; Prepare a string
          GLCDDrawString(64, 19, pad(outString,5) )                   ; Draw a string

          filledbox 3,43,11,51, wordNumber                           ; Draw a filled box

          FilledCircle( 32,41,8, longNumber )                   ; Draw a filled box
          line 0,63,50,31                                            ; Draw a line

                                                                     ; Do some simple maths
          longNumber = longNumber + 7 : wordNumber = wordNumber + 1 : wordNumber2 = wordNumber2 + 1 : byteNumber++
                             
      NEXT

  LOOP
  end
