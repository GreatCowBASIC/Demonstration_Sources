'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the T6963 GLCD capabilities using BMPs (pictures).
'''This program will display two BMPs then swap pages between pages 0 and 1. You can use any other value page.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''@author  EvanV
'''@licence GPL
'''@version 1.0
'''@date    27.2.19
'''********************************************************************************

  #chip 18F47K42,64
  #option explicit

  #include <glcd.h>
  #define GLCD_TYPE GLCD_TYPE_T6963_64


  '***********************************************************************************************
  'define the connectivity - the 8bit port
  #define GLCD_DATA_PORT PORTD             'Library support contigous 8-bit port

'  or
'  #define GLCD_DB0      PORTD.0            'chip specific configuration where the ibrary supports 8-bit port defined via 8 constants
'  #define GLCD_DB1      PORTD.1            'chip specific configuration
'  #define GLCD_DB2      PORTD.2            'chip specific configuration
'  #define GLCD_DB3      PORTD.3            'chip specific configuration
'  #define GLCD_DB4      PORTD.4            'chip specific configuration
'  #define GLCD_DB5      PORTD.5            'chip specific configuration
'  #define GLCD_DB6      PORTD.6            'chip specific configuration
'  #define GLCD_DB7      PORTD.7            'chip specific configuration

  #define GLCD_CD        porte.0            'Command or Data conrol line port
  #define GLCD_RD        PORTe.1           'Read control line  port
  #define GLCD_WR        PORTe.2           'Write control line port

  #define GLCD_RESET     PORTc.2           'Reset port
  #define GLCD_FS        PORTc.1           'FS port
  #define GLCD_CS        PORTc.0           'Chip Enable (Active Low)

  #define GLCD_FS_SELECT 1                 'FS1 Font Select port. 6x8 font: FS1="High"=1 8x8 font FS1="Low"=0 for GLCD_FS_SELECT

  '***********************************************************************************************
  '*
  '* Note    :   The T6963 controller's RAM address space from $0000 - $7FFF, total 32kbyte RAM, or it could be 64kbyte RAM best check!!
  '*
  '***********************************************************************************************
  #define TEXT_HOME_ADDR      0x0000                                                         'This is specific to the GLCD display
  #define GRH_HOME_ADDR       0x3FFF                                                         'This is specific to the GLCD display
  #define CG_HOME_ADDR        0x77FF                                                         'This is specific to the GLCD display
  #define COLUMN              40    'Set column number to be 40 , 32, 30 etc.                 This is specific to the GLCD display
  #define MAX_ROW_PIXEL       64    'MAX_ROW_PIXEL the physical matrix length (y direction)   This is specific to the GLCD display
  #define MAX_COL_PIXEL       240   'MAX_COL_PIXEL the physical matrix width (x direction)    This is specific to the GLCD display

  '***********************************************************************************************
  '* End of configuration
  '***********************************************************************************************


;Start of demonstration main program

        wait 3 s
        GLCDPrintLargeFont ( 0, 0, "WG24064A-TMI-TZ#")
        GLCDPrintLargeFont ( 0, 20, "Feb 2019")
        GLCDPrint( 0, 50, "BMP load" )
        wait 2 s


; ----- Variables
  OptmiseGLCDDraw  = 0            ; either 0 or 1.  Needs to match the background pixel state. Makes drawing faster.
  ' These must be WORDs as this is required to handle large tables.
  Dim TableReadPosition, TableLen,SelectedTable as word
  Dim OPTMISEGLCDDRAW, OBJWIDTH, OBJHEIGHT, OLDGLCDXPOS, WHOLEYBYTES, HCOUNT, GLCDY, WIDTHCOUNT, WBYTE, ONPAGEBOUNDARY, GLCDX, CURRPAGE, CURRPAGE, MAXHEIGHT, CURRCHARROW, WBYTE as Byte


; ----- Quick Command Reference:
  'You should then do the following.
  'Replace the existing table data with your data BMP to a table.
  'You can define five BMP as a table.
  'Pick any of the five tables.  YOU MUST RETAIN THE GCLDTABLEn NAMING CONVENTION
  'Then, so, you can easily remember the name of you BMP use a define
  'Then, call the subroutine, an example GLCDBMPLoad ( 0, 0, Anobium  )
  #define Anobium      @GLCDTable1
  #define GCB          @GLCDTable2
'  #define Another1     @GLCDTable3
'  #define Another2     @GLCDTable4
'  #define Another3     @GLCDTable5
; ----- Main body of program commences here.

  GLCDCLS


  GLCDBMPLoad ( 150, 0, Anobium  )
  wait 750 ms


  GLCDBMPLoad ( 0, 0, GCB )
  box 0, 0, 239, 63
  wait 750 ms



  do forever


        SelectGLCDPage ( GLCDPage1_T6963 )
        GLCDCLSCLS
        GLCDPrintLargeFont ( 0, 0, "Page 1")
        locate 7,1
        print "GLCD methods used to create page"
        wait 2 s
        GLCDCLSCLS


        SelectGLCDPage ( GLCDPage0_T6963 )
        wait 2 s


  loop
  end

Sub GLCDCLSCLS
    GLCDCLS
    CLS
End Sub



; ----- Support methods.  Subroutines and Functions
  sub GLCDBMPLoad ( in GLCDXPos, in GLCDYPos, in SelectedTable as word )

    ' Start of code
    TableReadPosition = 1

    'Read selected table
    Select Case SelectedTable
        Case @GLCDTable1: ReadTable GLCDTable1, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable1, TableReadPosition, objHeight
        Case @GLCDTable2: ReadTable GLCDTable2, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable2, TableReadPosition, objHeight
        Case @GLCDTable3: ReadTable GLCDTable3, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable3, TableReadPosition, objHeight
        Case @GLCDTable4: ReadTable GLCDTable4, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable4, TableReadPosition, objHeight
        Case @GLCDTable5: ReadTable GLCDTable5, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable5, TableReadPosition, objHeight
    End Select


    oldGLCDXPos = GLCDXPos
    TableReadPosition = 3

    WholeYBytes = objHeight /  8               ; Number of whole bytes within Y Axis.  This is integer maths!

    onPageBoundary = ( GLCDYPos % 8 ) = 0      ; If GLCDYPos as a memory page boundary.  Used to fast write the byte

      if WholeYBytes <> 0 then

          for hCount = 0 to (WholeYBytes - 1)  ; counter to number of whole bytes

              ' it is safe to use GLCDY and X here as PSET is not called when this is used as a variable
                GLCDY = GLCDYPos+hCount
                for widthCount = 0 to (objwidth - 1)  ; increment thru bytes horizontally
                    'Read selected table
                    Select Case SelectedTable
                    Case @GLCDTable1: ReadTable GLCDTable1, TableReadPosition, wByte

                    Case @GLCDTable2: ReadTable GLCDTable2, TableReadPosition, wByte

                    Case @GLCDTable3: ReadTable GLCDTable3, TableReadPosition, wByte

                    Case @GLCDTable4: ReadTable GLCDTable4, TableReadPosition, wByte

                    Case @GLCDTable5: ReadTable GLCDTable5, TableReadPosition, wByte

                    End Select
                    TableReadPosition++

                    if wByte <> OptmiseGLCDDraw then             ; if the incoming byte is the same as the background, dont draw

                          For CurrCharRow = 0 to 7
                                    If wByte.0 = 0 Then
                                              PSet GLCDXPos+widthCount, CurrCharRow + GLCDYPos, GLCDBackground
                                    Else
                                              PSet GLCDXPos+widthCount, CurrCharRow + GLCDYPos, GLCDForeground
                                    End If
                                    Rotate wByte Right
                          Next

                     end if

                next widthCount

                GLCDXPos =  oldGLCDXPos
                GLCDYPos = GLCDYPos + 8

          next hCount

      end if

      maxHeight = objHeight % 8       ; calculate the remaining bits

      'writes and remaining bits, if any
      if maxHeight <> 0 then

        for widthCount = 0 to objwidth - 1
          'Read selected table
            Select Case SelectedTable
            Case @GLCDTable1: ReadTable GLCDTable1, TableReadPosition, wByte

            Case @GLCDTable2: ReadTable GLCDTable2, TableReadPosition, wByte

            Case @GLCDTable3: ReadTable GLCDTable3, TableReadPosition, wByte

            Case @GLCDTable4: ReadTable GLCDTable4, TableReadPosition, wByte

            Case @GLCDTable5: ReadTable GLCDTable5, TableReadPosition, wByte

            End Select
            TableReadPosition++

              ' slow draw using X Y position and interate throught the bits
              For CurrCharRow = 0 to maxHeight-1
                        If wByte.0 = 0 Then
                                  PSet GLCDXPos+widthCount, ( CurrCharRow + GLCDYPos ), GLCDBackground
                        Else
                                  PSet GLCDXPos+widthCount, ( CurrCharRow + GLCDYPos ), GLCDForeground
                        End If
                        Rotate wByte Right
              Next
        next
      end if

  end sub

Table GLCDTable1
' Anobium.bmp as a Table
' start data
0x3C
0x40
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xE0
0x00
0xC0
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x40
0xC0
0xB0
0x60
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xC0
0x70
0xDE
0x73
0x1C
0x07
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x01
0x03
0x06
0x0D
0x1B
0x3E
0xEC
0x18
0x10
0x10
0x10
0x18
0x18
0x08
0x08
0x0C
0x0C
0x0C
0x04
0x04
0x04
0x06
0x06
0x02
0x02
0x02
0x03
0x03
0x01
0x01
0x03
0x0F
0x1C
0x70
0xE0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xFF
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x07
0x0E
0x38
0x70
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xFF
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xC0
0x63
0x36
0x1C
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x07
0x0C
0x08
0x18
0x10
0x30
0x30
0x20
0x60
0x40
0xC0
0xC0
0x80
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xC0
0x70
0x38
0x1C
0x0E
0x03
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xC0
0x20
0xC0
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x01
0x03
0x03
0x02
0x06
0x04
0x0C
0xEC
0x08
0x0C
0x06
0x03
0x01
0x00
0x00
0x20
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xC0
0x38
0x16
0x11
0x10
0x11
0x16
0x38
0xC0
0x00
0xFF
0x02
0x01
0x01
0x01
0xFE
0x00
0x00
0x7E
0x81
0x81
0x81
0x81
0x7E
0x00
0x00
0xFF
0x42
0x81
0x81
0x81
0x7E
0x00
0x00
0xFF
0x00
0x00
0x7F
0x80
0x80
0x80
0x40
0xFF
0x00
0x00
0xFF
0x02
0x01
0x01
0x01
0xFE
0x02
0x01
0x01
0x01
0xFE
End Table

Table GLCDTable2
' start data
' The GCB Logo as a Table
0x54
0x3F
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x20
0x60
0xC0
0x80
0x80
0xC0
0xE0
0xE0
0xE0
0xF0
0xB8
0xDE
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xC0
0xE0
0xF0
0xF8
0xF8
0xF8
0xF8
0xF8
0xF8
0xF8
0xF0
0xF0
0xF0
0xF0
0xF0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xF0
0xF0
0xF0
0xF0
0xF0
0xF8
0xF8
0xF8
0xF8
0xFC
0xFC
0xFC
0xFC
0xFC
0xFC
0xFC
0xFC
0xFE
0xFE
0xFE
0xFE
0xFE
0xFE
0xFE
0xFE
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xF1
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xF8
0xFE
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x7F
0x3F
0x3F
0x3F
0x3F
0x1E
0x0C
0x00
0x00
0x00
0x00
0x00
0x00
0xE0
0xFF
0x07
0x3F
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x3F
0x3F
0x3F
0x19
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xFC
0xFF
0xFF
0x00
0x00
0x01
0x0F
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x7F
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x7F
0x7F
0x7F
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x7F
0x3F
0x1F
0x0F
0x07
0x03
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xFF
0xFF
0xFF
0x1F
0x00
0x00
0xF0
0xFC
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x0F
0x1F
0x0F
0x07
0x0F
0x01
0x00
0x00
0x00
0x00
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0xFF
0xFF
0x3F
0x0F
0x03
0x00
0x2F
0xFF
0xFF
0xFF
0x7F
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x03
0x03
0x01
0x00
0x00
0x00
0x00
0xFF
0xFF
0xFF
0x07
0x01
0x07
0x1F
0xFF
0xFF
0xF0
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x14
0x1F
0x1F
0x1F
0x10
0x00
0x00
0x00
0x00
0xFF
0xFF
0xFF
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x0C
0x3F
0x7F
0x7F
0x78
0x00
0x00
0x00
0x03
0x03
0x07
0x03
0x03
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x01
0x01
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00

End Table

Table GLCDTable3
    1, 0, 255
End Table

Table GLCDTable4
    1, 0, 255
End Table

Table GLCDTable5
    1, 0, 255
End Table
