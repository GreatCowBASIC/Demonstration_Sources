'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program demonstrates the using GCBASIC to update the Nextion display.
'''
'''Enjoy.
'''
'''
'''@author     Evan Venn
'''@licence    GPL
'''@version    1.00
'''@date       18.11.2019
'''********************************************************************************



' ----- Configuration
    'Chip Settings.
    #chip 18F24K42, 1
    #option explicit

' ----- Set up the Nextion GLCD
    #include <glcd.h>
    #define GLCD_TYPE GLCD_TYPE_Nextion
    ;Change the width and height to match the rotation in the Nextion Editor
    #define GLCD_WIDTH  800   'could be 320 | 400 | 272 | 480 but any valid dimension will work.
    #define GLCD_HEIGHT 480  'could be 240 | 480 | 800 but any valid dimension will work.

' ----- End of set up for Nextion GLCD

' ----- Set up for Hardware Serial
    ;VERY IMPORTANT!!
    ;The Nextion MUST be setup for 9600 bps.
    #define USART_BAUD_RATE 9600
    #define USART_BLOCKING
    #define USART_DELAY 0


' ----- Main program


'   Ensure this CONSTANTS SHOULD BE CORRECT and they match for Nextion project components in the tutorial... but, bect check
    #define RADIOCOMPONENT         "r0"          'This is the component objname of the Nextion component, this value may be different in your project
    #define NUMBERCOMPONENT        "n0"          'This is the component objname of the Nextion component, this value may be different in your project
    #define TEXTCOMPONENT          "t3"          'This is the component objname of the Nextion component, this value may be different in your project
    #define TOGGLELEDBUTTON        6             'This is the component ID of the Nextion component, this value may be different in your project
    #define SELECTPAGE1BUTTON      1             'This is the component ID of the Nextion component, this value may be different in your project

    'Statics that should not change.
    #define PAGE0           0
    #define PAGE1           1
    #define TOUCHEVENT      0x65

'   The microcontroller LED
    #define LED1            porta.0



' ----- Setup the Interrupt Handler - this should NOT be changed
    'This manages the serial buffer on the bytes coming from the Nextion
    On Interrupt UART1ReceiveInterrupt Call readUSART
    ' Constants required for Buffer Ring
    #define BUFFER_SIZE 255
    #define bkbhit (next_in <> next_out)
    ;Declare the required variables
    Dim buffer( BUFFER_SIZE - 1 ) '
    Dim next_in as byte: next_in = 0
    Dim next_out as byte: next_out = 0


' ----- Declare the variables we need for this tutorial
    dim byteValueOutToNextion as byte
    dim inComingByteFromNextion as byte
    dim stringOutToNextion as string

' ----- Set the LED as an output
    dir LED1 out






    'Create a string for text component - this will state the type of microcontroller and the frequency of the microcontroller
    #ifdef PIC
        stringOutToNextion = "PIC"
    #endif
    #ifdef AVR
        stringOutToNextion = ""
    #endif
    stringOutToNextion = stringOutToNextion + ChipNameStr + " @"+str(ChipMHz)+"Mhz"

    'Initialise page0
    displayPage0


'   Main loop, never exits
    do
        'Update the n0.val object
        byteValueOutToNextion = (byteValueOutToNextion + 1) % 101
        GLCDUpdateObject_Nextion( NUMBERCOMPONENT+".val",  byteValueOutToNextion )
        wait 50 ms

        'react to incoming data, if bkbhit is TRUE then we have some serial data!
        do while bkbhit

            'Has a Nextion Touch Event happended.  bgetc is the next serial byte, so, we can test it.
            'Once bgetc is tested the serial byte has been consumed and the next byte is availalbe in the buffer.
            if bgetc = TouchEvent then

                'The next bgetc byte in the buffer is the originating Nextion page
                select case bgetc

                    'Page 0 events... there are potenially a few, so we need to test the next byte to set which component caused the event
                    case PAGE0

                        'The next bgetc byte in the buffer is the  component ID that caused the event
                        select case bgetc

                            'Page change pressed
                            case SELECTPAGE1BUTTON
                                'Send an instruction to 'page' change the Nextion
                                GLCDSendOpInstruction_Nextion( "page",  "page"+str(PAGE1) )

                            'Toggle LED pressed or released
                            case TOGGLELEDBUTTON

                                'The next byte is the state of the TOGGLELEDBUTTON 0 or 1
                                inComingByteFromNextion  = bgetc

                                'Set the LED state to TOGGLELEDBUTTON state
                                LED1 = inComingByteFromNextion

                                'Tell the Nextion the LED is ON
                                if inComingByteFromNextion = 1 then
                                    Repeat 5
                                        GLCDUpdateObject_Nextion( RADIOCOMPONENT+".bco",  [long]63488 )
                                        GLCDUpdateObject_Nextion( RADIOCOMPONENT+".pco",  [long]63488 )
                                    end Repeat
                                end if

                        end select

                    'Page 1 events... there is only one, so, just change page
                    case PAGE1
                        displayPage0
                    end select

            end if

        loop

    loop


' Simply a method as we can call this more that once.
sub displayPage0

    'Send an instruction to 'page' change the Nextion
    GLCDSendOpInstruction_Nextion( "page",  "page"+str(PAGE0) )
    'wait for display
    wait 750 ms
    'Update the page text
    GLCDUpdateObject_Nextion( TEXTCOMPONENT+".txt", stringOutToNextion  )

End sub

'Utility methods - these are required to support the Interrupt routines - no need to change

    Sub readUSART
        dim temppnt as byte
        buffer(next_in) = HSerReceive
        temppnt = next_in
        next_in = ( next_in + 1 ) % BUFFER_SIZE
        if ( next_in = next_out ) then  ' buffer is full so overflow
            next_in = temppnt
        end if
    End Sub

    function bgetc
        wait while !(bkbhit)
        bgetc = buffer(next_out)
        next_out=(next_out+1) % BUFFER_SIZE
    end Function

    'PPS Tool version: 0.0.5.27
    'PinManager data: v1.78
    'Generated for 18F24K42
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F24K42

    Sub InitPPS

            'Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            Dir PORTC.7 In    ' Make RX1 pin an input
            'Module: UART1
            RC6PPS = 0x0013    'TX1 > RC6
            U1RXPPS = 0x0017    'RC7 > RX1

    End Sub
    'Template comment at the end of the config file
