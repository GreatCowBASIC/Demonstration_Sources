'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program demonstrates the using GCBASIC to update the gauges using an UNO and an ADC on ADC0.
'''
'''The setup is:
'''     Include the <glcd.h>
'''     Specify the Nextion.  #define GLCD_TYPE GLCD_TYPE
'''     Set the device size. #define GLCD_WIDTH xxx and #define GLCD_HEIGHT yyy
'''     Specify hardware or software serial. 
'''
'''     Hook the ADC pot to AN0.  You will connect the connections from the pot to 0v0, 5v0 and AN0.
'''
'''     When programming the UNO you will have to disconnect the Nextion. After programming reconnect the Nextion and reset the UNO.
'''
'''
'''This demonstration assumes the Nextion design has:
'''     1. Two gauge objects called 'z0' and 'z1'
'''     2. Text text objects called 't0'
'''     3. Gauges are show on an object page called 'gauges'.
'''     If any of these assumptions are incorrect then change this program or rename the objects in the Nextion Editor.
'''
'''     Then, enjoy.
'''
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.10
'''@date       24.04.18
'''********************************************************************************


' ----- Configuration
    'Chip Settings.
    #chip mega328p, 16
    #option explicit

' ----- Set up the Nextion GLCD
    #include <glcd.h>
    #define GLCD_TYPE GLCD_TYPE_Nextion


    ;VERY IMPORTANT!!
    ;Change the width and height to match the rotation in the Nextion Editor
    #define GLCD_WIDTH  800
    #define GLCD_HEIGHT 480

' ----- End of set up for Nextion GLCD

' ----- Set up for Hardware Serial
    ;VERY IMPORTANT!!
    ;The Nextion MUST be setup for 9600 bps.
    #define USART_BAUD_RATE 9600
    #define USART_BLOCKING 0

    ;VERY IMPORTANT!!
    ;These two are optional, but very important. These constants are set in the library to use hardware serial by default.
    #define GLCDGLCD_NextionSerialPrint HSerPrint
    #define GLCD_NextionSerialSend  HSerSend


' ----- Set up for Software Serial - this is optional - shown to explain the method.
'    ;Remove Hardware Serial before using Software serial
'    #include <softserial.h>
'
'    ; ----- Config Serial UART for sending:
'    #define SER1_BAUD 9600     ; baudrate must be defined
'    #define SER1_TXPORT PORTC ; I/O port (without .bit) must be defined
'    #define SER1_TXPIN 5       ; portbit  must be defined
'
'    ;VERY IMPORTANT!!
'    ;These two constants are required to support the the library.
'    #define GLCD_NextionSerialPrint        Ser1Print
'    #define GLCD_NextionSerialSend         Ser1Send
'
' ----- End of set up for Serial

// ----- Main program

    'show front screen

    dim adcval as word
    dim ScaledValue as Integer
    dim myString as string * 32

    'Write to the page page.object
    repeat 3
    GLCDUpdateObject_Nextion( "gauges.t0.txt",  "Awaiting Touch" )
    End Repeat

    InitNextionAwaitTouchEvent
    wait while NOT NextionAwaitTouchEvent

    'Send a page change to the device
    GLCDSendOpInstruction_Nextion( "page",  "gauges" )
    wait 1 s

    do


        GLCDUpdateObject_Nextion( "gauges.t0.txt",  "ADC" )
        do
              'Read the ADC port AN0
              adcval = ReadAD( AN0 )
              'Scale the value to suit the gauges on the Nextion
              ScaledValue = scale( adcval, 0, 255, -135, 135 )

              'Update Gauges with the values - these Nextion objects must exist
              GLCDUpdateObject_Nextion( "z0.val",  ( 360 + ScaledValue ) mod 360 )    ' a number value for a .val object
              GLCDUpdateObject_Nextion( "z1.val",  (180-ScaledValue) )

              'Update t0.txt object with the ADC and the Scaled value - this Nextion objects must exist
              myString = "ADC="+str(adcval)
              myString = myString +":SCD="+StrInteger( ScaledValue ) 
              GLCDUpdateObject_Nextion( "t0.txt",  myString )

              wait 1 ms
              if NextionAwaitTouchEvent then exit do
        loop
        wait while NextionAwaitTouchEvent

        dim adcvalbyte as byte
        GLCDUpdateObject_Nextion( "gauges.t0.txt",  "Automatic Demo" )
        do
              for adcvalbyte = 0 to 200 step 10
                  'Scale the value to suit the gauges on the Nextion
                  ScaledValue = scale( adcvalbyte , 0, 200, -135, 135 )
                  'Update Gauges with the values - these Nextion objects must exist
                  GLCDUpdateObject_Nextion( "z0.val",  ( 360 + ScaledValue ) mod 360 )    ' a number value for a .val object
                  GLCDUpdateObject_Nextion( "z1.val",  (180-ScaledValue) )
                  if NextionAwaitTouchEvent then exit do
              next
              for adcvalbyte = 190 to 10 step -10
                  'Scale the value to suit the gauges on the Nextion
                  ScaledValue = scale( adcvalbyte , 0, 200, -135, 135 )
                  'Update Gauges with the values - these Nextion objects must exist
                  GLCDUpdateObject_Nextion( "z0.val",  ( 360 + ScaledValue ) mod 360 )    ' a number value for a .val object
                  GLCDUpdateObject_Nextion( "z1.val",  (180-ScaledValue) )
                  if NextionAwaitTouchEvent then exit do
              next

        loop
        wait while NextionAwaitTouchEvent

  loop


  Function NextionAwaitTouchEvent as byte

    'wait for a touch Event
    dim myDummyByteIn as byte
    dim myWordX, oldWordX  as word


    GLCDSendOpInstruction_Nextion( "get",  "tch2" )
        'header data
        repeat 3
          HSerReceive ( myDummyByteIn)
        end Repeat
        'Receive the real data
        HSerReceive ( [byte]myWordX )
        HSerReceive ( myWordX_H)
        'footer data
        repeat 3
          HSerReceive ( myDummyByteIn)
        end Repeat

    if myWordX = oldWordX then
      NextionAwaitTouchEvent = false
    else
      NextionAwaitTouchEvent = true
      oldWordX = myWordX
    end if

  End function



  Sub InitNextionAwaitTouchEvent
    'wait for a touch Event
    dim myDummyByteIn as byte
    dim myWordX, oldWordX  as word

    repeat 5
      GLCDSendOpInstruction_Nextion( "get",  "tch2" )
          'header data
          repeat 3
            HSerReceive ( myDummyByteIn)
          end Repeat
          'Receive the real data
          HSerReceive ( [byte]myWordX )
          HSerReceive ( myWordX_H)
          'footer data
          repeat 3
            HSerReceive ( myDummyByteIn)
          end Repeat

         oldWordX = myWordX
    end Repeat
  End Sub
