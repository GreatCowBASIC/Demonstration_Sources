'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the KS0108 GLCD capabilities.
'''This program draws fonts, lines, boxes, circles and prints strings.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''@author  EvanV
'''@licence GPL
'''@version 1.0a
'''@date    10.12.2018
'''***********************************************************

#CHIP 18F47K42, 64
#OPTION Explicit
#CONFIG MCLRE=EXTMCLR

#INCLUDE <millis.h>
#INCLUDE <glcd.h>
' This is the Default value, not required.
#DEFINE GLCD_TYPE GLCD_TYPE_KS0108
#DEFINE GLCD_KS0108_CS_LOW

// GLCD Settings
    #DEFINE GLCD_CS1 PORTb.5
    #DEFINE GLCD_CS2 PORTb.4
    'D0 to pin 7 on LCD
    #DEFINE GLCD_DB0 PORTD.0
    'D1 to pin 8 on LCD
    #DEFINE GLCD_DB1 PORTD.1
    'D2 to pin 9 on LCD
    #DEFINE GLCD_DB2 PORTD.2
    'D3 to pin 10 on LCD
    #DEFINE GLCD_DB3 PORTD.3
    'D4 to pin 11 on LCD
    #DEFINE GLCD_DB4 PORTD.4
    'D5 to pin 12 on LCD
    #DEFINE GLCD_DB5 PORTD.5
    'D6 to pin 13 on LCD
    #DEFINE GLCD_DB6 PORTD.6
    'D7 to pin 14 on LCD
    #DEFINE GLCD_DB7 PORTD.7

    #DEFINE GLCD_RS PORTb.3
    #DEFINE GLCD_Enable PORTb.2
    #DEFINE GLCD_RW PORTc.7
    #DEFINE GLCD_RESET PORTc.2

    #DEFINE KS0108ReadDelay     3
    #DEFINE KS0108WriteDelay    3
    #DEFINE KS0108ClockDelay    3


// *************************** MAIN ***********************************************

// *** Variables
    Dim tempString as String * 4
    Dim CounterX, oldCounterX as Word

// Constants
    #DEFINE GLCDCLEARCHARACTER -1
    #DEFINE MAXVALUE 999    // equates to 99.9

// Show startup

    // Show Temp
        ShowTemp( CounterX / 10 )
    // Show Date
        ShowDate()
    // ShowTime
        ShowTime()
    // Show ShowDistance()
        ShowDistance()

    For Counterx = MAXVALUE to 0 step -111

        //Show Tens
        If Counterx/100 = 0 then 
            GLCD_DrawPixelNumbers ( 0, 0, GLCDCLEARCHARACTER )
        Else
            GLCD_DrawPixelNumbers ( 0, 0, Counterx / 100 )
        End If
        
        // Show digit
        GLCD_DrawPixelNumbers ( 48, 0, ( Counterx / 10 ) MOD 10 )

        // Draw Decimal value                   
            GLCD_DrawPixelNumbers 98, 24, Counterx Mod 10, 24
            FilledBox 94, 44, 95, 45

        // Show ShowFuel
        // Send a value just to show fuel bar
        ShowFuel ( CounterX  )

        wait 40 ms

    Next

    // Main loop
    
    // Ensure oldCounterX <> CounterX, so the display is updated only when needed
    oldCounterX = !CounterX


    
    Dim DrawMainNowCurMs, DrawMainNowMs, DrawOtherNowCurMs, DrawOtherNowMs as word  ' declare working variables
    DrawMainNowMs = 0
    DrawMainNowCurMs = 0
    DrawOtherNowMs = 0
    DrawOtherNowCurMs = 0
    
    Dim DrawMainNow, DrawOtherNow, DecimalPointState as Bit

    Do

        // Manage interrupts as handling Millis() requires it
            // Now draws the RPM every 80ms and draws the rest every 1s

            DrawMainNowCurMs = millis()
            IntOn    
            if DrawMainNowCurMs - DrawMainNowMs >= 80 then  ' required Time has Elapsed  - every 80ms
                DrawMainNow = True
                DrawMainNowMs = DrawMainNowCurMs                   ' And Record Toggle Time
            end if
            IntOff
            
            DrawOtherNowCurMs = millis()
            IntOn
            if DrawOtherNowCurMs - DrawOtherNowMs >= 1000 then  ' required Time has Elapsed - every 1s
                DrawOtherNow = True
                DrawOtherNowMs = DrawOtherNowCurMs                   ' And Record Toggle Time
            end if
        

        If DrawMainNow = True Then 

            // Do sensor reads ?? 
            CounterX = readAd(AN1)
            CounterX = scale ( CounterX, 0,255,0,MAXVALUE )

            DrawMain()
            DrawMainNow = False
        End if

        If DrawOtherNow = True Then 
            DrawOther()
            DrawOtherNow = False
        End if

    Loop
    // End of Main loop

// Draw Main
Sub DrawMain

    Dim CounterX, oldCounterX as Word

    If oldCounterX <> CounterX then 
        
        oldCounterX = CounterX

        // Show Speed
            //Show tens
            If Counterx/100 = 0 then 
                GLCD_DrawPixelNumbers ( 0, 0, GLCDCLEARCHARACTER )
            Else
                GLCD_DrawPixelNumbers ( 0, 0, Counterx / 100 )
            End If
            
            // Show digit
            GLCD_DrawPixelNumbers ( 48, 0, ( Counterx / 10 ) MOD 10 )
            
            // Draw Decimal value                   
                GLCD_DrawPixelNumbers 98, 24, Counterx Mod 10, 24       
    End If

End Sub

Sub DrawOther

    // Draw decimal point, invert it ever time
    FilledBox 94, 44, 95, 45, DecimalPointState
    DecimalPointState =!DecimalPointState

    // Show Temp
        ShowTemp( CounterX / 10 )
    // Show Date
        ShowDate()
    // ShowTime
        ShowTime()
    // Show ShowDistance()
        ShowDistance()
    // Show ShowFuel
        // Send a value just to show fuel bar
        ShowFuel ( CounterX  )

End Sub

'------------------------------------------------------------------------
Sub ShowTemp ( in value )
    tempString = ""
    GLCDPrint 0, 47, str(value) + "   "
    // Draw degree
    Box 19, 48, 21, 50
    GLCDPrint 23, 47, "F"
 End Sub
'------------------------------------------------------------------------
Sub ShowDate
    tempString = ""
    GLCDPrint 0, 55, "12:28 PM"
 End Sub
'-------------------------------------------------------------------------
Sub ShowTime
    tempString = ""
    GLCDPrint 62, 47, "12 Hr 45 Mn"
 End Sub
'------------------------------------------------------------------------
Sub ShowDistance
    tempString = ""
    GLCDPrint 86, 55, "99.3 Mi"
    GLCDPrint 58, 55, "TRIP"
 End Sub
'--------------------------------------------------------------------------
Sub ShowFuel ( in value as word )

    // ALL SCALING IS NOW DONE IS  THIS ROUTINE - for the demo the 
    value = scale ( value, 0, MAXVALUE, 0, 28 )

    GLCDPrint 101, 0, "FUEL"
    GLCDPrint 98, 15, "E"
    GLCDPrint 122, 15, "F"
    Line 103, 18, 120, 18  

    IF value >0 Then 
        FilledBox 98, 9, 98 + value , 14, 1
        FilledBox 98 + value + 1, 9, 127, 14, 0
        Box 98 , 9, 127, 14, 1
    Else
        Box 98 , 9, 127, 14, 1
        FilledBox 99, 10, 126, 13, 0
    End If
    
 End Sub

Sub Fast_GLCDWriteByte_KS0108 ( in GLCDData, swval as Word, optional _pixels as byte = 48 )

    Repeat swval 

        //Manage X Y 
        If _GLCDX MOD _pixels = 0 then
            // Reset the X position
            _GLCDX = 0
        End If   

        // Select the correct IC
        #ifdef GLCD_KS0108_CS_LOW
        If _GLCDX + _XPOS < 64 Then
            Set GLCD_CS1 On
            Set GLCD_CS2 Off
        Else
            Set GLCD_CS1 Off
            Set GLCD_CS2 On
        End If
        #else
        If _GLCDX + _XPOS < 64 Then
            Set GLCD_CS1 Off
            Set GLCD_CS2 On
        Else
            Set GLCD_CS1 On
            Set GLCD_CS2 OFF
        End If
        #endif

        'Select page
        Set GLCD_RS Off
        GLCDWriteByte ( b'10111000' Or ( _GLCDY + _YPOS ) / 8 )

        'Select column
        Set GLCD_RS Off
        GLCDWriteByte ( 64 Or ( _GLCDX + _XPOS ) )

        'Dummy read first
        Set GLCD_RS On
        GLCDDataTemp = GLCDReadByte
        'Read current data
        Set GLCD_RS On
        GLCDDataTemp = GLCDReadByte

        'ReSelect column
        Set GLCD_RS Off
        GLCDWriteByte 64 Or ( _GLCDX + _XPOS )

        // Increment X value
        _GLCDX++

            // Increment Y value
            If _GLCDX = _pixels  Then _GLCDY = _GLCDY + 8 

        // If something to send
        If GLCDDataTemp <> GLCDData Then 

            'Write data back
            Set GLCD_RS On

            'Set LCD data direction
            Set GLCD_RW Off

            'Set output data
            GLCD_DB7 = GLCDData.7
            GLCD_DB6 = GLCDData.6
            GLCD_DB5 = GLCDData.5
            GLCD_DB4 = GLCDData.4
            GLCD_DB3 = GLCDData.3
            GLCD_DB2 = GLCDData.2
            GLCD_DB1 = GLCDData.1
            GLCD_DB0 = GLCDData.0

            'Write
            Wait KS0108WriteDelay us
            Set GLCD_ENABLE On
            Wait KS0108ClockDelay us
            Set GLCD_ENABLE Off
            Wait KS0108WriteDelay us

            // enable the wait here to show pixel draw
            // wait 100 ms
        End If
        
    End Repeat

 End Sub


Sub GLCD_DrawPixelNumbers ( _XPOS, _YPOS, _num as Integer, optional _pixels as byte = 48 )

    Dim Dataptr, adcval as Word
    Dim myNum as Integer

    Dim Dataptr as Word
    Dim _pixelscalc as Word
    Dim _GLCDY, _GLCDX, GLCDDataTemp, GLCDData, _XPOS, _YPOS
    Dim swval, swcache, swprev as Integer

    Dataptr = 1
    swcache = -1
    swval = -1
    swprev = -1

    _GLCDX = 0 
    _GLCDY = 0

    // Calculate number of pixels to be managed
    _pixelscalc = _pixels * _pixels
    _pixelscalc= FnLSR( _pixelscalc, 3 )

    Do while swval <> 0
        Select Case _Num
            Case GLCDCLEARCHARACTER
                Fast_GLCDWriteByte_KS0108 ( 0, _pixelscalc, _pixels )
                Exit Do
            Case 0 
                Select Case _pixels 
                    Case 48
                        ReadTable 48x48ZeroRLECompressed, Dataptr, swval
                        ReadTable 48x48ZeroRLECompressed, Dataptr+1, GLCDData
                    Case 24
                        ReadTable 24x24ZeroRLECompressed, Dataptr, swval
                        ReadTable 24x24ZeroRLECompressed, Dataptr+1, GLCDData
                End Select    
            Case 1
                Select Case _pixels 
                    Case 48
                        ReadTable 48x48OneRLECompressed, Dataptr, swval
                        ReadTable 48x48OneRLECompressed, Dataptr+1, GLCDData
                    Case 24
                        ReadTable 24x24OneRLECompressed, Dataptr, swval
                        ReadTable 24x24OneRLECompressed, Dataptr+1, GLCDData                
                End Select
            Case 2
                Select Case _pixels 
                    Case 48
                        ReadTable 48x48TwoRLECompressed, Dataptr, swval
                        ReadTable 48x48TwoRLECompressed, Dataptr+1, GLCDData
                    Case 24
                        ReadTable 24x24TwoRLECompressed, Dataptr, swval
                        ReadTable 24x24TwoRLECompressed, Dataptr+1, GLCDData
                End Select
            Case 3
                Select Case _pixels 
                    Case 48
                        ReadTable 48x48ThreeRLECompressed, Dataptr, swval
                        ReadTable 48x48ThreeRLECompressed, Dataptr+1, GLCDData
                    Case 24
                        ReadTable 24x24ThreeRLECompressed, Dataptr, swval
                        ReadTable 24x24ThreeRLECompressed, Dataptr+1, GLCDData                        
                End Select
            Case 4
                Select Case _pixels 
                    Case 48
                        ReadTable 48x48FourRLECompressed, Dataptr, swval
                        ReadTable 48x48FourRLECompressed, Dataptr+1, GLCDData
                    Case 24
                        ReadTable 24x24FourRLECompressed, Dataptr, swval
                        ReadTable 24x24FourRLECompressed, Dataptr+1, GLCDData     
                End Select
            Case 5
                Select Case _pixels 
                    Case 48
                        ReadTable 48x48FiveRLECompressed, Dataptr, swval
                        ReadTable 48x48FiveRLECompressed, Dataptr+1, GLCDData
                    Case 24
                        ReadTable 24x24FiveRLECompressed, Dataptr, swval
                        ReadTable 24x24FiveRLECompressed, Dataptr+1, GLCDData                    
                End Select
            Case 6
                Select Case _pixels 
                    Case 48
                        ReadTable 48x48SixRLECompressed, Dataptr, swval
                        ReadTable 48x48SixRLECompressed, Dataptr+1, GLCDData
                    Case 24
                        ReadTable 24x24SixRLECompressed, Dataptr, swval
                        ReadTable 24x24SixRLECompressed, Dataptr+1, GLCDData                    
                    End Select
            Case 7
                Select Case _pixels 
                    Case 48
                        ReadTable 48x48SevenRLECompressed, Dataptr, swval
                        ReadTable 48x48SevenRLECompressed, Dataptr+1, GLCDData
                    Case 24
                        ReadTable 24x24SevenRLECompressed, Dataptr, swval
                        ReadTable 24x24SevenRLECompressed, Dataptr+1, GLCDData                    
                End Select
            Case 8
                Select Case _pixels 
                    Case 48
                        ReadTable 48x48EightRLECOmpressed, Dataptr, swval
                        ReadTable 48x48EightRLECOmpressed, Dataptr+1, GLCDData
                    Case 24
                        ReadTable 24x24EightRLECompressed, Dataptr, swval
                        ReadTable 24x24EightRLECompressed, Dataptr+1, GLCDData                    
                End Select
            Case 9
                Select Case _pixels 
                    Case 48
                        ReadTable 48x48NineRLECompressed, Dataptr, swval
                        ReadTable 48x48NineRLECompressed, Dataptr+1, GLCDData
                    Case 24
                        ReadTable 24x24NineRLECompressed, Dataptr, swval
                        ReadTable 24x24NineRLECompressed, Dataptr+1, GLCDData                                            
                End Select
            Case Else
                Exit Do                
        End Select

        //increment table pointer
        Dataptr = Dataptr + 2           

        Fast_GLCDWriteByte_KS0108 ( GLCDData, swval, _pixels )

    Loop    

    #ifdef GLCD_KS0108_CS_LOW
        Set GLCD_CS1 On
        Set GLCD_CS2 On
    #else
        Set GLCD_CS1 Off
        Set GLCD_CS2 Off
    #endif


  End Sub



Table 48x48ZeroRLECompressed
    // Row 1
    6, 255    // 6 times 255
    32, 31    // 32 times 31
    6, 255    // 6 times 255
    4, 0      // 4 times 0
    
    // Row 2-5 (identical rows)
    6, 255    // 6 times 255
    32, 0     // 32 times 0
    6, 255    // 6 times 255
    4, 0      // 4 times 0

    6, 255    // 6 times 255
    32, 0     // 32 times 0
    6, 255    // 6 times 255
    4, 0      // 4 times 0

    6, 255    // 6 times 255
    32, 0     // 32 times 0
    6, 255    // 6 times 255
    4, 0      // 4 times 0

    6, 255    // 6 times 255
    32, 0     // 32 times 0
    6, 255    // 6 times 255
    4, 0      // 4 times 0

    // Row 6
    6, 63     // 6 times 63
    32, 62    // 32 times 62
    6, 63     // 6 times 63
    4, 0       // 4 times 0
    End Table

Table 48x48OneRLECompressed

    26, 0  //     # 26 zeros
    1, 120 //    # 1 time 120
    1, 124 //    # 1 time 124
    1, 126 //    # 1 time 126
    6, 255 //    # 6 times 255
    13, 0 //    # 13 zeros

    // Row 2-5 (identical rows)
    29, 0 //    # 29 zeros
    6, 255 //   # 6 times 255
    13, 0 //    # 13 zeros

    29, 0 //    # 29 zeros
    6, 255 //   # 6 times 255
    13, 0 //    # 13 zeros

    29, 0 //    # 29 zeros
    6, 255 //   # 6 times 255
    13, 0 //    # 13 zeros

    29, 0 //    # 29 zeros
    6, 255 //   # 6 times 255
    13, 0 //    # 13 zeros

    // Row 6
    27, 0 //    # 27 zeros
    2, 62 //    # 2 times 62
    6, 63 //    # 6 times 63
    2, 62 //    # 2 times 62
    11, 0      # 11 zeros
 End Table

 Table 48x48TwoRLECompressed
  6, 127
  32, 31
  6, 255
  42, 0
  6, 255
  4, 0
  38, 248
  6, 255
  4, 0
  6, 255
  38, 0
  4, 0
  6, 255
  32, 0
  6, 128
  4, 0
  6, 63
  32, 62
  6, 63
  4, 0
 End Table


Table 48x48ThreeRLECompressed
    6, 63
    33, 31
    6, 255
    42, 0
    6, 255
    13, 0
    29, 248
    6, 255
    13, 0
    29, 0
    6, 255
    42, 0
    6, 255
    4, 0
    6, 63
    32, 62
    6, 63
    4, 0
 End Table

Table 48x48FourRLECompressed
    6, 255
    1, 7
    30, 0
    1, 7
    6, 255
    4, 0
    
    6, 255
    32, 0
    6, 255
    4, 0
    
    6, 255
    32, 248
    6, 255
    4, 0

    38, 0
    6, 255
    4, 0

    38, 0
    6, 255
    4, 0
    
    37, 0
    1, 56
    6, 63
    4, 0
 End Table

Table 48x48FiveRLECompressed
 
    
    6, 255
    32, 31
    6, 255
    4, 0

    6, 255
    42, 0

    6, 255
    38,248
    4, 0

    38, 0 
    6, 255
    4, 0

    6, 128
    32, 0 
    6, 255
    4, 0

    6, 63
    32, 62
    6, 63
    4,0

 End Table

Table 48x48SixRLECompressed

  6, 255
  32, 31
  6, 63
  4, 0

  6, 255
  42, 0

  6, 255
  38, 248
  4, 0

  6, 255
  32, 0
  6, 255
  4, 0

  6, 255
  32, 0
  6, 255
  4, 0
  
  6, 63
  32, 62
  6, 63
  4,0

 End Table

Table 48x48SevenRLECompressed

    6, 63
    32, 31
    6, 255
    4, 0

    38, 0
    6, 255
    4, 0

    38, 0
    6, 255
    4, 0

    38, 0
    6, 255
    4, 0

    38, 0
    6, 255
    4, 0

    37, 0
    1, 62
    6, 63
    4, 0

 End Table

Table 48x48EightRLECOmpressed
    
    6, 255
    32, 31
    6, 255
    4, 0
    
    6, 255
    32, 0
    6, 255
    4, 0
    
    6, 255
    32, 248
    6, 255
    4, 0
    
    6, 255
    32, 0
    6, 255
    4, 0
    
    6, 255
    32, 0
    6, 255
    4, 0
    
    6, 63
    32, 62
    6, 63
    4, 0
    
 End Table

Table 48x48NineRLECompressed

    6, 255
    32, 31
    6, 255
    4, 0

    6, 255
    32, 0
    6, 255
    4, 0

    6, 255
    32, 248
    6, 255
    4, 0

    38, 0
    6, 255
    4, 0

    38, 0
    6, 255
    4, 0

    6, 63
    32, 62
    6, 63
    4, 0

 End Table
// End of 48x48 Tables

// 24x24 Tables


Table 24x24ZeroRLECompressed

4, 255, 16, 7, 8, 255, 16, 0, 4, 255
4, 63, 16, 60, 4, 63

End Table

Table 24x24OneRLECompressed 

13, 0, 1, 30, 1, 30, 4, 255, 20, 0, 4, 255, 19, 0, 1, 56, 4, 63, 1, 56, 4, 0

End Table

Table 24x24TwoRLECompressed

4, 15, 16, 7, 4, 255, 4, 252, 16, 28, 4, 31, 4, 63, 16, 56, 4, 60

End Table

Table 24x24ThreeRLECompressed

4, 15, 16, 7, 4, 255
6, 0, 14, 28, 4, 255
4, 60, 16, 56, 4, 63

End Table

Table 24x24FourRLECompressed

4, 255, 1, 3, 14, 0, 1, 3, 4, 255
4, 63, 16, 56, 4, 255
19, 0, 1, 48, 4, 63

End Table

Table 24x24FiveRLECompressed

4, 255, 16, 7, 4, 15, 4, 31, 16, 28, 4, 252, 4, 60, 16, 56, 4, 63

End Table

Table 24x24SixRLECompressed

4, 255, 16, 7, 4, 15, 4, 255, 16, 28, 4, 252, 4, 63, 16, 56, 4, 63

End Table

Table 24x24SevenRLECompressed

4, 15, 16, 7, 4, 255
20, 0, 4, 255
19, 0, 1, 63, 4, 63

End Table

Table 24x24EightRLECompressed

4, 255, 16, 7, 4, 255
4, 255, 16, 28, 4, 255
4, 63, 16, 56, 4, 63

End Table

Table 24x24NineRLECompressed

4, 255, 16, 7, 4, 255
4, 31, 16, 28, 4, 255
4, 60, 16, 56, 4, 63

End Table

