'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the '''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The SSD1306 controller a small graphical OLED, suitable for a lot of various projects.
'''The display is 38*17 mm, with an active display surface of 0.96inches , and a 128*32 pixel resolution.
'''The display is easy to interface, using an I2C type of communication.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''
'''This example show how to integrate a timer to control the display update.
'''
'''@author  EvanV
'''@licence GPL
'''@version 1.5
'''@date    25.3.17
'''********************************************************************************

; ----- Configuration
    #chip mega328p, 16

    #option explicit

    #include <glcd.h>

; ----- Define Hardware settings
    ' Define I2C settings
    #define hi2c_BAUD_RATE 400
    #define hi2c_DATA


; ----- Define GLCD Hardware settings
  #define GLCD_TYPE GLCD_TYPE_SSD1306_32
  #define GLCD_I2C_Address 0x78
; ----- Define variables

  Dim BYTENUMBER, CCOUNT, TogglePixels as Byte

  CCount = 0
  dim longNumber as long
  longNumber = 123456 ' max value = 4294967290
  dim wordNumber as Word
  dim outstring as string
  wordNumber = 0
  byteNumber = 0

  'Call the initialisation routine
  InitLEDControl

; ----- Main program
  GLCDfntDefaultSize = 2
  GLCDPrint 0, 0,   "Great Cow"
  GLCDPrint 0, 15,  "  BASIC"

  wait 3 s
  GLCDCLS

  GLCDfntDefaultSize = 1
  GLCDPrint (0, 0, "Anobium 2019")
  GLCDPrint (0, 9, "Timed pixel demo")
  GLCDPrint (76, 18, GLCD_WIDTH )
  GLCDPrint (96, 18, "*" )
  GLCDPrint (104, 18, GLCD_HEIGHT )



  wait 3 s
  GLCDCLS

  ' Prepare the static components of the screen
  GLCDPrint ( 0,   0, "PrintStr")                                ; Print some text
  GLCDPrint ( 64,  0, "@")                                    ; Print some more text
  GLCDPrint ( 72,  0, ChipMhz)                                   ; Print chip speed
  GLCDPrint ( 86, 0, "Mhz")                                     ; Print some text
  GLCDDrawString( 0,8,"DrawStr")                                 ; Draw some text
  box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1                            ; Draw a box
  box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1    ; Draw a box
  Circle( 44,24,5)                                              ; Draw a circle
  line 0,GLCD_HEIGHT-1,44,19                                    ; Draw a line
  line 0,19,44,19                                               ; Draw a line


  DO forever

     for CCount = 32 to 127

          GLCDPrint ( 64 ,  36,  hex(longNumber_E ) )                 ; Print a HEX string

          filledbox (80,24,83,27, TogglePixels )
          box (3,24,6,27, !TogglePixels )                                           ; Draw a Box
          GLCDDrawChar(48, 9, CCount )                               ; Draw a character
          outString = str( CCount )                                  ; Prepare a string
          GLCDDrawString(64, 9, pad(outString,3) )                   ; Draw a string
          longNumber = longNumber + 7

      NEXT

  LOOP
  end



'Setup routine to create a 1s Interrupt
Sub InitLEDControl

    ' Add the handler for the interrupt
    On Interrupt Timer1Match1 Call TimeOutHandler
    ' Initialise the timer - this is required
    ' Set prescaler and then start the timer
    InitTimer1 Osc, PS_1_1
    ' Start the timer - this is required
    StartTimer 1
    ' Set the OCRnA register to give us the corrent timed Interrupt.
    ' This means there are 255-OCRnA+1 clocks cycles to the next event. Why 1? Becuase the TOP value is 0 not 255.
    OCR1AH = 0xF4 'this OCR1A Register is used to manipulate the counter resolution.
    OCR1AL = 0x23 'this OCR1A Register is used to manipulate the counter resolution.
    TCCR1A = 0x80
    TCCR1B = 0x0C

End Sub


Sub TimeOutHandler
    'TogglePixels which is then used as the state of the pixels in the main routine
    TogglePixels = !TogglePixels

End Sub
