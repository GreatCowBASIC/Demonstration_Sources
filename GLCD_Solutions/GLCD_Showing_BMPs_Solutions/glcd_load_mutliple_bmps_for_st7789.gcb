'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the ST7789.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the ST7789 GLCD capabilities.
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The ST7789 controller a  graphical OLED, suitable for a lot of various projects.  The ST7789 is typically a 3v3 device - please check the datasheet before uing 5v0
'''The display has an active display surface of 1.5 inches , and a 240*240 pixel resolution.
'''The display is easy to interface, using a SPI type of communication.   The SPI uses SPI mode 2 and therefore the GLCD may not interoprate with other SPI devices.
'''
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''
'''@author  EvanV
'''@licence GPL
'''@version 1.5
'''@date    27.3.21
'''********************************************************************************

#chip 16F15376
#option Explicit

    #startup InitPPS, 85

    Sub InitPPS
        #ifdef ST7789_HardwareSPI

            'This #ifdef is added to enable easy change from hardware SPI (using PPS) to software PPS that just uses the port assignments shown below.

            SSP1CLKPPS = 0x1    //RC3->MSSP1:SCK1
            RC3PPS = 0x15       //RC3->MSSP1:SCK1
            RC5PPS = 0x16       //RC5->MSSP1:SDO1
            SSP1DATPPS = 0x14   //RC4->MSSP1:SDI1

        #endif
    End Sub

' ********************** Setup the GLCD ************************************************

    #INCLUDE <glcd.h>
    #define GLCD_TYPE     GLCD_TYPE_ST7789_240_240


    'This is a PPS chip, so, need to make the DO/SDO & SCK match the PPS assignments
    #DEFINE GLCD_DO     portC.5
    #DEFINE GLCD_SCK    portC.3

    'Additinal pin assignments for GLCD
    #DEFINE GLCD_DC     portA.3
    #DEFINE GLCD_RESET  portA.1
    'It is optional on the ST7789 to set the GLCD_CS... therefore, here but commented out
    '#DEFINE GLCD_CS     porte.0

    'Uncomment out the next line... enable or disable the PPS!!!
    #DEFINE ST7789_HardwareSPI    ' remove/comment out if you want to use software SPI.0



' ********************** DEMO REALLY STARTS HERE ************************************************
; ----- Variables
  ' These must be WORDs as this is required to handle large tables.
  Dim TableReadPosition, TableLen,SelectedTable as word
  Dim OBJWIDTH, OBJHEIGHT, OLDGLCDXPOS, WHOLEYBYTES, HCOUNT, WIDTHCOUNT, WBYTE, ONPAGEBOUNDARY, MAXHEIGHT, CURRCHARROW as Byte


; ----- Quick Command Reference:
  'You should then do the following.
  'Replace the existing table data with your data BMP to a table.
  'You can define five BMP as a table.
  'Pick any of the five tables.  YOU MUST RETAIN THE GCLDTABLEn NAMING CONVENTION
  'Then, so, you can easily remember the name of you BMP use a define
  'Then, call the subroutine, an example GLCDBMPLoad ( 0, 0, Anobium  )
  #define Anobium      @GLCDTable1
  #define GCB          @GLCDTable2
'  #define Another1     @GLCDTable3
'  #define Another2     @GLCDTable4
'  #define Another3     @GLCDTable5
; ----- Main body of program commences here.



    GLCDBMPLoad ( 100, 100, GCB )

    GLCDBMPLoad ( 0, 0, Anobium  )

    GLCDPrint   ( 10, 230, "Great Cow BASIC 2021" )

'    GLCDCLS
'    GLCDBMPLoad ( 0, 0, Another1 )
'    wait 750 ms
'
'    GLCDCLS
'    GLCDBMPLoad ( 0, 0, Another2 )
'    wait 750 ms
'
'    GLCDCLS
'    GLCDBMPLoad ( 0, 0, Another3 )
'    wait 750 ms

  do forever
  loop
  end

; ----- Support methods.  Subroutines and Functions
  sub GLCDBMPLoad ( in GLCDXPos, in GLCDYPos, in SelectedTable as word )

    ' Start of code
    TableReadPosition = 1

    'Read selected table
    Select Case SelectedTable
        Case @GLCDTable1: ReadTable GLCDTable1, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable1, TableReadPosition, objHeight
        Case @GLCDTable2: ReadTable GLCDTable2, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable2, TableReadPosition, objHeight
        Case @GLCDTable3: ReadTable GLCDTable3, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable3, TableReadPosition, objHeight
        Case @GLCDTable4: ReadTable GLCDTable4, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable4, TableReadPosition, objHeight
        Case @GLCDTable5: ReadTable GLCDTable5, TableReadPosition, objwidth
             TableReadPosition++
             ReadTable GLCDTable5, TableReadPosition, objHeight
    End Select


    oldGLCDXPos = GLCDXPos
    TableReadPosition = 3

    WholeYBytes = objHeight /  8               ; Number of whole bytes within Y Axis.  This is integer maths!

    onPageBoundary = ( GLCDYPos % 8 ) = 0      ; If GLCDYPos as a memory page boundary.  Used to fast write the byte

      if WholeYBytes <> 0 then

          for hCount = 0 to (WholeYBytes - 1)  ; counter to number of whole bytes

              ' it is safe to use GLCDY and X here as PSET is not called when this is used as a variable
                GLCDY = GLCDYPos+hCount
                for widthCount = 0 to (objwidth - 1)  ; increment thru bytes horizontally
                    'Read selected table
                    Select Case SelectedTable
                    Case @GLCDTable1: ReadTable GLCDTable1, TableReadPosition, wByte

                    Case @GLCDTable2: ReadTable GLCDTable2, TableReadPosition, wByte

                    Case @GLCDTable3: ReadTable GLCDTable3, TableReadPosition, wByte

                    Case @GLCDTable4: ReadTable GLCDTable4, TableReadPosition, wByte

                    Case @GLCDTable5: ReadTable GLCDTable5, TableReadPosition, wByte

                    End Select
                    TableReadPosition++

                          ' draw using X Y position and interate throught the bits
                          For CurrCharRow = 0 to 7
                                    If wByte.0 = 0 Then
                                              PSet GLCDXPos+widthCount, CurrCharRow + GLCDYPos, GLCDBackground
                                    Else
                                              PSet GLCDXPos+widthCount, CurrCharRow + GLCDYPos, GLCDForeground
                                    End If
                                    Rotate wByte Right
                          Next

                next widthCount

                GLCDXPos =  oldGLCDXPos
                GLCDYPos = GLCDYPos + 8

          next hCount

      end if

      maxHeight = objHeight % 8       ; calculate the remaining bits

      'writes and remaining bits, if any
      if maxHeight <> 0 then

        for widthCount = 0 to objwidth - 1
          'Read selected table
            Select Case SelectedTable
            Case @GLCDTable1: ReadTable GLCDTable1, TableReadPosition, wByte

            Case @GLCDTable2: ReadTable GLCDTable2, TableReadPosition, wByte

            Case @GLCDTable3: ReadTable GLCDTable3, TableReadPosition, wByte

            Case @GLCDTable4: ReadTable GLCDTable4, TableReadPosition, wByte

            Case @GLCDTable5: ReadTable GLCDTable5, TableReadPosition, wByte

            End Select
            TableReadPosition++

              ' slow draw using X Y position and interate throught the bits
              For CurrCharRow = 0 to maxHeight-1
                        If wByte.0 = 0 Then
                                  PSet GLCDXPos+widthCount, ( CurrCharRow + GLCDYPos ), GLCDBackground
                        Else
                                  PSet GLCDXPos+widthCount, ( CurrCharRow + GLCDYPos ), GLCDForeground
                        End If
                        Rotate wByte Right
              Next
        next
      end if

  end sub

Table GLCDTable1
' Anobium.bmp as a Table
' start data
0x3C
0x40
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xE0
0x00
0xC0
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x40
0xC0
0xB0
0x60
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xC0
0x70
0xDE
0x73
0x1C
0x07
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x01
0x03
0x06
0x0D
0x1B
0x3E
0xEC
0x18
0x10
0x10
0x10
0x18
0x18
0x08
0x08
0x0C
0x0C
0x0C
0x04
0x04
0x04
0x06
0x06
0x02
0x02
0x02
0x03
0x03
0x01
0x01
0x03
0x0F
0x1C
0x70
0xE0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xFF
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x07
0x0E
0x38
0x70
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xFF
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xC0
0x63
0x36
0x1C
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x07
0x0C
0x08
0x18
0x10
0x30
0x30
0x20
0x60
0x40
0xC0
0xC0
0x80
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xC0
0x70
0x38
0x1C
0x0E
0x03
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xC0
0x20
0xC0
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x01
0x03
0x03
0x02
0x06
0x04
0x0C
0xEC
0x08
0x0C
0x06
0x03
0x01
0x00
0x00
0x20
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xC0
0x38
0x16
0x11
0x10
0x11
0x16
0x38
0xC0
0x00
0xFF
0x02
0x01
0x01
0x01
0xFE
0x00
0x00
0x7E
0x81
0x81
0x81
0x81
0x7E
0x00
0x00
0xFF
0x42
0x81
0x81
0x81
0x7E
0x00
0x00
0xFF
0x00
0x00
0x7F
0x80
0x80
0x80
0x40
0xFF
0x00
0x00
0xFF
0x02
0x01
0x01
0x01
0xFE
0x02
0x01
0x01
0x01
0xFE
End Table

Table GLCDTable2
' start data
' The GCB Logo as a Table
0x54
0x3F
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x20
0x60
0xC0
0x80
0x80
0xC0
0xE0
0xE0
0xE0
0xF0
0xB8
0xDE
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xC0
0xE0
0xF0
0xF8
0xF8
0xF8
0xF8
0xF8
0xF8
0xF8
0xF0
0xF0
0xF0
0xF0
0xF0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xE0
0xF0
0xF0
0xF0
0xF0
0xF0
0xF8
0xF8
0xF8
0xF8
0xFC
0xFC
0xFC
0xFC
0xFC
0xFC
0xFC
0xFC
0xFE
0xFE
0xFE
0xFE
0xFE
0xFE
0xFE
0xFE
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xF1
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xF8
0xFE
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x7F
0x3F
0x3F
0x3F
0x3F
0x1E
0x0C
0x00
0x00
0x00
0x00
0x00
0x00
0xE0
0xFF
0x07
0x3F
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x3F
0x3F
0x3F
0x19
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xFC
0xFF
0xFF
0x00
0x00
0x01
0x0F
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x7F
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x7F
0x7F
0x7F
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x7F
0x3F
0x1F
0x0F
0x07
0x03
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x80
0xFF
0xFF
0xFF
0x1F
0x00
0x00
0xF0
0xFC
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x0F
0x1F
0x0F
0x07
0x0F
0x01
0x00
0x00
0x00
0x00
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0xFF
0xFF
0x3F
0x0F
0x03
0x00
0x2F
0xFF
0xFF
0xFF
0x7F
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x03
0x03
0x01
0x00
0x00
0x00
0x00
0xFF
0xFF
0xFF
0x07
0x01
0x07
0x1F
0xFF
0xFF
0xF0
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x14
0x1F
0x1F
0x1F
0x10
0x00
0x00
0x00
0x00
0xFF
0xFF
0xFF
0xC0
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x0C
0x3F
0x7F
0x7F
0x78
0x00
0x00
0x00
0x03
0x03
0x07
0x03
0x03
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x01
0x01
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00

End Table

Table GLCDTable3
    1, 0, 255
End Table

Table GLCDTable4
    1, 0, 255
End Table

Table GLCDTable5
    1, 0, 255
End Table
