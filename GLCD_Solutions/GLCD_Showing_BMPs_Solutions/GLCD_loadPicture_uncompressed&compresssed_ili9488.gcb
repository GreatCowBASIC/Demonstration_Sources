#chip 18F26K83, 64 
#option Explicit

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.3
    'PinManager data: Not available (3)
    // Generated for 18f26k83
    //
    // Template comment at the start of the config file
    //
    #startup InitPPS, 85
    #DEFINE PPSToolPart 18f26k83

    Sub InitPPS
        'Module: UART pin directions
        Dir PORTC.7 Out    ' Make TX1 pin an output
        'Module: UART1
        RC7PPS = 0x0013    'TX1 > RC7

        #IFDEF ILI9488_HardwareSPI
            UNLOCKPPS
            'Module: SPI1
            RB0PPS = 0x001F    'SDO1 > RB0
            RB1PPS = 0x001E    'SCK1 > RB1
            SPI1SCKPPS = 0x0009    'RB1 > SCK1 (bi-directional)
            SPI1SDIPPS = 0x000A    'RB2 > SDI1
        #ELSE
            RB0PPS = 0
            RB1PPS = 0    
        #ENDIF    
    End Sub
    // Template comment at the end of the config file

#include <glcd.h>
    #DEFINE GLCD_TYPE GLCD_TYPE_ILI9488
    #DEFINE ILI9488_HARDWARESPI
    #DEFINE HWSPIMODE MASTERFAST 

    #DEFINE GLCD_DC       PORTB.3           ' Data command line
    #DEFINE GLCD_CS       PORTB.5           ' Chip select line
    #DEFINE GLCD_RST      PORTB.4           ' Reset line

    #DEFINE GLCD_DI       PORTB.2          ' Data in | MISO
    #DEFINE GLCD_DO       PORTB.0          ' Data out | MOSI
    #DEFINE GLCD_SCK      PORTB.1          ' Clock Line
    
    #include "rgb.H"


//! Set GLCDfntDefaultsize = 1, in this demo also sets the demonstration section to execute.
//! Set GLCDfntDefaultsize = 2, in this demo also sets the demonstration section to execute.
//! Set GLCDfntDefaultsize = 3, in this demo also sets the demonstration section to execute.


'''********************************************************************************

'main program start here

    // Set the background
    #DEFINE DEFAULT_GLCDBACKGROUND ILI9488_TFT_WHITE
    // Set to small OLED fonts
    #DEFINE GLCD_OLED_FONT

    GLCDPrint 23, 0, "1s delay for terminal", !GLCDBACKGROUND
    Wait 1 s                                     // Allows for serial terminal to connect
    //DrawCompressedTableData ( 5, 50 )          // Compressed picture to GLCD method
    DrawTableData ( 50 , 50 )                    // Uncompressed picture to GLCD method

    End





'''Display Picture on the screen
Sub DrawCompressedTableData ( in TFTXPos as Word, in TFTYPos as Word )
    Dim TableReadPosition, TableLen As Long
    // Start of code
    Dim  PixelRGB, XCount, YCount, TableReadPosition, GLCDX , GLCDY, CompressedCounter as Word
    Dim CompressedWindow, CompressedPixelData, CompressedElements, objwidth, objHeight as Long

    'Read selected table
    ReadTable RGB, 0, CompressedElements
    TableReadPosition++
    ReadTable RGB, 1, objwidth
    TableReadPosition++
    ReadTable RGB, 2, objHeight
    
    TableReadPosition = 3
    CompressedCounter = 0
    'Read selected table less two elements for the objwidth and objHeight and the last element
    Repeat ( CompressedElements / 2 ) - 1

      ReadTable RGB, TableReadPosition, CompressedPixelData
      TableReadPosition++
      ReadTable RGB, TableReadPosition, CompressedWindow
      TableReadPosition++

      Repeat CompressedWindow

        IF CompressedPixelData <> GLCDBACKGROUND Then 
          // Optimised to only update the GLCD when pixel is NOT the same as the background color
          GLCDX=[Word]TFTXPos+( CompressedCounter MOD objwidth )
          GLCDY=[Word]TFTYPos+( CompressedCounter / objwidth )        
          PSet GLCDX, GLCDY, CompressedPixelData
        End If
        CompressedCounter++

      End Repeat

    End Repeat  
End Sub

'''Display Picture on the screen
Sub DrawTableData ( in TFTXPos as Word, in TFTYPos as Word )

    Dim TFTX, TFTY, XXCount, YCount, GLCDX , GLCDY, CompressedCounter as Word
    Dim PixelRGB, TableReadPosition, objwidth, objHeight as Long
    Dim HWSPI_Send_18bits as Long
 
    TableReadPosition = 1

    'Read selected table
    ReadTable RGB, TableReadPosition, objwidth
    TableReadPosition++
    ReadTable RGB, TableReadPosition, objHeight
    
    TableReadPosition = 3
    
  //   #DEFINE USEPUBLICMETHODS
  // Uncomment the constant above to use Public methods..it will be slower 
  #IFNDEF USEPUBLICMETHODS

      SetAddressWindow_ILI9488 ( TFTXPos, TFTYPos, TFTXPos+objwidth-1  , TFTYPos+objHeight-1 )

      set ILI9488_CS OFF
      set ILI9488_DC ON
      For TableReadPosition = 3 to ((objwidth-1) * (objHeight-1))
        ReadTable RGB, TableReadPosition, HWSPI_Send_18bits
        HWSPI_Fast_Write_18bits_Macro
      Next
      set ILI9488_CS ON

  #ELSE
    
      For YCount = 0 to ([WORD]objHeight - 1)
        For XXCount = 0 to ([WORD]objwidth - 1)
          'Read selected table
          ReadTable RGB, TableReadPosition, PixelRGB
          TableReadPosition++

          TFTX=[Word]TFTXPos+[WORD]XXCount
          TFTY=[Word]TFTYPos+[WORD]YCount

          PSet TFTX, TFTY, PixelRGB

        Next
      Next
    
  #ENDIF

End Sub

