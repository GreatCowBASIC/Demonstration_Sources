    'This program addresses both displays, it retains all the GCB GLCD capabilities but we need to initialise in a different way to support two screens.
    'GCB uses a memory buffer to support the GLCD commands, therfore, you need to address one screen, update etc, then, update the other.  We only have one buffer to save memory but we have two displays.

    #chip p18f2550,16
    #option Explicit

    #include <glcd.h>
    'For this port we will enable the GLCD methods without the hardware specific driver, set type to 0!
    'We get to use all GLCD commands but we need to do a bit of setup
    #DEFINE GLCD_TYPE 0
    #Define GLCD_OLED_FONT

    'Initialise global variable. Required variable for Circle in all DEVICE DRIVERS- DO NOT DELETE
    Dim PCD8544_BufferLocationCalc as Word
    Dim display as byte
    'For this port we need to create display buffer, this array needs to be created here as we dont initialise in the stock .h file.
    Dim PCD8544_BufferAlias(504)


    'For this port we need to specific a number of methods as local to this program
    #STARTUP Local_InitGLCD_PCD8544, 85
    'Map methods to hardware specific method
    'These all exist in the default GLCD hardware driver so we need to point these methods at the local methods. Why? we support both displays.
    #define GLCDCLS local_GLCDCLS_PCD8544
    #define GLCDDrawChar GLCDDrawChar_PCD8544
    #define FilledBox FilledBox_PCD8544
    #define PSet Local_PSet_PCD8544
    #define Write_Command_PCD8544 Local_Write_Command_PCD8544
    #define Write_Data_PCD8544 Local_Write_Data_PCD8544
    #define PCD8544WriteDelay 0
    #define GLCD_WIDTH 84
    #define GLCD_HEIGHT 48


    ' Pin mappings for SPI for Nokia 3310 Device
    'For this port we need to rename GLCD_ to PCD8544_ so we can reuse all the functions and methods
    #define GLCD_DO portb.5
    #define GLCD_SCK portb.4
    #define GLCD_DC portb.6
    #define GLCD_CS1 portb.3
    #define GLCD_CS2 portb.2
    #define GLCD_RST portb.7

    'Set other connected ports low
    dir portb.0 out
    portb.0 = off

    repeat 2

        Call SelectDisplay1
        GLCDCLS
        box 0,0,83,47
        wait 1 s
        GlcdPrint( 5,5, "Display-1" )
        GLCDLocateString ( 8, 3)
        GLCDPrintStringLn ("GCBASIC")
        GLCDPrintStringLn ("  GCBASIC")
        wait 2 s
        filledCircle ( 42, 24, 20 )
        wait 1 s
        GLCDCLS
        filledCircle ( 42, 24, 16 )
        wait 500 ms
        GLCDCLS
        filledCircle ( 42, 24, 12 )
        wait 250 ms
        GLCDCLS
        filledCircle ( 42, 24, 8 )
        wait 125 ms
        GLCDCLS
        filledCircle ( 42, 24, 4 )
        wait 50 ms
        GLCDCLS

        Triangle 0, 0, 80,0, 8,40
        wait 1 s

        FilledTriangle 5, 5, 62, 5, 12, 33
        wait 2 s

        call SelectDisplay2
        GLCDCLS
        box 0,0,83,47
        wait 1 s
        GlcdPrint( 5,5, "Display-2" )
        GLCDLocateString ( 8, 3)
        GLCDPrintStringLn ("GCBASIC")
        GLCDPrintStringLn ("  GCBASIC")
        wait 2 s
        filledCircle ( 42, 24, 20 )
        wait 1 s
        GLCDCLS
        filledCircle ( 42, 24, 16 )
        wait 500 ms
        GLCDCLS
        filledCircle ( 42, 24, 12 )
        wait 250 ms
        GLCDCLS
        filledCircle ( 42, 24, 8 )
        wait 125 ms
        GLCDCLS
        filledCircle ( 42, 24, 4 )
        wait 50 ms
        GLCDCLS

        Triangle 0, 0, 80,0, 8,40
        wait 1 s

        FilledTriangle 5, 5, 62, 5, 12, 33
        wait 2 s

    end Repeat

;Animation section

    dim cc_x, c_x, c_y, d_x, d_y as byte

    'Animation
    cc_x = 0
    c_x = 0
    c_y = 0
    d_x = 0
    d_y = 0

    Call SelectDisplays
    GLCDCLS
    Call SelectDisplay1
    Do
        Set PORTB.0 on
        animate
        wait 200 ms

        Set PORTB.0 off
        animate
        wait 200 ms
    Loop

Sub Animate
    if c_x => 78 then
        if display = 1 then
            Call SelectDisplay2
        end if
    else
        if display = 2 then
            Call SelectDisplay1
        end if
    end if

    GlcdPrint( cc_x, c_y, " " )

    if d_x = 0 then
        c_x += 6
    else
        c_x -= 6
    end if

    if d_y = 0 then
        c_y += 1
    else
        c_y -= 1
    end if

    if c_y >= 39 then
        d_y = 1
    end if
    if c_y = 0 then
        d_y = 0
    end if

    if c_x >= 156 then
        d_x = 1
    end if
    if c_x = 0 then
        d_x = 0
    end if

    if c_x => 78 then
        cc_x = c_x-84
        if display = 1 then
            Call SelectDisplay2
        end if
    else
        cc_x = c_x
        if display = 2 then
            Call SelectDisplay1
        end if
    end if
    GlcdPrint( cc_x, c_y, "*" )

End Sub


    end



'''Initialise the GLCD device - adapted from the stock method
Sub Local_InitGLCD_PCD8544


    'Pin directions
    'ERV adapted ports
    Dir GLCD_CS1 Out
    Dir GLCD_CS2 Out
    Dir GLCD_DC Out
    Dir GLCD_RST Out

    Dir GLCD_DO Out
    Dir GLCD_SCK Out



    'Reset ports
    'ERV adapted ports
    GLCD_CS1 = OFF
    GLCD_CS2 = OFF
    Set GLCD_DC off
    Set GLCD_RST off
    Set GLCD_DO off
    Set GLCD_SCK off

    'Chip Select - will do both at once
    GLCD_CS1 = OFF
    GLCD_CS2 = OFF
    Wait 10 ms
    'Reset display
    Set GLCD_RST On
    Wait 10 ms
    'Reset sequence (lower line for at least 10 us)
    Set GLCD_RST Off
    Wait 25 us
    Set GLCD_RST On
    Wait 10 ms
    GLCD_CS1 = ON
    GLCD_CS2 = ON
    wait 10 us
    GLCD_CS1 = OFF
    GLCD_CS2 = OFF
    wait 10 ms

' /*********SEE DATASHEET FOR ALL THIS********/

    GLCD_CS1 = OFF
    GLCD_CS2 = ON
    Write_Command_PCD8544(0x21);     Activate Chip and H=1.
    Write_Command_PCD8544(0x21);     Activate Chip and H=1.
    Write_Command_PCD8544(0xC2);     Set LCD Voltage to about 7V.
    Write_Command_PCD8544(0x13);     Adjust voltage bias.
    Write_Command_PCD8544(0x20);     Horizontal addressing and H=0.
    Write_Command_PCD8544(0x09);     Activate all segments.
    Clear_RAM_PCD8544;               Erase all pixel on the DDRAM.
    Write_Command_PCD8544(0x08);     Blank the Display.
    Write_Command_PCD8544(0x0C);     Display Normal.
    GOTO_Pixel_PCD8544(0,0);         Cursor Home.

    GLCD_CS1 = ON
    GLCD_CS2 = OFF
    Write_Command_PCD8544(0x21);     Activate Chip and H=1.
    Write_Command_PCD8544(0x21);     Activate Chip and H=1.
    Write_Command_PCD8544(0xC2);     Set LCD Voltage to about 7V.
    Write_Command_PCD8544(0x13);     Adjust voltage bias.
    Write_Command_PCD8544(0x20);     Horizontal addressing and H=0.
    Write_Command_PCD8544(0x09);     Activate all segments.
    Clear_RAM_PCD8544;               Erase all pixel on the DDRAM.
    Write_Command_PCD8544(0x08);     Blank the Display.
    Write_Command_PCD8544(0x0C);     Display Normal.
    GOTO_Pixel_PCD8544(0,0);         Cursor Home.

    'Colours
    GLCDBackground = 0
    GLCDForeground = 1
    GLCDFontWidth = 6
    GLCDfntDefault = 0
    GLCDfntDefaultsize = 1

    GLCD_CS1 = OFF
    GLCD_CS2 = OFF


End Sub



'''Draws a pixel on the GLCD
'''@param GLCDX X coordinate of pixel
'''@param GLCDY Y coordinate of pixel
'''@param GLCDColour State of pixel (0 = erase, 1 = display)
Sub Local_PSet_PCD8544(In GLCDX, In GLCDY, In GLCDColour As Word) ' adapted from the stock method

    dim GLCDBitNo, GLCDChange, GLCDDataTemp as byte
    dim PCD8544_BufferLocationCalc as word

              if GLCDX => GLCD_WIDTH then exit sub
              if GLCDY => GLCD_HEIGHT then exit sub

              'PCD8544_BufferLocationCalc = ( GLCDY / 8 )* GLCD_WIDTH

              'faster than /8
              PCD8544_BufferLocationCalc = GLCDY
              Repeat 3
                Set C Off
                Rotate PCD8544_BufferLocationCalc Right
              End Repeat
              PCD8544_BufferLocationCalc = PCD8544_BufferLocationCalc * GLCD_WIDTH

              PCD8544_BufferLocationCalc = GLCDX + PCD8544_BufferLocationCalc+1

              GLCDDataTemp = PCD8544_BufferAlias(PCD8544_BufferLocationCalc)

              'Change data to set/clear pixel
              GLCDBitNo = GLCDY And 7
              If GLCDColour.0 = 0 Then
                GLCDChange = 254
                Set C On
              Else
                GLCDChange = 1
                Set C Off
              End If
              Repeat GLCDBitNo
                Rotate GLCDChange Left
              End Repeat

              If GLCDColour.0 = 0 Then
                GLCDDataTemp = GLCDDataTemp And GLCDChange
              Else
                GLCDDataTemp = GLCDDataTemp Or GLCDChange
              End If

              if PCD8544_BufferAlias(PCD8544_BufferLocationCalc) <> GLCDDataTemp then
                PCD8544_BufferAlias(PCD8544_BufferLocationCalc) = GLCDDataTemp
                Cursor_Position_PCD8544 ( GLCDX, GLCDY )
                Write_Data_PCD8544 ( GLCDDataTemp )
              end if

End Sub

'''Clears the GLCD screen
Sub local_GLCDCLS_PCD8544 ' adapted from the stock method
          dim PrintLocX, PrintLocY as byte
          dim PCD8544_BufferLocationCalc as word
          GLCD_yordinate = 0
          PrintLocY = 0

          For PCD8544_BufferLocationCalc = 1 to 504
              PCD8544_BufferAlias(PCD8544_BufferLocationCalc) = 0x00
          Next

          GOTO_Pixel_PCD8544(0,0);  'Goto the pixel specified by the Co-ordinate
          for PCD8544_BufferLocationCalc = 504 to 1 step - 1
              Local_Write_Data_PCD8544( 0x00 )
          next

          GOTO_Pixel_PCD8544(0,0);  'Goto the pixel specified by the Co-ordinate
          PrintLocX = 0
          PrintLocY = 0
End Sub


sub Local_Write_Command_PCD8544(in  PCD8544SendByte  )

      SET GLCD_DC OFF;   'Data/Command is set to zero to give Command of PCD8544 Controller
      SPI_Send_Data_PCD8544(PCD8544SendByte);
      WAIT PCD8544WriteDelay us
end sub


sub Local_Write_Data_PCD8544(in PCD8544SendByte )

      SET GLCD_DC ON;        'Data/Command is set to One to give Data of PCD8544 Controller
      SPI_Send_Data_PCD8544(PCD8544SendByte)

      WAIT PCD8544WriteDelay us
end sub


sub SelectDisplay1
    GLCD_CS1 = 0
    GLCD_CS2 = 1
    display = 1

End sub

sub SelectDisplay2
    GLCD_CS1 = 1
    GLCD_CS2 = 0
    display = 2
End sub

sub SelectDisplays
    GLCD_CS1 = 0
    GLCD_CS2 = 0
    display = 3
End sub
