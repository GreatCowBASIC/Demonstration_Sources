'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a SNAKE game on 1" SSD1306 GLCD for an UNO/Arduino/Mega328p
''':
''':This game reserves the rights of any orginal works.
''':
'''UNO or Pic SNAKE type game on 1" GLCD 128x64 pixel monochrome i2c oled display
''':
'''The idea is to control your point to leave a trail that the computer point crashes into.
'''It's easy when you know how :)
'''Player starts on random screen right and initially moves left
'''CPU starts on random screen left and initially moves right
'''4 buttons for up/down/left/right from VSS to UNO D7 to D4 and pull-down resistors
'''
'''The idea is the players pixel has a x,y direction
'''value either +1 or -1 that is added to it'''s x,y value.
'''here, using 255 for -1 as adding 255 to a byte value is the same as adding -1
'''ie subtract 1 from the x or y co-ordinate.
'''the cpu direction is the same process.
'''
'''This GCBASIC version uses a state engine to control the game.
''':
''':
'''Player starts on screen right and initially moves left
'''CPU starts on screen left and initially moves right
'''4 buttons for up/down/left/right from VSS to UNO D8 to D11 via appropriate pull-down resistors
''':
'''@author     StanC & works of EvanV
'''@licence    GP
'''@version    2.04
'''@date       20.04.2017
'''********************************************************************************


; ----- Configuration
  #option explicit
  #include <uno_mega328p.h>
  #include <glcd.h>

  ; ----- Define GLCD Hardware settings
  #define GLCD_TYPE GLCD_TYPE_SSD1306
  #define GLCD_I2C_Address 0x78
  #define GLCD_PROTECTOVERRUN

; ----- Constants
  #define up_button portb.3 'uno digital 11
  #define down_button portb.2 'uno digital 10
  #define left_button portb.1 'uno digital 9
  #define right_button portb.0 'uno digital 8

  #define StartGame     1
  #define PlayGame      2
  #define PlayerCrashed 3
  #define CPUCrashed    4

  #define StartSpeed    70

  #define Explode ExplodeB 'select ExplodeA or ExplodeB to change the explosion...


; ----- Define Hardware settings
  Dir portb.0 in
  Dir portb.1 in
  Dir portb.2 in
  Dir portb.3 in

  ' Define Hardware I2C settings
  #Define HI2C_BAUD_RATE 400
  #Define HI2C_DATA
  HI2CMode Master


; ----- Variables
  Dim GLCD_dim_state,GameSpeed as byte
  dim pixel_status, pixelx, pixely as byte

  Dim Player_Y,Player_X as byte
  Dim Player_X_Direction,Player_Y_Direction as Integer

  dim Explode_Tmp,CPU_X,CPU_Y, GameState as Byte
  dim Game_Tmp alias Explode_Tmp
  dim CPU_X_Direction,CPU_Y_Direction as Integer

; ----- Main body of program commences here.
  GameState = StartGame
  GameSpeed = StartSpeed

  GLCDPrint ( 14 , 0 , "GCBASIC" )
  GLCDPrint ( 0 , 55 , "2.04" )
  GLCDPrint ( 64 , 55 , "19.04.2023" )

  do forever

    select case GameState

      case StartGame
          GLCDfntDefaultsize = 3
          GLCDPrint ( 16 , 8 , "SNAKE" )

          GLCDfntDefaultsize = 1
          GLCDPrint ( 0 , 40 , "PRESS A BUTTON" )
          startscrollright_SSD1306(5,14,0x0e)
          do Until  (pinb and 15) > 0 'loop until either portb.0 to 3 goes high ie a button pressed
          'and 15 is and 00001111 so if either of the right 4 bits which represent
          'portb.0,1,2,3 are high ie button pressed then- and 15 will be not 0
          'if portb.0 is high then and 15 would be 1
          'if portb.1 is high then and 15 would be 2
          'if portb.2 is high then and 15 would be 4
          'if portb.3 is high then and 15 would be 8
          'we aren't concerned about portb.4 to 7 so we mask the portb bits we want by and 15
          'so ignore portb bits 4 to 7
          Game_Tmp = Random 'a new random number in tmp each loop so tmp is more Random
          '               because the time it takes to press a button will vary
          '               so the random start positions seem different each game
          loop 'wait for button press


          ;--set up game screen screen
          stopscroll_SSD1306
          GLCDCLS
          box 0,0,GLCD_WIDTH - 1, GLCD_HEIGHT - 1 ;draw border

          ;plot a dot at random y left and right to make cpu not follow border
          Pset (1,(Game_Tmp/8)+16,1)
          Game_Tmp = Random
          Pset (126,(Game_Tmp/8)+16,1)

          ;define start positions and directions
          Game_Tmp = Random:Player_Y=(Game_Tmp/8)+16 ;player y start position
          Game_Tmp = Random:CPU_Y=(Game_Tmp/8)+16 ;cpu y start position
          Player_X=90:Player_X_Direction=-1:Player_Y_Direction=0:Pset (Player_X,Player_Y,1) ; plot player
          CPU_X=30:CPU_X_Direction=1:CPU_Y_Direction=0:Pset (CPU_X,CPU_Y,1) ; plot cpu

          GameState = PlayGame

          wait 2 s

      case PlayGame

          wait GameSpeed ms '* Game Speed, 30 ms is impossible,75 is easy. starts at 80,gets faster every win *
          ;--testkeys
          if up_button = 1 then ;up key pressed
            Player_X_Direction=0:Player_Y_Direction=-1
          end if
          if down_button = 1 then ;down key pressed
            Player_X_Direction=0:Player_Y_Direction=1
          end if
          if left_button = 1 then ;left key pressed
            Player_X_Direction=-1:Player_Y_Direction=0
          end if
          if right_button = 1 then ;right key pressed
            Player_X_Direction=1:Player_Y_Direction=0
          end if

          ;player direction
          Player_X=Player_X+Player_X_Direction
          Player_Y=Player_Y+Player_Y_Direction
          ;
          ;test pixel ahead

          pixel_status = pixelstatus_SSD1306( Player_X, Player_Y )

          if pixel_status = 1 then ;player crashed

              GameState = PlayerCrashed

          else

              ;player_has not_crashed, so, plot player
              Pset(Player_X,Player_Y,1)

              ;CPU manouver
              MoveCPU

          end if


          if GameState = PlayGame then 'no one has crashed, show CPU next move

              pixel_status = pixelstatus_SSD1306(CPU_X,CPU_Y) ;has cpu crashed?

              if pixel_status=0 then ;CPU didn't crash
                Pset (CPU_X,CPU_Y,1) ; plot CPU
              Else
                GameState = CPUCrashed
              end if

          End if

        case PlayerCrashed

          ;boom!
          Explode( Player_X,Player_Y )
          GLCDfntDefaultsize = 2
          GLCDPrint (22,24,"YOU LOST")
          repeat 4
            for GLCD_dim_state = 0 to 255
              SetContrast_SSD1306 ( GLCD_dim_state )
              wait 1 ms
            next
          end repeat
          GameSpeed = StartSpeed
          GameState = StartGame
          GLCDCLS

        case CPUCrashed

          ;boom!
          Explode( CPU_X,CPU_Y )
          GLCDfntDefaultsize = 2
          GLCDPrint (22,24,"YOU WIN")
          repeat 100
            for GLCD_dim_state = 0 to 255
              SetContrast_SSD1306 ( GLCD_dim_state )
            next
          end repeat
          GameState = StartGame
          GameSpeed = GameSpeed - 10: GameSpeed = GameSpeed and 127 'Game gets faster and faster....if you win
          GLCDCLS

        end Select
  loop
  ;************************* end of game code *************************************************************

Sub MoveCPU

      ;**** CPU manouver ****
      CPU_X=CPU_X+CPU_X_Direction:CPU_Y=CPU_Y+CPU_Y_Direction ;cpu diection
      ;
      if CPU_X_Direction=1 then ;going right
        Pixel_Status = pixelstatus_SSD1306(CPU_X+1,CPU_Y)
        if Pixel_Status=1 then ;object ahead..change direction
          CPU_X_Direction=0
          if Player_Y>=CPU_Y then
            CPU_Y_Direction=1
          else
            CPU_Y_Direction=-1
          end if
        end if
        exit sub
      end if
      ;
      if CPU_X_Direction=-1 then ;going left
        Pixel_Status = pixelstatus_SSD1306(CPU_X-1,CPU_Y)
        if Pixel_Status=1 then ;object ahead..change direction
          CPU_X_Direction=0
          if Player_Y>=CPU_Y then
            CPU_Y_Direction=1
          else
            CPU_Y_Direction=-1
          end if
        end if
        exit sub
      end if
      ;
      if CPU_Y_Direction=1 then ;going down
        Pixel_Status = pixelstatus_SSD1306(CPU_X,CPU_Y+1)
        if Pixel_Status =1  then ;object ahead..change direction
          CPU_Y_Direction=0
          if Player_X>=CPU_X then
            CPU_X_Direction=1
          else
          CPU_X_Direction=-1
          end if
          exit sub
        end if
      end if
      ;
      if CPU_Y_Direction=-1 then ;going up
        Pixel_Status = pixelstatus_SSD1306(CPU_X,CPU_Y-1)
        if Pixel_Status=1  then ;object ahead..change direction
          CPU_Y_Direction=0
          if Player_X>=CPU_X then
            CPU_X_Direction=1
          else
          CPU_X_Direction=-1
          end if
          exit sub
        end if
      end if
      exit sub
End Sub

Sub ExplodeA ( in ExplodeX, in ExplodeY )

          for Explode_Tmp = 3 to 30
            circle (ExplodeX, ExplodeY, Explode_Tmp, GLCDForeground )
            wait 5 ms
          next tmp

          for Explode_Tmp=3 to 30
            circle (ExplodeX, ExplodeY, Explode_Tmp, GLCDBackground )
            wait 10 ms
            box 0,0,GLCD_WIDTH - 1,GLCD_HEIGHT - 1 ;draw border
          next tmp

          GLCDCLS
          GLCDfntDefaultsize = 2

End Sub


sub ExplodeB ( in ExplodeX, in ExplodeY )
    DIM Pixel_Status as Byte
    dim boomx ( 8 ) , boomy (8)
    for Explode_Tmp = 1 to 3
      box 0,0,GLCD_WIDTH - 1 ,GLCD_HEIGHT -1 ,0 ;erase boarder
      box 0,0,GLCD_WIDTH - 1 ,GLCD_HEIGHT -1 ,1 ;draw boarder
    next Explode_Tmp

    Pixel_Status=1
    repeat 2
        for Explode_Tmp = 1 to 8
          boomx(Explode_Tmp)=ExplodeX:boomy(Explode_Tmp)=ExplodeY
        next Explode_Tmp

        for Explode_Tmp = 1 to 60
          boomy(1)=boomy(1)-1
          boomy(2)=boomy(2)+1
          boomx(3)=boomx(3)-1
          boomx(4)=boomx(4)+1
          boomx(5)=boomx(5)-1:boomy(5)=boomy(5)-1
          boomx(6)=boomx(6)+1:boomy(6)=boomy(6)-1
          boomx(7)=boomx(7)-1:boomy(7)=boomy(7)+1
          boomx(8)=boomx(8)+1:boomy(8)=boomy(8)+1

          for CPU_X=1 to 8
            if (boomx(CPU_X)< GLCD_WIDTH ) and (boomy(CPU_X)< GLCD_HEIGHT ) then
              pset (boomx(CPU_X),boomy(CPU_X),Pixel_Status)
            end if
          next CPU_X
          wait 10 ms
        next Explode_Tmp
        Pixel_Status=0
        Box ( 0, 0, GLCD_WIDTH-1, GLCD_HEIGHT-1, GLCDForeground )
        FilledBox ( 1, 1, GLCD_WIDTH-2, GLCD_HEIGHT-2, GLCDBackground )

    end Repeat
end sub
