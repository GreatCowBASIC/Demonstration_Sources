/*

    Inspect the memory in the simulator to see results.

    Use See https://www.h-schmidt.net/FloatConverter/IEEE754.html

    or    https://babbage.cs.qc.cuny.edu/ieee-754.old/64bit.html

*/
// Chip Settings
#CHIP 18F16Q20
    #OPTION Explicit
    

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF

  // PIC PPS Tool version: 0.0.6.5
    
      #startup InitPPS, 85
    #DEFINE PPSToolPart 18F16Q20

      Sub InitPPS
              
              // Module: UART pin directions
              Dir PORTB.7 Out    ' Make TX1 pin an output
              // Module: UART1
              RB7PPS =    0x0013    // TX1 > RB7
          
          End Sub
      // Add this code segment to your GCBASIC source program

// *****************************************************************************************************

    //! Wait 200 ms to permit any remote serial terminal to settle.
      wait 200 ms
    //! Clear the terminal
      HserSend    0x01 
 
// ---------- Constant and variable definition and main program ---------------------------------

//!  Convert a constant to a single with three decimal places using a user program
//!  This shows the maths capabilities
//!  Note the poorly formatted constants, there are tests to ensure the compiler works
    
    Dim TestSingleNumber as Single

    //! Test constants
    // TestSingleNumber = 22222.0      
    // TestSingleNumber = -127.999992371     
    // TestSingleNumber = 0.1       
    // TestSingleNumber = 1.01      
    // TestSingleNumber = 0x55    
    // TestSingleNumber = 01.1    
    TestSingleNumber = 01.0100   
    // TestSingleNumber = 1.      
    // TestSingleNumber = 01.10   
    // TestSingleNumber = 0.      
    // TestSingleNumber = .0      
    // TestSingleNumber = .1      
    // TestSingleNumber = .01     
    // TestSingleNumber = 0001.
    // TestSingleNumber = .
    // TestSingleNumber = 32767.5
    // TestSingleNumber = -32767.5


//! Do some work...

    HSerPrintCRLF 2
    HSerPrint "Assignment test on " + ChipNameStr
    HSerPrintCRLF 1

//! Show to three decimal points using psuedo_multiplication .. which is addition, many times

    // Dimension the variables
    Dim ExponentNumberInteger, MantissaNumberInteger as Integer
    Dim ResultNumber as Single

    // Extract exponent
    // Assign the Single to the Integer 
    ExponentNumberInteger = TestSingleNumber

    // Deduct the exponent from float
    TestSingleNumber = TestSingleNumber - ExponentNumberInteger

    psuedo_multiplication:
        // Now TestSingleNumber is just the mantissa
        // Factorise to 3 digits
        //
        // ResultNumber is the result
        //
        ResultNumber = TestSingleNumber
        Repeat 1000
            If TestSingleNumber.31 = 0 Then
                ResultNumber += TestSingleNumber
            Else
                ResultNumber -= TestSingleNumber
            End If
        End Repeat

        // Handle rounding
        If TestSingleNumber.31 = 0 Then
            ResultNumber--
        Else
            ResultNumber++
        End If
    end_of_psuedo_multiplication:

    MantissaNumberInteger = ResultNumber
    // Factorisation can cause decimal rounding so, check for the integer value and add to exponent
    ExponentNumberInteger  = ExponentNumberInteger + (MantissaNumberInteger / 1000)

    // Show results
    HserPrint ExponentNumberInteger
    HserPrint "."
    HserPrint Right("000"+Str(MantissaNumberInteger),3)
    HserPrintCRLF

    Do
    Loop