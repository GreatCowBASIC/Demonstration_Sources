' TM1637 7-Segment OEM display library Demonstration - For GCBASIC
' This is a collection of demo subroutines, each demo is run from Main.
' For a chip with less Prog. memory/RAM, enable just a few demo's.
' Using Commands... see Sub CmdDemo1.
' Ask on the forum for help or feedback any comments/issues.

' Note: As this demo is quite "busy" exercising the library functions, there may be
'       some anomalies experienced with the compiler & or specific chip.
'       Due to the modular structure it is easy to disable specific demo's in Main:

'Set below configuration first for #chip, pins, display etc...
'*******************************************************

#Include <tm1637_oem_lib.h>

#OPTION explicit
'---PIC12F683---
'#chip 12F683, 8
'#Define TM1637_CLK GPIO.0
'#Define TM1637_DIO GPIO.1

'---Mega2560---
'#Chip mega2560,16
'#Define TM1638_DIO PortD.0
'#Define TM1638_CLK PortD.1

'---PIC16F1829---
#chip 16F1829,8
#config Osc = Int
#define TM1637_CLK PortB.4
#define TM1637_DIO PortB.5
'(Port Dir is set in include file)


Dim Value as Long   ' number to display
Dim lp1 as Byte       ' Loops etc
Dim lp2 as Byte
'Dim tmp1 as byte     ' Temp var
'Dim tmp2 as Byte
Dim cnt1 as Byte     ' count
Dim cnt2 as Word     ' count
Dim Mybuf1(TM_DispLen+1+TM_LEDs) as Byte  ' user buffer if needed.



'  Configuration constants: (If not set will be default value)
'-------------------------------------------------------------
#Define TM_DispLen 6      ' Number of digits on display (default 6)
#Define TM_6dReMap On    ' Remap digits for 6d module with swapped com pins (default Off)
'#Define Snd_SEQ           ' Enable sequential register addressing mode-see pdf help (default Fixed)
'#Define KeyMap ButnMap2   ' Only used for weird datasheet map. (default ButnMap1)
'#Define TM_LEDs 2         ' Use when TM_DispLen=4, TM_DispBuf(5 & 6) for other LED's  (default 0)
'#Define TMdly 5          ' Modify clk <-> DIO delay us -eg. if need a shorter write message. (default 10)
'---------------------------
'#Define NackCount         ' Enable NACK counts (for testing comm issues)  (default no count)
'#Define NoAck             ' Ignore ACK state.  (default ack test enabled)
'NackCnt = 0               ' need to ensure clear if counting NACK's
'-------------------------------------------------------------

Value = 314159

'-------------------
' Most of the demo subs will work with 4d or 6d module (just set TM_DispLen & TM_6dReMap appropriately)
' & some other values where needed.    Refer PDF Help document for detailed information.
' Using Commands... see Sub CmdDemo1.

wait 1 ms
  TestAll_1
  tmCLRdisp : tmCLRbuf

'   comment/un-comment lines in main to run/hide demos
'===========================================================
Main:

  tmCLRdisp : tmCLRbuf  : Wait 500 ms
  OverRange : Wait 500 ms

 '---Using Commands---
'  CmdDemo1       ' <-- Uncomment to run this demo

'  FlashDigs  '< TESTING....
  RndFill_3 : RndFill_1 : Scroll_1 : ScrollArray : Wave1 : RedEye1
  FlashDigs
  BarGraph1 ' using 7-seg display
' BarGraph2 ' using linear LED bargraph (not the 7-seg display)
  Count_2
  Bright_Test1 ': Bright_Test2
  tmCLRdisp : tmCLRbuf
'   Buffers_2 'additional display buffer
'   TestFlashKey
'   Disp_KeyVal_6d : Disp_KeyVal_6d : Disp_KeyVal_6d : Disp_KeyVal_6d
'---Demo2---
'  disp2Val4d : Disp_KeyVal_4d    ' 4 digit test
'  disp2Val6d : Disp_KeyVal_6d   ' 6 digit test
'  NackCounter
Goto Main
End
'===========================================================

'Set all segments
Sub TestAll_1
    For Cnt1 = 1 to TM_DispLen
      tmSndDig (255,Cnt1)   '    "888888" & all dp's
    Next
     Wait 1 s
End Sub

Sub OverRange
    For Cnt1 = 1 to TM_DispLen
      tmSegBuf(Cnt1,7,On)   '    "------"
    Next
     tmSndBuf
     Wait 1 s
End Sub

' Count bad ACK's (Use for testing)
Sub NackCounter '  use  #Define AckCount to enable counter
  tmSndStr "NackCnt"
  wait 900 ms
  tmSndDec(NackCnt)
  wait 2 s
End Sub


' Display 2 count up numbers
Sub Count_2
tmCLRbuf : tmCLRdisp
Dim UpCnt1, UpCnt2, Count2 as Byte
Dim Count1, Count0 as Word
        TM_dpPos = 3
        UpCnt1 = 0 : UpCnt2 = 0 : Count1 = 0 : Count2 = 0 : Count0 = 0
  Do while Count0 < 301
         UpCnt1++
         UpCnt2++

        If UpCnt1 > 20 Then       ' every xx ms
          Count1++
          UpCnt1 = 0 : Count0++
          tmDecBuf(Count1,6,3)    ' Set digits 456
          tmSndBuf(6,3 )
       End If
          TM_Blank0 = Off        ' just for hex
        If UpCnt2 > 200 Then     ' every xx ms
          Count2++
          UpCnt2 = 0
          tmHexBuf(Count2,2,2)   ' Set digits 12
          tmSndBuf(2,2 )
       End If
          TM_Blank0 = On
         If Count1 > 999 then Count1 = 0
         If Count2 > 200 then Count2 = 0
         wait 500 us
  Loop
        TM_dpPos = 0
End Sub


' Horzontal Bargraph 2 ch on 7Seg disp.
Sub BarGraph1
Dim Seg1_2, Fillseg as Bit
Dim Inval1, Inval2, DigitNum, BGdigit as Byte
  tmCLRbuf
  FillSeg = On

 For Cnt1 = 0 to TM_DispLen *4' 24  '< set some values for BG
  Inval1 = Cnt1
  Inval2 = Cnt1 / 2
'  If Inval1 > TM_DispLen *2 then Inval1 = TM_DispLen *2
  If Inval1 > TM_DispLen *2 then Inval1 = (TM_DispLen *4)-Inval1

' Upper bargraph
      DigitNum = 1
    For Lp1 = 1 to TM_DispLen * 2 ' Segments
      If Lp1 > Inval1 then Exit For
      If FillSeg = 0 then LP1 = Inval1
        Seg1_2 =  (Lp1+1)-((Lp1+1)/2*2)   ' 1 of 2 segments per digit
      If Seg1_2 = 0 then
        BGdigit = 32
      Else
        BGdigit = 34
        If FillSeg = 0 then BGdigit = 2
      End If
        TM_DispBuf((Lp1/2)+(Lp1 MOD 2)) = BGdigit ' (div2 roundup)
    Next

' Lower bargraph
      DigitNum = 1
    For Lp1 = 1 to TM_DispLen * 2 ' Segments
      If Lp1 > Inval2 then Exit For
      If FillSeg = 0 then LP1 = Inval2
        Seg1_2 =  (Lp1+1)-((Lp1+1)/2*2)
      If Seg1_2 = 0 then
        BGdigit = 16
      Else
        BGdigit = 20
        If FillSeg = 0 then BGdigit = 4
      End If
        TM_DispBuf((Lp1/2)+(Lp1 MOD 2)) = TM_DispBuf((Lp1/2)+(Lp1 MOD 2)) or BGdigit
    Next

      tmSndBuf
      Wait 80 ms
      tmClrBuf
 Next
      Wait 1 s
End Sub


'Set segments on LED linear Bargraph tmSegBar(Digit,Segment,Length,[Fill])
Sub BarGraph2'           (on 7 seg display will just see segments set)
    tmCLRbuf : tmSndBuf
 '   TM_DispBuf(6) = 240 ' set discrete LED's (segs 5 - 8)
    tmSndBuf
    Wait 600 ms
    TM_BGlen = 12     ' BarGraph length
  For Lp1 = 0 to 12  ' < digit values
    tmSegBar(5,Lp1,Off)   ' fill
'    tmSndBuf
    Wait 500 ms
  Next

      tmSegBar(5,4)
      Wait 500 ms
      tmSegBar(5,0)
      Wait 500 ms
      tmSegBar(5,3)
      Wait 500 ms
      tmSegBar(5,2)
      Wait 500 ms
      tmSegBar(5,1)
      Wait 500 ms
      tmSegBar(5,12)
      Wait 500 ms
      tmSegBar(5,0)

    Wait 1 s : tmCLRbuf(6,1) : tmSndBuf (6,1) ' clear digit 6

For Lp1 = 0 to 12
    tmSegBar(5,Lp1,On)  ' No Fill
'    tmSndBuf
    Wait 500 ms
  Next
    Wait 1 s

For Lp1 = 0 to 24
    Lp2 = Lp1 : If Lp1 > 12 then Lp2 = (24) - Lp1
    tmSegBar(5,Lp2,On)  ' No Fill
'    tmSndBuf
    Wait 500 ms
  Next
    Wait 1 s

End Sub




'=========================================================
'Flashing digits:
Sub FlashDigs   ' (The loop just simulates your main program loop)
'Dim Count1
' Flash_Display
tmCLRbuf : tmCLRdisp
TM_scroll = off
    tmSndStr("FlASH ")   '< This should be ok on 4 digit disp.?
'    tmSndStr("FlSH")    '< 4 digit disp.
    cnt1 = 5
    Wait 500 ms
    Do while cnt1 > 0
     tmFlashDsp
    cnt1--
    Loop
    Wait 1 s

' Flash_Digit
    cnt1 = 5
    Do while cnt1 > 0
     tmFlashDig(1)
    cnt1--
    Loop
    Wait 1 s

' Flash_Digits
    cnt1 = 5
    Do while cnt1 > 0
     tmFlashDig(3,3)
    cnt1--
    Loop
    Wait 1 s

' Flash_Segment
    cnt1 = 5
    Do while cnt1 > 0
     tmFlashSeg(3,8)   ' segment 8 is dp - (seg is toggled)
    cnt1--
    Loop
    Wait 1 s

End Sub

' Using additional display buffer
Sub Buffers_2
tmSndStr "Error ",Mybuf1,Off
'    For LP1 = 1 to TM_DispLen+1 : Mybuf1(LP1) = TM_DispBuf(LP1) : Next
    tmSndStr("AlErt ",,Off)
    For LP1 = 1 to 5
      tmSndBuf(,,Mybuf1)
      Wait 500 ms
      tmSndBuf
      Wait 850 ms
    Next
End Sub

' test capture keypress during flash
Sub TestFlashKey
    TM_KeyChk = On
    TM_scroll = On
     tmSndStr "press butn during flash"
    TM_scroll = Off
    tmSndStr "Error.5"
    Wait 1 s
    cnt1 = 10
    Do while Cnt1 > 0       '< simulates main program loop
     tmFlashDig(TM_DispLen)
     If TM_ButnVal1 <> 0 then Msg1 ' stop flashing if button pressed
     cnt1-- ': if cnt1 > 100 then cnt1 = 0
    Loop

End Sub

Sub Msg1'  called from Sub TestFlashKey
    tmCLRbuf
    tmSndStr "Btn"
    tmSndDec(TM_ButnVal1,TM_DispLen,2)
    TM_ButnVal1 = 0 : cnt1 = 1
    Wait 2 s
End Sub
'---------------------------------------------------------


'Demo2
'=========================================================
'disp2Val4d : Disp_KeyVal_4d : Bright_Test1
'disp2Val6d : Disp_KeyVal_6d : Bright_Test1

'Display 2 values
Sub disp2Val4d
    tmDecBuf(96,2,2)
    tmDecBuf(9,4,1)
    tmChrBuf "_", 3
    tmSndBuf      '   "96_9"
End Sub

'Display 2 values
Sub disp2Val6d
    tmDecBuf(965,3,3)
    tmDecBuf(91,6,2)
    tmChrBuf "_", 4
    tmSndBuf       '   "965_91"
End Sub

' Read keys & display raw key val & button val
Sub Disp_KeyVal_4d
    tmGetKey                '< Scan for keypress
    tmSndStr "bn"
    tmDecBuf (TM_ButnVal1)
    tmSndBuf                 ' eg "bn09"
    Wait 200 ms
End Sub

Sub Disp_KeyVal_6d

    tmGetKey                '< Scan for keypress
    tmDecBuf (TM_KeyVal,3,3)
    tmDecBuf (TM_ButnVal1,6,2)
    tmSndBuf                 ' eg "239 09"
    Wait 200 ms
End Sub

' Using message send
Sub Bright_Test1
  tmCLRbuf : tmCLRdisp
Dim Rev as Bit
    TM_Bright = 0 : Rev = 0
    tmSndStr("brt")
      Wait 1 s
  Do
'    tmctrlSnd
    tmSndDec(TM_Bright,TM_DispLen,1)
    If Rev = 0 then TM_Bright++
    If Rev = 1 then TM_Bright--
 // If TM_Bright > 6 And Rev = 0 then Rev = 1 '< Compile issue W-ATMEL 2022.10.04
    If TM_Bright > 6 And Not Rev then Rev = 1

    wait 300 ms
  Loop while TM_Bright <> 0
End Sub

' Using ctrl send
Sub Bright_Test2
Dim Rev as Bit
    TM_Bright = 0 : Rev = 0
    TM_dpPos = 3
  tmdecBuf(696969)
  tmSndBuf
      Wait 1 s
  Do
    tmctrlSnd
    If Rev = 0 then TM_Bright++
    If Rev = 1 then TM_Bright--
//  If TM_Bright > 6 and Rev = 0 then Rev = 1
    If TM_Bright > 6 And Not Rev then Rev = 1
    wait 200 ms
  Loop while TM_Bright <> 0
End Sub

' Set Segments pattern
Sub SetSeg2
Dim Digit, Segment as byte
    tmCLRbuf : tmCLRdisp
    tmSegBuf(3,1,On,,On)
    wait 400 ms
    tmSegBuf(3,2,On,,On)
    wait 400 ms
    tmSegBuf(3,3,On,,On)
    wait 500 ms
    tmSegBuf(3,4,On,,On)
    wait 800 ms

    Digit = 4
    Segment = 1
    tmSegBuf(Digit,Segment,On)
    wait 400 ms
    Segment = 2
    tmSegBuf(Digit,Segment,On)
    wait 400 ms
    Segment = 3
    tmSegBuf(Digit,Segment,On)
    wait 500 ms
    Segment = 4
    tmSegBuf(Digit,Segment,On)
    tmSndBuf

    wait 2 s
    tmCLRbuf : tmCLRdisp
End sub

' fill digits with random decimal value
Sub RndFill_1
    cnt1 = 4 : TM_dpPos = 3
    Randomize
 Do while cnt1 > 0
      cnt2 = 20
  Do while cnt2 > 0
    For Lp1 = 1 to TM_DispLen/2
      tmDecBuf(Random/28,Lp1,1)
    Next
     tmSndBuf
     Wait 25 ms
     cnt2--
  Loop
    cnt1--
    Wait 550 ms

      cnt2 = 20
  Do while cnt2 > 0
    For Lp1 = (TM_DispLen/2)+1 to TM_DispLen
      tmDecBuf(Random/28,Lp1,1)
    Next
     tmSndBuf
     Wait 25 ms
     cnt2--
  Loop
    cnt1--
    Wait 550 ms

 Loop
   wait 2 s
End Sub

' Fill segments random
Sub RndFill_3
    tmCLRbuf : tmCLRdisp
    cnt2 = 32
    Randomize
 Do while cnt2 > 0
  For Lp1 = 1 to 6
    If TM_DispBuf(Lp1) < 255 then tmSegBuf(Lp1, Random/31, On)
  Next
    tmSndBuf
    cnt2--
    Wait 200 ms
 Loop
   wait 500 ms
End Sub

'Scroll text on display
Sub Scroll_1
    TM_Scroll = On : TM_ScrollRate = 50
    tmClrbuf
     tmSndStr "GCBASIC 7seg_Display      "
     tmSndBuf
     Wait 1 s

    tmClrbuf ': tmClrDisp
     tmSndStr "Error.5 bad_input  CHECK CABlE"
     tmSndBuf
     Wait 1 s

    tmClrbuf ': tmClrDisp
     tmSndStr "Error.3 no_Fan  CASE =75°C"
     tmSndBuf
     Wait 1 s

    tmClrbuf ': tmClrDisp
     tmSndStr "Scrolling A long ""string""    can-be good_fun to read      "
     tmSndBuf
     Wait 1 s

    tmClrbuf ': tmClrDisp
     tmSndStr "Special chr . . .    "" = _ ~ | ) ( ° ' - ?"
     tmSndBuf
     Wait 1 s
    TM_Scroll = Off
End Sub


' Scroll Array of values
Sub ScrollArray
Dim Array1 (11) as byte
    TM_scroll = On : TM_ScrollRate = 30
    tmCLRbuf
     Array1 = 112,64,64,64,57,9, 9, 9, 9,15
    tmScrlBuf(Array1)
     Array1 =  64,64,68, 8, 8,8,12,64,64,66
    tmScrlBuf(Array1)
     Array1 =   1, 1, 1,56,14,1,1,68,8,8
    tmScrlBuf(Array1)
    TM_scroll = Off
End Sub

' Scrolling characters - 3bit_scope
Sub Wave1
    TM_scroll = On
    tmClrbuf
     tmSndStr "______-~-__--~~--__-~-_-~-_-~-__-~~-__-~~-__-~~-___.___~~~~"
     tmSndBuf
'     tmSndStr "~~~~L___j~~~~L__j~~L__j~L_j~Lj~Lj~Lj~Lj~L__R~~~Lj~~~L__j~L_."
     tmSndStr "~~~~l___j~~~~l__j~~l__j~l_j~l_j~l_j~~lj~~lj~~l__R~~~lj~~~l__j~l______      "
     tmSndBuf
      Wait 1 s
    tmClrDisp
    TM_scroll = Off
End Sub

Sub RedEye1      'Cylon_Kitt
Dim xms as Byte
Dim UpDn as Bit
    xms = 50 : UpDn = 1 : Cnt1 = 8
  Do While Cnt1 > 0
    For Lp1 = 1 to TM_DispLen      ' 6 digits
      If UpDn = 1 then
        tmSndDig(16,Lp1)
        Wait xms ms
        tmSndDig(4,Lp1)
        Wait xms ms
        tmSndDig(0,Lp1)
      Else
        tmSndDig(4,(TM_DispLen+1)-Lp1)
        Wait xms ms
        tmSndDig(16,(TM_DispLen+1)-Lp1)
        Wait xms ms
        tmSndDig(0,(TM_DispLen+1)-Lp1)
     End If
   Next
     UpDn = !UpDn
     cnt1--
  Loop
End Sub
'---------------------------------------------------------


'   Using Commands
'=========================================================
' Using Default parameters
Sub CmdDemo1
    tmSndDec 1234    ' Display value as decimal
     Wait 1 s
    tmSndHex 1234    ' Display as hex
     Wait 1 s
    tmSndHex (456)  ' parameter brackets are optional (but usefull with multiple)
     Wait 1 s
    tmSndStr "TEST1234" ' Display string (will display what fits)
     Wait 1 s
    tmSndChr("b", 1) ' Display single chr at position 1
     Wait 1 s
    TM_scroll = On    ' Turn on text scrolling
    tmSndStr "Long string display"   ' works better on 6d display
     Wait 1 s
    TM_scroll = Off
  ' Set Decimal Point
    TM_dpPos = TM_DispLen - 2    ' dp at position 2 (set = 0 to disable)
    tmSndDec 1234   ' "12.34" displayed
     Wait 1 s

  ' Show Leading Zero
    TM_Blank0 = Off  ' Enable leading zeros
    tmSndDec 123     ' "0123" displayed or "000123" on 6d disp.
     Wait 1 s
     TM_dpPos = 0
  ' Control Leading Zeros
    tmSndDec(23,,3)  ' " 023"  (parameter 2 is default value)
     TM_Blank0 = On
     Wait 1 s

  'Set  segments
    tmCLRdisp : tmCLRbuf
    tmSegBuf(2, 1, On)  ' Digit 2, Segment 1
    tmSegBuf(1, 1, On)  ' Digit 1, Segment 1
    tmsndbuf
    Wait 2 s

  '               Optional parameters
  '=========================================================
  ' Using command Optional parameters - [options override default]
  '     tmSndDec (Value, Position, Num digits)    Value, option1, option2
  '                           ___________
  '     Buffer/Display       |1 2 3 4 5 6|
  '     tmSndDec (186, 5, 3) |    1 8 6  |

    tmSndDec (70, 4, 2)    ' display value, at position 4, send 2 digits
     Wait 1 s
     TM_dpPos = 2
    tmSndDec (12, 2, 2)    ' Result "12.70"  or  "12.70  " on 6d
     Wait 1 s
    TM_dpPos = 0           ' dp Off

    tmCLRdisp : tmCLRbuf
    tmSndHex (254, 3, 2)   '
     Wait 400 ms
     tmSndChr("h", 4)        ' Result " FEh"
     Wait 1 s

  ' Control Leading zero
    tmCLRdisp : tmCLRbuf
    TM_Blank0 = Off         ' Enable leading zeros
    tmSndHex (255, 4, 3)    ' Result " 0FF"
    Wait 1 s
    tmSndHex (2047, 4, 3)   ' Result " 7FF"
    TM_Blank0 = On

  ' Using the Buffer
    tmDecBuf(1234)
    tmSndBuf                ' Result "1234"
    Wait 1 s

    tmDecBuf(12,2,2)
    tmDecBuf(4,4,1)
    tmSegBuf(4, 4, ON)      ' (digit 4, segment 4, on)
    tmSndBuf                ' Result "12_4"
    Wait 1 s

    TM_dpPos = 1
    tmDecBuf(Value)
    tmSndBuf                ' Result "3.14159"
    Wait 1 s

  'User Buffer                  ' See near start of this demo file to "dim the buffer array"
    tmDecBuf(25,2,2,Mybuf1)
    tmDecBuf(40,4,2,Mybuf1)
    tmSndBuf(Mybuf1)
    Wait 1 s
    tmSndBuf
    Wait 1 s
    tmSndBuf(Mybuf1)
    Wait 2 s

End Sub
