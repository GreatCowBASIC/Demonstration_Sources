
' TM1638 7-Segment OEM display library Demonstration - For GCBASIC
' This is a collection of demo subroutines, each demo is run from Main.
' for chip with less Prog. memory/RAM, enable just a few demo's.
' Using Commands... see Sub CmdDemo1.
' Ask on the forum for help or feedback any comments/issues.
' Note: As this demo is quite "busy" exercising the library functions, there may be
'       some anomalies experienced with the compiler & or specific chip.
'       Due to the modular structure it is easy to disable specific demo's in Main:

'Set below configuration first for #chip, pins, display etc...
'*******************************************************

#Include <TM1638_OEM_Lib.h>

#OPTION explicit

'---Mega328p---
'#chip mega328p, 16

'---Mega2560---
#Chip mega2560,16
#Define TM1638_DIO PortD.0
#Define TM1638_CLK PortD.1
#Define TM1638_STB1 PortD.2
'*/

 '---PIC16F1829---
'#Chip 16F1829,8
'#Config Osc = Int
'#Define TM1638_CLK PortB.4
'#Define TM1638_DIO PortB.5
'#Define TM1638_STB1 PortB.6
'*/

'#Define TM1638_STB2 PortB.1  ' Enable to use multiple boards, use 'TM_STB = n' to set
'#Define TM1638_STB3 PortB.2
'#Define TM1638_STB4 PortB.3
'(Port pin Dir is set in lib file)


'  Configuration constants: enable relavent #Define for your board
'-------------------------------------------------------------
#Define TM_DispLen 8      ' Number of digits on display
#Define Com_Cathode       ' CC Display up to 8x 7-seg digits (This is default if not set)
'#Define Com_Anode         ' CA Display up to 10x 7-seg digits
'#Define RevDig            ' Reverse display digits (need for rev wired display boards)
#Define Butn_Map1         ' Remap ButnValue as per Table Butn_Map1 (if not set create your own)
'#Define Butn_Map2         ' Remap ButnValue as per Table Butn_Map2
#Define TM_LEDs 2         ' Use when eg. TM_DispLen=8, TM_DispBuf(9 & 10) for other LED's
'#Define TMdly 2           ' Modify clk <-> DIO delay us (if need a shorter write message)

Dim Value as Long   ' number to display
Dim lp1, lp2, cnt1, cnt2 as Byte       ' Loops etc
Dim Mybuf1(TM_DispLen +1 +TM_LEDs) as Byte  ' additional display buffer

' Notes
'-------------------------------------------------------------
' Com_Anode & RevDig needed for "QYF-TM1638" board.
' Butn_Map1 is needed for "LED&KEY" board. (Com_Cathode is default)
' Other boards you will need to test(please feedback detail).
' Sequential/Fixed adress mode cannot be user selected due to even/odd registers structure
'-------------------------------------------------------------

' Set some global values
'-----------------------
  Value = 31415926
  cnt1 = 0 : cnt2 = 0
  TM_STB = 1  '< use TM Display 1,  1 is default (so don't need to set)
  TM_FlashRate = 75
  TM_Disp = On    ' Default is On
'-----------------------

  TestAll_1    ' all 8 segments on all digits
  tmCLRbuf : tmCLRdisp
  Wait 1 s


'   comment/un-comment lines in main to run/hide demos
'===========================================================
Main:
' Demo
    tmCLRbuf : tmCLRdisp : Wait 200 ms

 '---Using Commands---
'   CmdDemo1

    SetLED   'set LEDs demo (also set in ShowButtons_1)
    wait 400 ms

    Count_2   '<- Here just for testing

    Scroll_1 : ScrollArray : RndFill_3 : RndFill_1 : Wave1 : RedEye1
    tmSndStr("FlASH ")
    Flash_Disp ': Buffers_2
    Flash_Digs
    BarGraph1
//   BarGraph2  ' This is for linear LED bargraph (can see which 7-seg's used)
    Count_2
    Bright_Test1 ' : Bright_Test2
    tmCLRdisp : tmCLRbuf

    OverRange : tmCLRbuf : tmCLRdisp : wait 500 ms
    BarGraph2
    tmCLRbuf : tmCLRdisp : wait 500 ms
    ShowButtons_1  '<- [disable to run ShowButtons_2]
    ShowButtons_2   ' Display Raw Key values - hex
'    TMdisp_n ' Use multiple TM1638 displays (#define STBn first)

Goto Main
End
'===========================================================

Sub SetLED
     tmCLRdisp
     For Cnt1 = 1 to 8 : tmSetLED (Cnt1, Off) : Next

    For Cnt1 = 1 to 8 '16
      tmSetLED (Cnt1, On)
      Wait 125 ms
    Next
    For Cnt1 = 1 to 8
      tmSetLED (Cnt1, Off)
      Wait 125 ms
    Next
End Sub
'    Display button(s) pressed
Sub  ShowButtons_1
Dim LED_n1, LED_n2 as byte
     tmSndStr "press"
     wait 1 s
     tmSndStr "button.."
     Wait 2 s
     tmCLRbuf
     For Cnt1 = 1 to 8 : tmSetLED (Cnt1, Off) : Next ' clear  LED's
'rpt1:
   Do
     tmGetKey

     ' clear  LED's
     If LED_n1 <> TM_ButnVal1 then tmSetLED (LED_n1, Off)
     If LED_n2 <> TM_ButnVal2 then tmSetLED (LED_n2, Off)
     ' Set  LED's
     If TM_ButnVal1 > 0 then tmSetLED (TM_ButnVal1, On)
     If TM_ButnVal2 > 0 then tmSetLED (TM_ButnVal2, On)
        LED_n1 = TM_ButnVal1 : LED_n2 = TM_ButnVal2
     ' Set dp's
     If TM_ButnVal1 <> 0 then TM_DispBuf(1) = 128 Else TM_DispBuf(1) = 0
     If TM_ButnVal2 <> 0 then TM_DispBuf(2) = 128 Else TM_DispBuf(2) = 0
       ' Set digits
        tmDecBuf(TM_ButnVal1,TM_DispLen-3,2)
        tmDecBuf(TM_ButnVal2,TM_DispLen,2)
        tmSndBuf
     wait 100 ms
   Loop
'  Goto rpt1
End Sub

'    Display the raw keyval (hex)
Sub  ShowButtons_2
      TM_Blank0 = Off
'rpt2:
   Do
      tmGetKey
      tmHexBuf(TM_KeyVal(1),2,2)
      tmHexBuf(TM_KeyVal(2),4,2)
      tmHexBuf(TM_KeyVal(3),6,2)
      tmHexBuf(TM_KeyVal(4),8,2)
'        tmSegBuf(2,8,On)
      TM_DispBuf(2).7 = On  ' DP
      TM_DispBuf(4).7 = On
      TM_DispBuf(6).7 = On
      tmSndBuf
      wait 100 ms
   Loop
'    Goto rpt2
End Sub

'    Indicates the button(s) pressed
Sub  ShowButtons_3
      tmSndStr "PressBtn"
      Wait 2 s
'rpt3:
   Do
     tmGetKey
     tmCLRbuf
     For Cnt1 = 1 to 8 : tmSetLED (Cnt1, Off) : Next ' clear  LED's
     If TM_ButnVal1 > 0 then tmSetLED (TM_ButnVal1, On)
     If TM_ButnVal2 > 0 then tmSetLED (TM_ButnVal2, On)
     TM_DispBuf(TM_ButnVal1) = 8
     TM_DispBuf(TM_ButnVal2) = 8
     tmSndBuf
     wait 50 ms
   Loop
'     Goto rpt3
End Sub

' How to use multiple TM1638 displays
' Only set TM_STB = n if #defined TM1638_STBn Portx.x (else unexpected may result)
Sub TMdisp_n
' First must define the ports to use:  #Define TM1638_STB2 #Define TM1638_STB3 ...
' CLK, DIO are connect to all TMdisp, STBn to each disp.

    'Just select the strobe pin before send data or read keys.
    TM_STB = 1
    tmSndStr "Board 1"
'    TM_STB = 2
'    tmSndStr "Board 2"
'    TM_STB = 3
'    tmSndStr "Board 3"
'    TM_STB = 4
'    tmSndStr "Board 4"
      Wait 1 s
End Sub

Sub StrobePulse
'    for logic probe testing   only for board 1
     Wait 500 us
     set TM1638_STB1 1
     set TM1638_STB1 0
     Wait 100 us
     set TM1638_STB1 1
     Wait 500 us
End Sub

' Set all TM1638 registers - 1 bit at a time use to test segments/digits order
Sub SetAllSegs                          'some boards are reverse wired or comAnode
      setTM1638_STB 0           ' < Assumes TM_STB = n
          TM1638_WrVal (TMcmd2) 'Fixed. addr mode
      setTM1638_STB 1
          Wait TMdly us

    For TMlp1 = 1 to 16
       setTM1638_STB 0
       TM1638_WrVal (TMaddr + TMlp1 - 1)
       Value = 0 : Cnt2 = 1
      For Cnt1 = 1 to 8
        Value = Value + Cnt2
        TM1638_WrVal (Value)
        Cnt2 = Cnt2 * 2
        wait 400 ms
      Next
       setTM1638_STB 1
    Next
End Sub

' Set all TM1638 registers sequential mode
Sub SetAllRegs(Value)          ' Set 16 TM1638 registers
      setTM1638_STB 0           ' < Assumes TM_STB = n
        TM1638_WrVal (TMcmd1) 'seq. addr mode
      setTM1638_STB 1
        Wait TMdly us
      setTM1638_STB 0
        TM1638_WrVal (TMaddr)
    For TMlp1 = 1 to 16
      TM1638_WrVal (Value)
      wait 400 ms
    Next
      setTM1638_STB 1
End Sub

'Set all digits FF (all segments on)
Sub TestAll_1
    For Cnt1 = 1 to TM_DispLen
      tmSndDig (255,Cnt1)   '    "888888"
    Next
     Wait 1 s
End Sub

Sub OverRange
    For Cnt1 = 1 to TM_DispLen
      tmSegBuf(Cnt1,7,On)   '    "------"
    Next
     tmSndBuf
     Wait 1 s
End Sub




' Display 2 count up numbers
Sub Count_2
Dim UpCnt1, UpCnt2, Count2 as Byte
Dim Count1, Count0 as Word
        tmCLRbuf : tmCLRdisp
        UpCnt1 = 0 : UpCnt2 = 0 : Count0 = 0 : Count1 = 0 : Count2 = 0 :
        TM_dpPos = TM_DispLen / 2

  Do while Count0 < 301
        UpCnt1++
        UpCnt2++

     If UpCnt1 > 20 Then       ' every xx ms
        Count1++
        UpCnt1 = 0 : Count0++
        tmDecBuf(Count1,TM_DispLen,3)    ' Set digits 456
        tmSndBuf(TM_DispLen,3)
     End If

        TM_Blank0 = Off        ' just for hex
     If UpCnt2 > 200 Then     ' every xx ms
        Count2++
        UpCnt2 = 0
        tmHexBuf(Count2,2,2)   ' Set digits 12
        tmSndBuf(2,2 )
     End If
        TM_Blank0 = On

       If Count1 > 999 then Count1 = 0
       If Count2 > 200 then Count2 = 0
       wait 500 us
  Loop
      TM_dpPos = 0

End Sub


' Horzontal Bargraph 2 channel on 7-Seg disp.
Sub BarGraph1
Dim Seg1_2, Fillseg as Bit
Dim Inval1, Inval2, DigitNum, BGdigit as Byte
      tmCLRbuf
      FillSeg = On

  For Cnt1 = 0 to TM_DispLen *4' 24  '< set some values for BG
      Inval1 = Cnt1
      Inval2 = Cnt1 / 2
'  If Inval1 > TM_DispLen *2 then Inval1 = TM_DispLen *2
    If Inval1 > TM_DispLen *2 then Inval1 = (TM_DispLen *4)-Inval1

' Upper bargraph (7-seg)
      DigitNum = 1
    For Lp1 = 1 to TM_DispLen * 2 ' Segments
      If Lp1 > Inval1 then Exit For
      If FillSeg = 0 then LP1 = Inval1
        Seg1_2 =  (Lp1+1)-((Lp1+1)/2*2)   ' 1 of 2 segments per digit
      If Seg1_2 = 0 then
        BGdigit = 32
      Else
        BGdigit = 34
        If FillSeg = 0 then BGdigit = 2
      End If
        TM_DispBuf((Lp1/2)+(Lp1 MOD 2)) = BGdigit ' (div2 roundup)
    Next

' Lower bargraph (7-seg)
      DigitNum = 1
    For Lp1 = 1 to TM_DispLen * 2 ' Segments
      If Lp1 > Inval2 then Exit For
      If FillSeg = 0 then LP1 = Inval2
        Seg1_2 =  (Lp1+1)-((Lp1+1)/2*2)
      If Seg1_2 = 0 then
        BGdigit = 16
      Else
        BGdigit = 20
        If FillSeg = 0 then BGdigit = 4
      End If
        TM_DispBuf((Lp1/2)+(Lp1 MOD 2)) = TM_DispBuf((Lp1/2)+(Lp1 MOD 2)) or BGdigit
    Next

      tmSndBuf
      Wait 80 ms
      tmClrBuf
 Next
      Wait 1 s
End Sub

 ' This is not Fully Tested yet with TM1638 - Likely will need work (ported from TM1637_OEM_lib)
'Set segments on LED linear Bargraph tmSegBar(Digit,Segment,[Fill])
Sub BarGraph2'           (on 7 seg display will just see the segments)
Dim BG1, rpt, Rnd1, Rndp as Byte
    tmCLRbuf : tmSndBuf : tmCLRdisp

    Wait 600 ms
    TM_BGlen = 8     ' BarGraph length
    BG1 = 9
    Randomize

        Rndp = 1 'init set previous rnd n
    For Lp1 = 1 to 25   ' doit 10 times
         Rnd1 = Random/35+1
         If Rndp > Rnd1 then rpt = Rndp - Rnd1+1
         If Rndp < Rnd1 then rpt = Rnd1 - Rndp+1
         Cnt1 = Rndp
        Repeat rpt
          tmSegBar(BG1,Cnt1)
          wait 10 ms
          If Rndp < Rnd1 then Cnt1++
          If Rndp > Rnd1 then Cnt1--
        End repeat
          Rndp = Rnd1
        Wait 150 ms
    Next
        tmSegBar(Cnt1,0) ' Clear bargraph
        Wait 500 ms

/*  ' Usable code...
  For Lp1 = 0 to 8 '16  ' < digit values
    tmSegBar(BG1,Lp1,Off)   ' no fill
    Wait 50 ms
  Next

    For Lp1 = 1 to 10   ' doit 10 times
        Cnt2 = Random/31
        For Lp2 = Cnt1 to Cnt2 step nn
          tmSegBar(BG1,Lp2)
          wait 10 ms
        Next
          Cnt1 = Cnt2
          If Cnt1 > Cnt2 then nn = -1
        Wait 100 ms
    Next
*/

/*
      tmSegBar(Cnt1,4)  ' dign, seg4, fill=on
      Wait 500 ms
      tmSegBar(Cnt1,0) ' Clear bargraph
      Wait 500 ms

*/


/*
   For Lp1 = 0 to 8  '16
     tmSegBar(BG1,Lp1,On)  ' No Fill
'    tmSndBuf
     Wait 10 ms
   Next
     Wait 1 s

   For Lp1 = 0 to 8  '16
     Lp2 = Lp1 : If Lp1 > 8 then Lp2 = (16) - Lp1
     tmSegBar(BG1,Lp2,On)  ' No Fill
     Wait 50 ms
   Next
    Wait 1 s
*/
End Sub




'=========================================================
'Flashing digits:
   ' (The loop just simulates your main program loop)
Sub Flash_Disp
'Dim Count1
' Flash_Display
'tmCLRbuf : tmCLRdisp
'TM_scroll = off
    'tmSndStr("FlASH ")
    cnt1 = 4
    Wait 500 ms
    Do while cnt1 > 0
     tmFlashDsp
    cnt1--
    Loop
    Wait 1 s
End Sub

Sub Flash_Digs
' Flash_Digit
    cnt1 = 4
    Do while cnt1 > 0
     tmFlashDig(1)
    cnt1--
    Loop
    Wait 1 s

' Flash_Digits
    cnt1 = 4
    Do while cnt1 > 0
     tmFlashDig(3,3)
    cnt1--
    Loop
    Wait 1 s

' Flash_Segment
    cnt1 = 4
    Do while cnt1 > 0
     tmFlashSeg(5,8)   ' segment 8 is dp - (seg is toggled)
    cnt1--
    Loop
    Wait 1 s

End Sub

Sub Buffers_2
tmSndStr "Error ",Mybuf1,Off
'    For LP1 = 1 to TM_DispLen+1 : Mybuf1(LP1) = TM_DispBuf(LP1) : Next
    tmSndStr("AlErt ",,Off)
    For LP1 = 1 to 5
      tmSndBuf(,,Mybuf1)
      Wait 500 ms
      tmSndBuf
      Wait 850 ms
    Next
End Sub

' test capture keypress during flash
Sub TestFlashKey
    TM_KeyChk = On
    TM_scroll = On
     tmSndStr "press butn during flash"
    TM_scroll = Off
    tmSndStr "Error.5"
    Wait 1 s
    cnt1 = 10
    Do while Cnt1 > 0       '< simulates main program loop
     tmFlashDig(TM_DispLen)
     If TM_ButnVal1 <> 0 then Msg1 ' stop flashing if button pressed
     cnt1-- ': if cnt1 > 100 then cnt1 = 0
    Loop

End Sub

Sub Msg1'  called from Sub TestFlashKey
    tmCLRbuf
    tmSndStr "Btn"
    tmSndDec(TM_ButnVal1,TM_DispLen,2)
    TM_ButnVal1 = 0 : cnt1 = 1
    Wait 2 s
End Sub
'---------------------------------------------------------

' Using dataSnd
Sub Bright_Test1
  tmCLRbuf : tmCLRdisp
Dim Rev as Bit
    TM_Bright = 0 : Rev = 0
    tmSndStr("bright")
      Wait 1 s
  Do
   ' tmctrlSnd
    tmSndDec(TM_Bright,TM_DispLen,1)
    If TM_Bright = 7 then wait 300 ms
    If Rev = 0 then TM_Bright++
    If Rev = 1 then TM_Bright--
   // If TM_Bright > 6 And Rev = 0 then Rev = 1 '< Compile issue W-ATMEL 2022.10.04
    If TM_Bright > 6 And Not Rev then Rev = 1
    wait 250 ms
  Loop while TM_Bright <> 0
End Sub

' Using ctrl send
Sub Bright_Test2
Dim Rev as Bit
    TM_Bright = 0 : Rev = 0
    TM_dpPos = 3
  tmdecBuf(696669)
  tmSndBuf
      Wait 1 s
  Do
    tmctrlSnd
    If Rev = 0 then TM_Bright++
    If Rev = 1 then TM_Bright--
//    If TM_Bright > 6 and Rev = 0 then Rev = 1 '< Compile issue W-ATMEL 2022.10.04
    If TM_Bright > 6 And Not Rev then Rev = 1
    wait 200 ms
  Loop while TM_Bright <> 0
End Sub



'=========================================================

' Set Segments pattern
Sub SetSeg2
Dim Digit, Segment as byte
    tmCLRbuf : tmCLRdisp
    tmSegBuf(3,1,On,,On)
    wait 400 ms
    tmSegBuf(3,2,On,,On)
    wait 400 ms
    tmSegBuf(3,3,On,,On)
    wait 500 ms
    tmSegBuf(3,4,On,,On)
    wait 800 ms

    Digit = 4
    Segment = 1
    tmSegBuf(Digit,Segment,On)
    wait 400 ms
    Segment = 2
    tmSegBuf(Digit,Segment,On)
    wait 400 ms
    Segment = 3
    tmSegBuf(Digit,Segment,On)
    wait 500 ms
    Segment = 4
    tmSegBuf(Digit,Segment,On)
    tmSndBuf

    wait 2 s
    tmCLRbuf : tmCLRdisp
End sub

'=========================================================

' fill digits with random decimal value
Sub RndFill_1
    cnt1 = 4 : TM_dpPos = TM_DispLen/2
    Randomize
 Do while cnt1 > 0
      cnt2 = 20
  Do while cnt2 > 0
    For Lp1 = 1 to TM_DispLen/2
      tmDecBuf(Random/28,Lp1,1)
    Next
     tmSndBuf
     Wait 25 ms
     cnt2--
  Loop
    cnt1--
    Wait 500 ms

      cnt2 = 20
  Do while cnt2 > 0
    For Lp1 = (TM_DispLen/2)+1 to TM_DispLen
      tmDecBuf(Random/28,Lp1,1)
    Next
     tmSndBuf
     Wait 25 ms
     cnt2--
  Loop
    cnt1--
    Wait 500 ms

 Loop
   wait 1 s
End Sub

' Fill segments random
Sub RndFill_3
    tmCLRbuf : tmCLRdisp
    cnt2 = 32
    Randomize
 Do while cnt2 > 0
  For Lp1 = 1 to TM_DispLen
    If TM_DispBuf(Lp1) < 255 then tmSegBuf(Lp1, Random/31, On)
  Next
    tmSndBuf
    cnt2--
    Wait 200 ms
 Loop
   wait 1 s
End Sub


Sub Scroll_1
    TM_Scroll = On : TM_ScrollRate = 35   ' 140ms  (35*4ms)
    tmClrbuf
     tmSndStr "GCBASIC 7seg_Display"
     tmSndBuf
      Wait 1 s

    tmClrbuf ': tmClrDisp
'     tmSndStr "Error.5 no_input  CHECK CABlE"
     tmSndStr "Error.5 "
     tmSndBuf
      wait 300 ms
     tmSndStr "   no_input"
     tmSndBuf
      wait 700 ms
     tmSndStr "  CHECK CABlE"
     tmSndBuf
      Wait 1 s

    tmClrbuf ': tmClrDisp
     tmSndStr "Error.3 "
     tmSndBuf
      wait 300 ms
     tmSndStr"   no_Fan"
     tmSndBuf
      wait 700 ms
     tmSndStr"  CASE =85°C"
     tmSndBuf
      Wait 1 s

     TM_ScrollRate = 32
    tmClrbuf ': tmClrDisp
     tmSndStr "Scrolling A long ""string""    can-be good_fun to read"
     tmSndBuf
      Wait 1 s
     TM_ScrollRate = 35
    tmClrbuf ': tmClrDisp
     tmSndStr "Special chr . . .    "" = _ ~ | ) ( ° ' - ?"
     tmSndBuf
      Wait 1 s
    TM_Scroll = Off
End Sub


' Scroll Array of values
Sub ScrollArray
Dim Array1 (11) as byte
    TM_scroll = On : TM_ScrollRate = 30 ' 120ms  (30*4ms)
    tmCLRbuf
     Array1 = 112,64,64,64,57,9, 9, 9, 9,15
    tmScrlBuf(Array1)
     Array1 =  64,64,68, 8, 8,8,12,64,64,66
    tmScrlBuf(Array1)
     Array1 =   1, 1, 1,56,14,1,1,68,8,8
    tmScrlBuf(Array1)
     Array1 =   8,8,8,8,8,8,8,8,8,8
    tmScrlBuf(Array1)
     Array1 =   8,0,0,0,0,0,0,0,0
    tmScrlBuf(Array1)
    TM_scroll = Off
    wait 600 ms
End Sub

' Scrolling characters 3bit_scope
Sub Wave1
    TM_scroll = On
    tmClrbuf
     tmSndStr "______-~-__--~~--__-~-_-~-_-~-__-~~-__-~~-__-~~-___.___~~~~"
     tmSndBuf
'     tmSndStr "~~~~L___j~~~~L__j~~L__j~L_j~Lj~Lj~Lj~Lj~L__R~~~Lj~~~L__j~L_."
     tmSndStr "~~~~l___j~~~~l__j~~l__j~l_j~l_j~l_j~~lj~~lj~~l__R~~~lj~~~l________j~l______        "
     tmSndBuf
      Wait 1 s
    tmClrDisp
    TM_scroll = Off
End Sub

Sub RedEye1      'Cylon_Kitt
Dim xms as Byte
Dim UpDn as Bit
    xms = 40 : UpDn = 1 : Cnt1 = 6
  Do While Cnt1 > 0
    For Lp1 = 1 to TM_DispLen   '< digits
      If UpDn = 1 then
        tmSndDig(16,Lp1)       '< segment e
        Wait xms ms
        tmSndDig(4,Lp1)        '< segment c
        Wait xms ms
        tmSndDig(0,Lp1)
      Else
        tmSndDig(4,(TM_DispLen+1)-Lp1)
        Wait xms ms
        tmSndDig(16,(TM_DispLen+1)-Lp1)
        Wait xms ms
        tmSndDig(0,(TM_DispLen+1)-Lp1)
     End If
   Next
     UpDn = !UpDn
     cnt1--
  Loop
End Sub


'   Using Commands
'=========================================================
' Using Default parameters
Sub CmdDemo1
    tmSndDec 1234    ' Display value as decimal
     Wait 1 s
    tmSndHex 1234    ' Display as hex
     Wait 1 s
    tmSndHex (456)  ' parameter brackets are optional (but usefull with multiple)
     Wait 1 s
    tmSndStr "TEST1234" ' Display string (will display what fits)
     Wait 1 s
    tmSndChr("b", 1) ' Display single chr at position 1
     Wait 1 s
    TM_scroll = On    ' Turn on text scrolling
    tmSndStr "Long string display"   ' works better on 6d display
     Wait 1 s
    TM_scroll = Off
' Set Decimal Point
    TM_dpPos = TM_DispLen - 2    ' dp at position 2 (set = 0 to disable)
    tmSndDec 1234   ' "12.34" displayed
     Wait 1 s

' Show Leading Zero
    TM_Blank0 = Off  ' Enable leading zeros
    tmSndDec 123     ' "0123" displayed or "000123" on 6d disp.
     Wait 1 s
     TM_dpPos = 0
' Control Leading Zeros
    tmSndDec(23,,3)  ' " 023"  (parameter 2 is default value)
     TM_Blank0 = On
     Wait 1 s

'Set  segments
    tmCLRdisp : tmCLRbuf
    tmSegBuf(2, 1, On)  ' Digit 2, Segment 1
    tmSegBuf(1, 1, On)  ' Digit 1, Segment 1
    tmsndbuf
    Wait 2 s

'               Optional parameters
'=========================================================
' Using command Optional parameters - [options override default]
'     tmSndDec (Value, Position, Num digits)    Value, option1, option2
'                           ___________
'     Buffer/Display       |1 2 3 4 5 6|
'     tmSndDec (186, 5, 3) |    1 8 6  |

    tmSndDec (70, 4, 2)    ' display value, at position 4, send 2 digits
     Wait 1 s
     TM_dpPos = 2
    tmSndDec (12, 2, 2)    ' Result "12.70"
     Wait 1 s
    TM_dpPos = 0           ' dp Off

    tmCLRdisp : tmCLRbuf
    tmSndHex (254, 3, 2)   '
     Wait 400 ms
     tmSndChr("h", 4)        ' Result " FEh"
     Wait 1 s

' Control Leading zero
    tmCLRdisp : tmCLRbuf
    TM_Blank0 = Off         ' Enable leading zeros
    tmSndHex (255, 4, 3)    ' Result " 0FF"
    Wait 1 s
    tmSndHex (2047, 4, 3)   ' Result " 7FF"
    TM_Blank0 = On

' Using the Buffer
    tmDecBuf(1234)
    tmSndBuf                ' Result "1234"
    Wait 1 s

    tmDecBuf(12,2,2)
    tmDecBuf(4,4,1)
    tmSegBuf(4, 4, ON)      ' (digit 4, segment 4, on)
    tmSndBuf                ' Result "12_4"
    Wait 1 s

    TM_dpPos = 1
    tmDecBuf(Value)
    tmSndBuf                ' Result "3.14159"
    Wait 1 s

'User Buffer
    tmDecBuf(25,2,2,Mybuf1)
    tmDecBuf(40,4,2,Mybuf1)
    tmSndBuf(Mybuf1)
    Wait 1 s
    tmSndBuf
    Wait 1 s
    tmSndBuf(Mybuf1)
    Wait 2 s

End Sub
