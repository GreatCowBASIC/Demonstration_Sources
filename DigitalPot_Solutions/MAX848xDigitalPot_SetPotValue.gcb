'''  The MAX5481�MAX5484 10-bit (1024-tap) nonvolatile, linear-taper, programmable voltage-dividers and variable resistors perform the function of a mechanical
'''  potentiometer, but replace the mechanics with a pinconfigurable 3-wire serial SPI�-compatible interface or up/down digital interface. The MAX5481/MAX5482 are
'''  3-terminal voltage-dividers and the MAX5483/MAX5484 are 2-terminal variable resistors.
'''
'''  The MAX5481�MAX5484 feature an internal, nonvolatile, electrically erasable programmable read-only memory (EEPROM) that stores the wiper position for initialization during power-up. The 3-wire SPI-compatible
'''  serial interface allows communication at data rates up to 7MHz. A pin-selectable up/down digital interface is also available.
'''
'''  The MAX5481�MAX5484 are ideal for applications requiring digitally controlled potentiometers. Two end-toend resistance values are available (10kO and 50kO) in a
'''  voltage-divider or a variable-resistor configuration.
'''  These devices ideal for applications requiring low-temperature-coefficient voltage-dividers, such as low-drift, programmable gain-amplifiers.
'''
'''
'''
'''  This demonstration shows how to use the MAX848xDigitalPotIncrement and MAX848xCopyWiperRegistertoNVRegister methods to set the pot value, and, set the default pot value.
'''
'''  The MAX848xDigitalPotSetWiperPosition and MAX848xDigitalPotDecrement methods ONLY support software SPI.
'''
'''  PIC: 16f15376 but will work on any chip
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: MAX848x chip
'''  Date: 18.06.2020
'''

' ----- Configuration
    #chip 16f15376
    #config mclre_on
    #option explicit
    #include <max848xdigitalpot.h>

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.1
    'PinManager data: v1.79.0
    'Generated for 16f15376
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 16f15376

    Sub InitPPS

        'Isolate the PPS so that these settings are only enabled when MAX848xHardwareSPI is defined.
        #ifdef MAX848xHardwareSPI
            'Module: MSSP1
            RC2PPS = 0x0016    'SDO1 > RC2
            RC1PPS = 0x0015    'SCK1 > RC1
            SSP1CLKPPS = 0x0011    'RC1 > SCK1 (bi-directional)
            SSP1DATPPS = 0x0012    'RC2 > SDI1
        #endif

    End Sub
    'Template comment at the end of the config file



'Start of MAX848XDIGITALPOT configuration
    'Three ports and one optional port is required as shown below.

    #DEFINE MAX848XDIGITALPOT_CS       PORTC.0
    #DEFINE MAX848XDIGITALPOT_SCK      PORTC.1
    #DEFINE MAX848XDIGITALPOT_DO       PORTC.2
    #DEFINE MAX848XDIGITALPOT_IOMODE   PORTC.3

    'MAX848XDIGITALPOT_IOMODE to control SPI or Up/Down modes automatically, or if you do not define MAX848XDIGITALPOT_IOMODE then set the SPI/UD in the Max848x as follows:
    '            SPI/UD = HIGH (connected permanently to high voltage ) then the you can only use the SPI controls as follows:
    '                     MAX848xDigitalWriteMemory
    '                     MAX848xCopyWiperRegistertoNVRegister
    '                     MAX848xCopyNVRegistertoWiperRegister
    '            SPI/UD = LOW (connected permanently to 0v ) then the you can only use the SPI controls as follows:
    '                     MAX848xDigitalPotIncrement
    '                     MAX848xDigitalPotDecrement

    ' MAX848xDigitalPotIncrement and MAX848xDigitalPotDecrement are ONLY support when using Software SPI
    '

'Start of Hardware SPI configuration
      'Enable the constant MAX848xHardwareSPI to use hardware SPI.  On PPS chips you will to define PPS-SDO and PPS-SCK1

     #define MAX848xHardwareSPI     ' remove comment out if you want to use software SPI.
     #define HWSPIMode   MASTER     ' sets the SPI frequency to an appropiate frequency for the MAX848x device.  You many need use MASTERSLOW on fast chip frequencies

'For the K42 type SPI MODULE ONLY hardware SPI only
    'You can specify an SPI baud rate - the baud rate is dependent on the chip frequency!
    'If you get nothing, you have exceeded the SPI modules capabilites, so, slow down the BAUD RATE or use the SPI_BAUD_RATE_REGISTER constant, shown below.

    'The default SPI_BAUD_RATE is 1/4th of the clock frequency in khz. Khz is used to allow for fine adjustment
    'The following example is commented out intentionally
        '#define SPI_BAUD_RATE 32000

    'or, use an explicit constant as show below
    'The following example is commented out intentionally
        '#define SPI_BAUD_RATE_REGISTER 3

    'Optionally, you can define the HWSPIMode by using #define HWSPIMode masterfast where #define HWSPIMode is masterslow|master|masterfast
    'This will overwrite the default in the GLCD SPI library.  This is so users do not have to change the library.
    'the default is "master"
    'The following example can be commented out if you want to use the default value
        '#define HWSPIMode masterfast

' Main program

      'Define some resistor constants, just for this sample code
      'These are calibated - you may need re-calibrate
      #define MINk    0
      #define 10k   150
      #define 20k   358
      #define 30k   564
      #define 40k   770
      #define 50k   979
      #define MAXk 1023

      'Loop through forever
      do
            MAX848xDigitalPotSetWiperPosition ( MINk )
                wait 2 s
            MAX848xDigitalPotSetWiperPosition ( 10k )
                wait 2 s
            MAX848xDigitalPotSetWiperPosition ( 20k )
                wait 2 s
            MAX848xDigitalPotSetWiperPosition ( 30k )
                wait 2 s
            MAX848xDigitalPotSetWiperPosition ( 40k )
                wait 2 s
            MAX848xDigitalPotSetWiperPosition ( 50k )
                wait 2 s
            MAX848xDigitalPotSetWiperPosition ( MAXk )
                wait 2 s

            'Increment though the range
            dim MAX848xValue as word

            for MAX848xValue = 0 to 0x3f0 step 16
                MAX848xDigitalPotSetWiperPosition ( MAX848xValue )
                wait 50 ms
            next
            wait 1 s

            'Write a specific value as the default setting by writing the current setting to NVRAM
            MAX848xDigitalPotSetWiperPosition ( 30k )
            MAX848xCopyWiperRegistertoNVRegister

      loop
