'''A demonstration program for GCBASIC
'''---------------------------------------------------------------------------------
'''  This demonstration shows sprites on the GLCD using an SPI device can use hardware or software SPI.
'''
'''
'''





    #chip LGT8F328P
    #option explicit
    #include <glcd.h>
    #include <LGT8F328P.h>

    #define GLCD_TYPE GLCD_TYPE_ILI9341

    'Comment out ILI9341_HardwareSPI to use software SPI
    #define ILI9341_HardwareSPI
    #define HWSPIMode MASTERULTRAFAST


    'Pin mappings for SPI - this GLCD driver supports Hardware SPI and Software SPI
    #define GLCD_DC       DIGITAL_8           ' Data command line
    #define GLCD_RESET    DIGITAL_9           ' Reset line
    #define GLCD_CS       DIGITAL_10          ' Chip select line
    #define GLCD_DO       DIGITAL_11          ' Data out | MOSI
    #define GLCD_DI       DIGITAL_12          ' Data in  | MISO    - Not used therefore not really required
    #define GLCD_SCK      DIGITAL_13          ' Clock Line



'    GLCDfntDefaultSize   = 2
'    GLCDfntDefaultHeight = 8
'
'    GLCDPrintStringLn "Hello "
'    GLCDPrintStringLn "SPI connectivity"
'
'
'    End
'

















    ;define the frame_refresh
    #define frame_refresh 1  '1 to 5 is advised
    ;
    ;now rename colours to make it easier to set up sprite data
    #define bk ILI9341_BLACK
    #define re ILI9341_RED
    #define gr ILI9341_GREEN
    #define bl ILI9341_BLUE
    #define wh ILI9341_WHITE
    #define pu ILI9341_PURPLE
    #define ye ILI9341_YELLOW
    #define cy ILI9341_CYAN
    #define dg ILI9341_D_GRAY
    #define lg ILI9341_L_GRAY
    #define si ILI9341_SILVER
    #define ma ILI9341_MAROON
    #define ol ILI9341_OLIVE
    #define li ILI9341_LIME
    #define aq ILI9341_AQUA
    #define te ILI9341_TEAL
    #define na ILI9341_NAVY
    #define fu ILI9341_FUCHSIA
    ;backgroung color
    #define bg te
    #define bg_hi  bg / 256
    #define bg_lo  bg AND 255


    GLCDRotate Portrait_Rev
    GLCDCLS bg
    ;
    dim sprite_height,sprite_width as byte ;height and width of sprite in pixels
    ;dim spritedata as byte;data to make sprite
    dim sprite_x,sprite_y as Word
    dim ptr,spritedata_ptr,pixel as word
    ;
    ;demo vars
    dim temp,frame,frame_count as word
    dim dx(8),dy(8) as word
    dim spy(8),oldspy(8) as word
    dim spx(8),oldspx(8) as word
    ;set up start sprite positions and directions
    dx(1)=2:dx(2)=3:dx(3)=65536-4:dx(4)=6
    dx(5)=65536-8:dx(6)=65536-8:dx(7)=65536-8:dx(8)=65536-8
    dy(1)=65536-5:dy(2)=65536-3:dy(3)=65536-8:dy(4)=3
    dy(5)=2:dy(6)=7:dy(7)=2:dy(8)=8
    ;
    spx(1)=30:spx(2)=100:spx(3)=150:spx(4)=50
    spx(5)=160:spx(6)=100:spx(7)=80:spx(8)=30
    spy(1)=20:spy(2)=20:spy(3)=16:spy(4)=50:spy(5)=60:spy(6)=40
    spy(5)=20:spy(6)=30:spy(7)=24:spy(8)=36
    sprite_height=16:sprite_width=16
    spritedata_ptr=1
    frame=0:frame_count=0
    ;
    do ;demo moving sprite
      for temp=1 to 8
        if spx(temp)> (229-sprite_width) then ;check right edge
          dx(temp)= 65536-dx(temp)
        end if
        if spx(temp)<8 then ;check left edge
          dx(temp)= 65536-dx(temp)
        end if
        if spy(temp)> (319-sprite_height) then ;check bottom edge
          dy(temp)= 65536-dy(temp)
        end if
        if spy(temp)<8 then ;check top edge
          dy(temp)= 65536-dy(temp)
        end if
      ;
        oldspx(temp)=spx(temp):oldspy(temp)=spy(temp) ;get last position for erase
        spx(temp)=spx(temp)+dx(temp):spy(temp)=spy(temp)+dy(temp) ;get new position for draw
      ;
        if frame=0 then;which sprite to draw
          erase_sprite (oldspx(temp),oldspy(temp)) ;erase sprite at last position
          ' 1 ;pointer to sprite 1 in table
          sprite (spx(temp),spy(temp), 1 ) ;draw sprite1 at new position
        else
          erase_sprite (oldspx(temp),oldspy(temp)) ;erase sprite at last position
          ' 257 ;pointer to sprite 2 in table
          sprite (spx(temp),spy(temp), 257) ;draw sprite2 at new position
        end if
      ;
      next temp
      frame_count++ ;when to change spritedata_ptr

      if frame_count=frame_refresh then
        frame=!frame
        frame_count=0
      end if
    ;wait 5 s
    loop ;end demo
    ;

dim spiinx as byte
    sub sprite ( in sprite_x, in sprite_y, in spritedata_ptr ) ;fills box with sprite data
      SetAddressWindow_ILI9341 ( sprite_x,sprite_y,sprite_x +15,sprite_y +15 )

      #IFDEF ILI9341_HardwareSPI
          set ILI9341_CS OFF
          set ILI9341_DC ON

          for ptr=spritedata_ptr to spritedata_ptr+255
            ReadTable spritedata,ptr,pixel
            FastHWSPITransfer pixel_h
            FastHWSPITransfer pixel
          next ptr
          set ILI9341_CS ON
      #ENDIF

      #IFNDEF ILI9341_HardwareSPI
          for ptr=spritedata_ptr to spritedata_ptr+255
            ReadTable spritedata,ptr,pixel
            SendWord_ILI9341 pixel
          next ptr
      #ENDIF

    end sub
    ;
    sub erase_sprite (sprite_x,sprite_y) ;write a box of 0's
      SetAddressWindow_ILI9341 ( sprite_x,sprite_y,sprite_x +15,sprite_y +15 )

      #IFDEF ILI9341_HardwareSPI
          set ILI9341_CS OFF
          set ILI9341_DC ON

          repeat 128
            repeat 2
                FastHWSPITransfer bg_hi
                FastHWSPITransfer bg_lo
            end repeat
          end repeat
      #ENDIF

      #IFNDEF ILI9341_HardwareSPI
          repeat 256
            SendWord_ILI9341 bg
          end repeat
      #ENDIF

    end sub
    ;
    table spritedata ;sprite 1
    wh,bl,bl,bl,bl,bg,bg,bg,bg,bg,bg,bl,bl,bl,bl,wh
    bg,bl,re,re,re,bl,bl,bg,bg,bl,bl,re,re,re,bl,bg
    bg,bg,bl,re,re,re,bl,bg,bg,bl,re,re,re,bl,bg,bg
    bg,bg,bg,bl,re,wh,bl,bg,bg,bl,wh,re,bl,bg,bg,bg
    bg,bg,bg,bg,bl,wh,bl,bg,bg,bl,wh,bl,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bl,bl,bg,bg,bl,bl,bg,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg
    bg,bg,bg,bg,ye,ye,ye,bg,bg,ye,ye,ye,bg,bg,bg,bg
    bg,bg,bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg,bg,bg
    bg,ye,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,ye,bg
    bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg
    ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bl,ye
    ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye
    ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye
    bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg
    bg,bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg,bg
    ;
    ;sprite 2
    bl,bl,bl,bl,bl,bg,bg,bg,bg,bg,bg,bl,bl,bl,bl,bl
    bg,bl,re,re,re,bl,bl,bg,bg,bl,bl,re,re,re,bl,bg
    bg,bg,bl,wh,wh,re,bl,bg,bg,bl,re,wh,wh,bl,bg,bg
    bg,bg,bg,bl,re,wh,bl,bg,bg,bl,wh,re,bl,bg,bg,bg
    bg,bg,bg,bg,bl,wh,bl,bg,bg,bl,wh,bl,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bl,bl,bg,bg,bl,bl,bg,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bg,bg,ye,ye,bg,bg,bg,bg,bg,bg,bg
    bg,bg,bg,bg,bg,ye,ye,bg,bg,ye,ye,bg,bg,bg,bg,bg
    bg,bg,bg,bg,ye,ye,bg,bg,bg,bg,ye,ye,bg,bg,bg,bg
    bg,bg,bg,bg,ye,bg,bg,bg,bg,bg,bg,ye,bg,bg,bg,bg
    bg,bg,bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg,bg,bg
    bg,bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg,bg
    bg,bg,bg,ye,ye,bg,bg,bg,bg,bg,bg,ye,ye,bg,bg,bg
    bg,bg,bg,bg,ye,ye,bg,bg,bg,bg,ye,ye,bg,bg,bg,bg
    bg,bg,bg,bg,bg,ye,bg,bg,bg,bg,ye,bg,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bg,ye,bg,bg,ye,bg,bg,bg,bg,bg,bg
    end table
