'''A demonstration program for GCBASIC
'''---------------------------------------------------------------------------------
'''
'''  This shows how to display aGCBASIC BMP on the GLCD and the GLCDGCBASIC commands.
'''
'''
'''
''' -------------------PORTC-----------------
''' Bit#:  -7---6---5---4---3---2---1---0---
''' PCB    NA--A6--A5--A4--A3--A2--A1--A0---
''' Constants
'''        ---|ADC|SCL|SDA|L4 |L3 |L2 |L1 |-  where L equates to LED
'''-----------------------------------------
'''
''' Connect the switch via suitable resistors using a standard switch connection.
''' -------------------PORTE-----------------
''' Bit#:  -7---6---5---4---3---2---1---0---
''' PCB                  --A7--
''' Constants
''' SWITCH----------------|SW |--------------
''
'''@author  Evan Venn
'''@licence GPL
'''@version 1.0
'''@date    08/10/2020
'''********************************************************************************


; ----- Configuration
#chip  LGT8F328P
#option Explicit
'GCBASIC simplifies the configuration by setting the frequency and the configuration for you.
    ; ----- Define GLCD Hardware settings
    #define GLCD_TYPE GLCD_TYPE_SSD1306
    #define GLCD_I2C_Address 0x78

    #include <glcd.h>
    #include <..\converters\anobiumfull.bmp>
    #DEFINE SWITCH porte.3
    Dir SWITCH in

    'USART settings for USART1 on the chip which is sent via the USB to the PC
    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF


  ; ----- Define Hardware settings for hwi2c
  ' Define I2C settings - CANNOT CHANGE PORTS when using Hardware I2C
  #define HI2C_BAUD_RATE 400
  #define HI2C_DATA PORTC.5
  #define HI2C_CLOCK PORTC.4
  HI2CMode Master

  ; ----- Main body of program commences here.

  Dim Bytenumber, Widthofpicture, Heightofpicture, OrgCharlocx, Currcharval, Firstpass, Charlocy, Currcharrow, Charlocx, Ccount as Byte

  Ccount = 0
  dim longNumber as long
  longNumber = 123456 ' max value = 4294967290
  dim wordNumber as Word
  dim outstring as string
  wordNumber = 0
  Bytenumber = 0

  dim lengthofpicture, ram_index as word

  ' Display a BMP file
  GLCDCLS

  ' Add your own case statement here to handle multiple BMPs, you just  need the variables to be defined
  ReadTable AnobiumFull, 0, lengthofpicture
  ReadTable AnobiumFull, 1, Widthofpicture
  ReadTable AnobiumFull, 2, Heightofpicture
  lengthofpicture =  Heightofpicture / 8
  lengthofpicture = [word]lengthofpicture * Widthofpicture

  ' For BMP that fit the display simple write the data to the screen

  Charlocx = 0                       ' specify X pos for BMP
  Charlocy = 0                       ' specify Y pos for BMP.  For buffer any valid Y, for non-buffered 0,8,16, 24 etc...
  OrgCharlocx = Charlocx              ' specify X orginisal X pos
  Firstpass = true                    ' specify this is the first pass

  for  ram_index =  3 to lengthofpicture + 3         ; start at third byte and finish at the end

            ' Add your own case statement here to handle multiple BMPs, you just  need set Currcharval to the data value
            ReadTable AnobiumFull,  ( ram_index ), Currcharval  ' read data

            if ( ( ram_index - 3 ) % Widthofpicture ) = 0  and Firstpass = false then     ' change position for new line of data
               Charlocy = Charlocy + 8
               Charlocx = OrgCharlocx
            end if

                    For Currcharrow = 0 to 7
                        if ( Charlocy + Currcharrow < GLCD_HEIGHT ) and ( Charlocx < GLCD_WIDTH ) then
                            If Currcharval.0 = 0 Then
                               PSet Charlocx , Charlocy + Currcharrow, GLCDBackground
                            Else
                               PSet Charlocx , Charlocy + Currcharrow, GLCDForeground
                            End If
                        end if
                        Rotate Currcharval Right
                    Next

            Firstpass = false                                          ' now this is NOT the first pass
            Charlocx++                                                 ' increment the X pos
  next  wait 2 s
  SetContrast_SSD1306 ( 10 )
  wait 2 s
  startscrollright_SSD1306(0x00, 0x0F)
  wait 3 s
  startscrollleft_SSD1306(0x00, 0x0F)
  wait 3 s
  startscrolldiagright_SSD1306(0x00, 0x0F)
  wait 3 s
  startscrolldiagleft_SSD1306(0x00, 0x0F)
  wait 3 s
  stopscroll_SSD1306
  GLCDCLS

  ' Prepare the static components of the screen
  GLCDPrint ( 0,   0, "PrintStr")                                ; Print some text
  GLCDPrint ( 64,  0, "@")                                    ; Print some more text
  GLCDPrint ( 72,  0, ChipMhz)                                   ; Print chip speed
  GLCDPrint ( 86, 0, "Mhz")                                     ; Print some text
  GLCDDrawString( 0,8,"DrawStr")                                 ; Draw some text
  box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1                            ; Draw a box
  box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1    ; Draw a box
  Circle( 44,41,15)                                              ; Draw a circle
  line 64,31,0,31                                                ; Draw a line

  DO forever
     for Ccount = 32 to 127
          GLCDPrint ( 64 ,  36,  hex(longNumber_E ) )                 ; Print a HEX string
          GLCDPrint ( 76 ,  36,  hex(longNumber_U ) )                 ; Print a HEX string
          GLCDPrint ( 88 ,  36,  hex(longNumber_H ) )                 ; Print a HEX string
          GLCDPrint ( 100 ,  36, hex(longNumber   ) )                 ; Print a HEX string
          GLCDPrint ( 112 ,  36, "h" )                                ; Print a HEX string


          GLCDPrint ( 64 ,  44, pad(str(wordNumber), 5 ) )           ; Print a padded string
          GLCDPrint ( 64 ,  52, pad(str(Bytenumber), 3 ) )           ; Print a padded string


          box (46,9,56,19)                                           ; Draw a Box
          GLCDDrawChar(48, 10, Ccount )                               ; Draw a character
          outString = str( Ccount )                                  ; Prepare a string
          GLCDDrawString(64, 9, pad(outString,3) )                   ; Draw a string

          filledbox 3,43,11,51, wordNumber                           ; Draw a filled box

          FilledCircle( 44,41,9, longNumber xor 1)                   ; Draw a filled box
          line 0,63,64,31                                            ; Draw a line

                                                                     ; Do some simple maths
          longNumber = longNumber + 7 : wordNumber = wordNumber + 3 : Bytenumber++
      NEXT
  LOOP
  end
