'''A demonstration of GCBASIC supporting the WS2812 LED devices.
'''
'''This demonstration contains three operational demonstrations, and two methods of driving the WS2812 LEDs.
'''
'''    The demos have a speed control using the Pot. This adjusts the timing.
'''
'''     Demos:
'''         1. Chaser - LED chaser
'''         2. Flash All LEDs
'''         3. Xylon Chaser, also known as Knight Rider
'''
'''     Methods of driving the WS2812:
'''         1. CLC approach using the Microchip Configurable Logic Cells (CLC) to create a specialised SPI signal in terms of timing
'''         2. Bit Banging a SPI signal, again in terms of timing.
'''
'''
'''     Operation:
'''         By default the Chaser (#1) will be operational when applying power to the microcontroller and the WS2812 LEDs.
'''         Pressing the Switch will change the operational to the Flash All LEDs (#2), pressing the Switch again with return to Chaser operation.
'''         To select the Xylon Chase press the switch when applying power to the microcontroller and the WS2812 LEDs.
'''
'''     Selecting the method of generating the specialised SPI signal:
'''         Using the Microchip CLC method as detailed in AN1606.
'''             This method can be selected by defining the constants as follows.
'''                 #define UseWS2812PWMSendData
'''                 #define WS2812SendData WS2812PWMSendData
'''         Using the bit Banging method.
'''             This method can be selected by defining the constants as follows.
'''                 #define UseWS2812BitBangSendData
'''                 #define WS2812SendData WS2812BitBangSendData
'''
'''         These are mutually exclusive - choose either CLC or Bit Banging, define the TWO constants.  The constants ensure the code is configured correctly.
'''
'''     Configuration:
'''         WS2812 DIN is connected to PORTC.7.
'''         Pot is connected to PORTA.4
'''         Switch is pulled high and connected to PORTA.5
'''
'''
'''     General commentary:
'''         The use of CLC is detailed in AN1606. Please review this document.
'''         The timing of the WS2812 is absolutely critical.  Please review the WS2812 datasheet for the specific timing that are required.
'''
'''         The Chaser demonstration simply writes to the WS2812 (for the number of LEDs) and indexes through the LEDS enabling the select color on each pass through the sequence.
'''         The Flash ALL LEDS simply writes to all the LEDS the same color.
'''         The Xylon chaser uses an ARRAY to hold the pattern. When a bit in 1 then the LEDs with be turn on.
'''
'''     This demonstration can be further developed - have fun.
'''
'''
'''************************************************************************
'''
'''PIC: 16F18855
'''Compiler: GCB
'''IDE: GCB@SYN
'''Board: Xpress Evaluation Board
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.00
'''@date       17.08.2016
'''********************************************************************************
'''
'----- Configuration
    'Chip Settings.
    #chip 16f18855, 32
    #option explicit



Setup:

    #define UseWS2812PWMSendData
    #define WS2812SendData WS2812PWMSendData

'    #define UseWS2812BitBangSendData
'    #define WS2812SendData WS2812BitBangSendData

    #define DoTracer
    #define DoXyLon

; ----- Define Hardware settings
    'Set the PPS of the microcontroller
    'Set the PPS for this solution.
  #startup InitPPS, 85

  Sub InitPPS
    UNLOCKPPS

    #ifdef UseWS2812PWMSendData
      'Setup CLC inputs and outputs
      SSP1DATPPS = 0x0014    'RC4->MSSP1:SDI1
      CLCIN0PPS = 0x0007     'RA7->CLC1:CLCIN0
      CLCIN1PPS = 0x0007     'RA7->CLC1:CLCIN1
      CLCIN2PPS = 0x000E     'RB6->CLC1:CLCIN2
      CLCIN3PPS = 0x000F     'RB7->CLC1:CLCIN3
      RB4PPS = 0x0009        'RB4->CCP1:CCP1
      T2AINPPS = 0x0013      'RC3->TMR2:T2IN

      'Setup SPI and the outout for DIN
      RB1PPS = 0x0015        'RB1->MSSP1:SDO1
      RB0PPS = 0x0014        'RB0->MSSP1:SCK1
      RC7PPS = 0x0001        'RC7->CLC1:CLC1OUT

      'Setup PWM
      RA0PPS = 0x000E        'RA0->PWM6:PWM6OUT
    #endif

      'Setup RS232
      RC0PPS = 0x0010        'RC0->EUSART:TX
      RXPPS  = 0x0011        'RC1->EUSART:RX

      LOCKPPS
  End sub

    '-------------------LATC-----------------
    'Bit#:  -7---6---5---4---3---2---1---0---
    '      |PWM|-----------------------------
    '------|DIN|-----------------------------
    '

; ----- Constants


    #define USART_BAUD_RATE 115200
    #define USART_TX_BLOCKING

    'STANDARD XPRESS BOARD CONSTANTS
    #define LEDD2  PORTA.0
    #define LEDD3  PORTA.1
    #define LEDD4  PORTA.2
    #define LEDD5  PORTA.3
    Dir    LEDD2 OUT
    Dir    LEDD3 OUT
    Dir    LEDD4 OUT
    Dir    LEDD5 OUT

    #define Potentiometer      PORTA.4
    DIR      Potentiometer In

    #define SWITCH_DOWN         0
    #define SWITCH_UP           1
    #define SWITCH             PORTA.5
    Dir    SWITCH              In

    'WS2812 SPECIFIC CONSTANTS
    #define DIN PORTC.7
    Dir     DIN out
    #define SSPOutRegister SSP1BUF

; ----- Variables

    Dim YLOOP, PIXELCOUNT, XLOOP, XYLONELEMENTVALUE, LEDDISPLAYSTATE, SWITCHSTATE as Byte

    PixelCount = 8              'Number of WS2812 LEDs
    ColorofLED = 0              'Color to send to LEDs 6 byte  color address
    CurrentAddessedLED = 1      'Curent LED being address - between 1 and the PixelCount
    CurrentLEDColorSequence = 0 'Current LED sequence pointer. Simply points to the array of colors
    LEDDisplayState = 1         'LEDDisplayState = 0 or 1.  0 = LEDs addressed is sequence 1-2-3-4 etc OR 1 = ALL on 'not' sequential
    SwitchState = SWITCH_UP     'State of the switch tracker.  Toggle LEDDisplayState 1 | 0

    dim CurrentAddessedLED, CurrentLEDColorSequence as Byte
    dim ColortoSend, ColorofLED as long

; ----- Main body of program commences here.

MainCode:

  WS2812_Init

  if SWITCH = SWITCH_DOWN then

      #ifdef DoXyLon


          ' Data array of Xylon LEDs
          #define XyLonSteps  6
          dim XyLonArray( XyLonSteps )
          XyLonArray(1)  = 0b10000001
          XyLonArray(2)  = 0b01000010
          XyLonArray(3)  = 0b00100100
          XyLonArray(4)  = 0b00011000
          XyLonArray(5)  = 0b00100100
          XyLonArray(6)  = 0b01000010

          do

              'Send data
              For yloop =1 to XyLonSteps

                  #ifdef UseWS2812BitBangSendData
                      'Ensure minimum delay has happended as the timing is critical
                      'The delay is maintained by the timer0 Interrupt
                      wait while timeoutocurred =  0
                      intoff
                  #endif


                  XyLonElementValue = XyLonArray(yloop)

                  for xloop = 1 to PixelCount

                    if XyLonElementValue.7 = 1 then
                        ColortoSend = 0x00ff00 ' Red
                    else
                        ColortoSend = 0 ' black
                    end if

                    'Send the data - either to the CLC or bit banging
                    WS2812SendData ( ColortoSend )

                    Rotate XyLonElementValue left

                  next

                  #ifdef UseWS2812BitBangSendData
                      'Set InterPacketDelay running
                      SetTimer(0, period_us)  ' Preload Count
                      timeoutocurred =  0
                      Inton
                  #endif

                  'The minimum delay is 50us. This will SURELY never happen....
                  dim mydelay as word
                  mydelay =  readad10( AN4 )

                  if mydelay > 0 then
                    wait mydelay ms
                  Else
                    wait while readad10( AN4 ) = 0
                  end if
                  if mydelay > 1015 then
                    do

                    loop while readad10( AN4 ) > 1000
                  end if

              Next

          loop

      #endif

  else

      #ifdef DoTracer

          ' Set of colors stored in an array for simplicity - they can be addressed with a pointer.
          dim colorArray( 20)     ' 5 long element in the array = 5 * 4 = 20

          ' Set the values of the array to the colors.  Five colors are defined. You can add more.....
          SetLongArrayValueHandler ( colorArray, 0, 0x00FF00 ) 'RED
          SetLongArrayValueHandler ( colorArray, 1, 0xFFFF00 ) 'yellow
          SetLongArrayValueHandler ( colorArray, 2, 0xFF0000 ) 'GREEN
          SetLongArrayValueHandler ( colorArray, 3, 0xFFFFFF ) 'WHITE
          SetLongArrayValueHandler ( colorArray, 4, 0x000000 ) 'BLACK

          do

            'This gets the long value of color from the array - CurrentLEDColorSequence is a index into the array
            ColorofLED = GetLongArrayValueHandler ( ColorArray, CurrentLEDColorSequence )

            'first loop - as we interate through the first loop to get the tracer display working
            for yloop = 1 to PixelCount

              #ifdef UseWS2812BitBangSendData
                  'Ensure minimum delay has happended as the timing is critical
                  'The delay is maintained by the timer0 Interrupt
                  wait while timeoutocurred =  0
                  intoff
              #endif

              ' second loop - loop sends data to the LEDs
              for xloop = 1 to PixelCount

                      'Set the color or set to black
                      if xloop = CurrentAddessedLED then
                              ColortoSend = ColorofLED
                      Else
                          if LEDDisplayState = 1 then
                              ColortoSend = 0x000000 'black
                          Else
                              'This has to reset here... why? As the output function destroys the long value when ROTATING the number.
                              ColortoSend = ColorofLED
                          end if
                      end if

                      'Send the data - either to the CLC or bit banging
                      WS2812SendData ( ColortoSend )

              next

              'Increment the LED being addressed
              CurrentAddessedLED++

              'The minimum delay is 50us. This will SURELY never happen....
              dim mydelay as word
              mydelay =  readad10( AN4 )

              if mydelay > 0 then
                wait mydelay ms
              Else
                wait while readad10( AN4 ) = 0
              end if
              if mydelay > 1015 then
                do

                loop while readad10( AN4 ) > 1000
              end if

              if Switch = SWITCH_DOWN and SwitchState = SWITCH_UP Then
                  LEDDisplayState = !LEDDisplayState
                  SwitchState = SWITCH_DOWN
              end if

              if Switch = SWITCH_UP Then
                  SwitchState = SWITCH_UP
              end if

              #ifdef UseWS2812BitBangSendData
                  'Set InterPacketDelay running
                  SetTimer(0, period_us)  ' Preload Count
                  timeoutocurred =  0
                  Inton
              #endif

            next

            'Reset the addressed LED
            CurrentAddessedLED = 1
            'Resequence LEDs the start of the color sequence
            CurrentLEDColorSequence = ( CurrentLEDColorSequence + 1 ) mod 4

          loop

      #endif

  end if
end

; ----- Support methods.  Subroutines and Functions

'Initialise the LED device, timers etc.
sub WS2812_Init

    set DIN off

    #ifdef UseWS2812BitBangSendData
        timeoutocurred =  0
        #define period_us   0x1B00  'Period for LED internal processing
        InitTimer0(Osc, TMR0_FOSC4 + PRE0_2 , POST0_1)
        SetTimer(0, period_us)  ' Preload Count
        StartTimer 0
        On Interrupt Timer0Overflow call ISR0

        SET DIN On
        SET DIN OFF
        wait 500 us
    #endif

    #ifdef UseWS2812PWMSendData
        ' SSPBUF updates ignoring BF for daisy-chained operation
        BOEN = 1

        ' SMP End CKE Idle to Active
        SSP1STAT = 0x00

        ' SSPEN enabled CKP Idle:Low, Active:High SPI Master mode, clock = T2_match/2
        SSP1CON1 = 0x23

        ' SSPADD 0
        SSP1ADD = 0x00

        ' Setup the PWM
        ' PWM6POL active_hi PWM6EN enabled
        PWM6CON = 0x80

        ' DC 2
        PWM6DCH = 0x02

        ' DC 1
        PWM6DCL = 0x40

        ' LC1G1POL inverted LC1G2POL not_inverted LC1G3POL not_inverted LC1G4POL not_inverted LC1POL not_inverted
        CLC1POL = 0x01

        ' LC1D1S PWM6_OUT
        CLC1SEL0 = 0x18

        ' LC1D2S SCK from MSSP1
        CLC1SEL1 = 0x27

        ' LC1D3S SDO from MSSP1
        CLC1SEL2 = 0x26

        ' LC1D4S CLCIN0 (CLCIN0PPS)
        CLC1SEL3 = 0x00

        ' LC1G1D3N disabled LC1G1D2N enabled LC1G1D4N disabled LC1G1D1T disabled LC1G1D3T disabled LC1G1D2T disabled LC1G1D4T disabled LC1G1D1N enabled
        CLC1GLS0 = 0x05

        ' LC1G2D2N disabled LC1G2D1N disabled LC1G2D4N disabled LC1G2D3N enabled LC1G2D2T disabled LC1G2D1T disabled LC1G2D4T disabled LC1G2D3T disabled
        CLC1GLS1 = 0x10

        ' LC1G3D1N disabled LC1G3D2N disabled LC1G3D3N disabled LC1G3D4N disabled LC1G3D1T disabled LC1G3D2T enabled LC1G3D3T disabled LC1G3D4T disabled
        CLC1GLS2 = 0x08

        ' LC1G4D1N disabled LC1G4D2N disabled LC1G4D3N disabled LC1G4D4N disabled LC1G4D1T disabled LC1G4D2T disabled LC1G4D3T enabled LC1G4D4T disabled
        CLC1GLS3 = 0x20

        ' LC1EN enabled INTN disabled INTP disabled MODE AND-OR
        CLC1CON = 0x80

        ' Set TMR2 to the options selected in the User Interface

        ' T2CKPS 1:1 T2OUTPS 1:1 TMR2ON off
        T2CON = 0x00

        ' T2CS FOSC/4
        T2CLKCON = 0x01

        ' T2PSYNC Synchronized T2MODE Software control T2CKPOL Falling Edge T2CKSYNC Synchronized
        T2HLT = 0xE0

        ' T2RSEL T2CKIPPS pin
        T2RST = 0x00

        ' PR2 4
        T2PR = 0x04

        ' TMR2 0
        T2TMR = 0x00

        ' Clearing IF flag.
        TMR2IF = 0

        ' Start TMR2
        StartTimer 2

    #endif
End Sub

Sub WS2812BitBangSendData ( in ColortoSend as long )

              repeat 24
                IF ColortoSend.23 ON THEN
                  'High for to 1 bit
                  SET DIN ON
                else
                  'High and Low as fast as practical
                  SET DIN ON
                  SET DIN OFF
                END IF
                ROTATE ColortoSend left
                'Low for the 1 bit
                SET DIN OFF
              end repeat

End Sub

'Uses SSP1BUF as the output buffer - change the define at the top for your chip
Sub WS2812PWMSendData ( in ColortoSend as long )

              'Put byte to send into buffer
              'Will start transfer
              SSPOutRegister = ColortoSend_u
              Wait While BF = Off

              SSPOutRegister = ColortoSend_h
              Wait While BF = Off

              SSPOutRegister = ColortoSend
              Wait While BF = Off

End Sub

'Returns the long of a color for a specific element
function GetLongArrayValueHandler ( in AddressArray(),  ElementPointer ) as long

    ElementPointer = ( ElementPointer * 4 ) + ElementPointer
    GetLongArrayValueHandler = AddressArray(ElementPointer)
    GetLongArrayValueHandler_H = AddressArray(ElementPointer+1)
    GetLongArrayValueHandler_U = AddressArray(ElementPointer+2)
    GetLongArrayValueHandler_E = AddressArray(ElementPointer+3)

end function

'Sets the array element to a specific long value
Sub SetLongArrayValueHandler ( in AddressArray(), ElementPointer, in ElementValue as Long )

    ElementPointer = ( ElementPointer * 4 ) + ElementPointer
    AddressArray(ElementPointer)   = ElementValue
    AddressArray(ElementPointer+1)  = ElementValue_H
    AddressArray(ElementPointer+2) = ElementValue_U
    AddressArray(ElementPointer+3) = ElementValue_E

end sub

sub ISR0

    TMR0IF = 0
    'Set InterPacketDelay running
    SetTimer(0, period_us)  ' Preload Count
    timeoutocurred =  1

End sub
