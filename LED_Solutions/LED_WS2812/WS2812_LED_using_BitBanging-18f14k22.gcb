'''A demonstration of GCBASIC supporting the WS2812 LED devices.
'''
'''This demonstration contains two operational demonstrations, and ONE method of driving the WS2812 LEDs.
'''
'''    The demo has a speed control using the Pot. This adjusts the timing.
'''
'''     Demos:
'''         1. Chaser - LED chaser
'''         2. Flash All LEDs
'''
'''     Methods of driving the WS2812:
'''         2. Bit Banging a SPI signal, again in terms of timing.
'''
'''
'''     Operation:
'''         By default the Chaser (#1) will be operational when applying power to the microcontroller and the WS2812 LEDs.
'''         Pressing the Switch will change the operational to the Flash All LEDs (#2), pressing the Switch again with return to Chaser operation.
'''
'''     Selecting the method of generating the specialised SPI signal:
'''         Using the bit Banging method used the WS2812BitBangSendData method
'''
'''     Configuration:
'''         WS2812 DIN is connected to PORTC.2.
'''         Pot is connected to PORTA.0
'''         Switch is pulled high and connected to PORTA.3
'''
'''
'''     General commentary:
'''         The Chaser demonstration simply writes to the WS2812 (for the number of LEDs) and indexes through the LEDS enabling the select color on each pass through the sequence.
'''         The Flash ALL LEDS simply writes to all the LEDS the same color.
'''
'''     This demonstration can be further developed - have fun.
'''
'''
'''************************************************************************
'''
'''PIC: 18f14k22
'''Compiler: GCB
'''IDE: GCB@SYN
'''Board: Xpress Evaluation Board
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.00
'''@date       2.09.2016
'''********************************************************************************
'''
'----- Configuration
    'Chip Settings.
    #chip 18f14k22, 16
    #option explicit
   #config MCLRE_OFF    'We need the switch to operate on this demo board


Setup:

    #define WS2812SendData WS2812BitBangSendData



; ----- Define Hardware settings

    '-------------------LATC-----------------
    'Bit#:  -7---6---5---4---3---2---1---0---
    '------|DIN|-----------------X-----------
    '

; ----- Constants

    'STANDARD BOARD CONSTANTS
    #define DS2  PORTC.0
    #define DS3  PORTC.1
    #define DS4  PORTC.2
    #define DS5  PORTC.3
    Dir    DS2 OUT
    Dir    DS3 OUT
    Dir    DS4 OUT
    Dir    DS5 OUT

    #define  Potentiometer      PORTA.0
    DIR      Potentiometer In

    #define SWITCH_DOWN         0
    #define SWITCH_UP           1
    #define SWITCH              PORTA.3
    Dir     SWITCH              In

    'WS2812 SPECIFIC CONSTANTS
    #define DIN PORTC.2
    Dir     DIN out

; ----- Variables

    Dim PIXELCOUNT, YLOOP, TIMEOUTOCURRED, SYSINTSTATESAVE0, XLOOP, DSISPLAYSTATE, SWITCHSTATE as Byte


    PixelCount = 16             'Number of WS2812 LEDs
    ColorofLED = 0              'Color to send to LEDs 6 byte  color address
    CurrentAddessedLED = 1      'Curent LED being address - between 1 and the PixelCount
    CurrentLEDColorSequence = 0 'Current LED sequence pointer. Simply points to the array of colors
    DSisplayState = 1         'DSisplayState = 0 or 1.  0 = LEDs addressed is sequence 1-2-3-4 etc OR 1 = ALL on 'not' sequential
    SwitchState = SWITCH_UP     'State of the switch tracker.  Toggle DSisplayState 1 | 0

    dim CurrentAddessedLED, CurrentLEDColorSequence as Byte
    dim ColortoSend, ColorofLED as long

; ----- Main body of program commences here.

MainCode:

  WS2812_Init

          ' Set of colors stored in an array for simplicity - they can be addressed with a pointer.
          dim colorArray( 20)     ' 5 long element in the array = 5 * 4 = 20

          ' Set the values of the array to the colors.  Five colors are defined. You can add more.....
          SetLongArrayValueHandler ( colorArray, 0, 0x00FF00 ) 'RED
          SetLongArrayValueHandler ( colorArray, 1, 0xFFFF00 ) 'yellow
          SetLongArrayValueHandler ( colorArray, 2, 0xFF0000 ) 'GREEN
          SetLongArrayValueHandler ( colorArray, 3, 0xFFFFFF ) 'WHITE
          SetLongArrayValueHandler ( colorArray, 4, 0x000000 ) 'BLACK

          do

            'This gets the long value of color from the array - CurrentLEDColorSequence is a index into the array
            ColorofLED = GetLongArrayValueHandler ( ColorArray, CurrentLEDColorSequence )

            'first loop - as we interate through the first loop to get the tracer display working
            for yloop = 1 to PixelCount

              'Ensure minimum delay has happended as the timing is critical
              'The delay is maintained by the timer0 Interrupt
              wait while timeoutocurred =  0
              intoff

              ' second loop - loop sends data to the LEDs
              for xloop = 1 to PixelCount

                      'Set the color or set to black
                      if xloop = CurrentAddessedLED then
                              ColortoSend = ColorofLED
                      Else
                          if DSisplayState = 1 then
                              ColortoSend = 0x000000 'black
                          Else
                              'This has to reset here... why? As the output function destroys the long value when ROTATING the number.
                              ColortoSend = ColorofLED
                          end if
                      end if

                      'Send the data - either to the CLC or bit banging
                      WS2812SendData ( ColortoSend )

              next

              'Increment the LED being addressed
              CurrentAddessedLED++

              'The minimum delay is 50us. This will SURELY never happen....
              dim mydelay as word
              mydelay =  readad10( AN0 )

              if mydelay > 0 then
                wait mydelay ms
              Else
                wait while readad10( AN0 ) = 0
              end if
              if mydelay > 1015 then
                do

                loop while readad10( AN0 ) > 1000
              end if

              if Switch = SWITCH_DOWN and SwitchState = SWITCH_UP Then
                  DSisplayState = !DSisplayState
                  SwitchState = SWITCH_DOWN
              end if

              if Switch = SWITCH_UP Then
                  SwitchState = SWITCH_UP
              end if

              'Set InterPacketDelay running
              SetTimer(0, period_us)  ' Preload Count
              timeoutocurred =  0
              Inton

            next

            'Reset the addressed LED
            CurrentAddessedLED = 1
            'Resequence LEDs the start of the color sequence
            CurrentLEDColorSequence = ( CurrentLEDColorSequence + 1 ) mod 4

          loop


end

; ----- Support methods.  Subroutines and Functions

'Initialise the LED device, timers etc.
sub WS2812_Init

    set DIN off

    timeoutocurred =  0
    #define period_us   0x38  'Period for LED internal processing
    InitTimer0(Osc, PS0_4)
    SetTimer(0, period_us)  ' Preload Count
    StartTimer 0
    On Interrupt Timer0Overflow call ISR0

    SET DIN On
    SET DIN OFF
    wait 500 us

End Sub

Sub WS2812BitBangSendData ( in ColortoSend as long )

              repeat 24
                IF ColortoSend.23 ON THEN
                  'High for to 1 bit
                  SET DIN ON
                else
                  'High and Low as fast as practical
                  SET DIN ON
                  SET DIN OFF
                END IF
                ROTATE ColortoSend left
                'Low for the 1 bit
                SET DIN OFF
              end repeat

End Sub

'Returns the long of a color for a specific element
function GetLongArrayValueHandler ( in AddressArray(),  ElementPointer ) as long

    ElementPointer = ( ElementPointer * 4 ) + ElementPointer
    GetLongArrayValueHandler = AddressArray(ElementPointer)
    GetLongArrayValueHandler_H = AddressArray(ElementPointer+1)
    GetLongArrayValueHandler_U = AddressArray(ElementPointer+2)
    GetLongArrayValueHandler_E = AddressArray(ElementPointer+3)

end function

'Sets the array element to a specific long value
Sub SetLongArrayValueHandler ( in AddressArray(), ElementPointer, in ElementValue as Long )

    ElementPointer = ( ElementPointer * 4 ) + ElementPointer
    AddressArray(ElementPointer)   = ElementValue
    AddressArray(ElementPointer+1)  = ElementValue_H
    AddressArray(ElementPointer+2) = ElementValue_U
    AddressArray(ElementPointer+3) = ElementValue_E

end sub

sub ISR0

    TMR0IF = 0
    'Set InterPacketDelay running
    SetTimer(0, period_us)  ' Preload Count
    timeoutocurred =  1

End sub
