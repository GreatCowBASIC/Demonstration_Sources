'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
''' This program: MEC-ROTARY-EC11-18F45k80.gcb
''' demonstrates the use of mechanical rotary encoder
''' with the ALPS-EC11.h include file.
'''
'''@author 	Immo,DL5KB&EvanV
'''@licence	GPL
'''@version	1.0b
'''@date   	Dec 2019
''' *****************************************
''' Program: Reads a rotary encoder ALPS EC11
'''
''' Turning the knob counts a number up or down in single steps,
''' corresponding to turning sense.
''' Pushing encoder switch, disables counting.
''' Pushing encoder switch again, enables counting again.
''' Encoder works to Vss (0V), ports are pulled up internal.
''' LCD is 2x16 connected as 4 Wire Data (LCD_IO 4).
''' *****************************************
''' CHANGE CHIP AND PORTS ACCORDING TO YOUR TESTING BOARD!
''' *****************************************

; ----- Configuration
  #chip 18F45k80, 8
  #option explicit

	' Load encoder header file
  #include <alps-ec11.h>

  #include <lcd2serialredirect.h>
; ----- Define Hardware settings
  ; Required to LCD to Serial redirection
   #define LCD_IO 0

   #define USART_BAUD_RATE 9600
   #define USART_DELAY 10 ms
   #define USART_BLOCKING
   wait 500 ms

; ----- Define Hardware settings
  'Set weak pullups on inputs port B
  RBPU = 0

  'Encoder connections defined here
  #define Alps_ENCODER_A		PortB.2  	'Clock

  #define Alps_ENCODER_B		PortB.0		'CW

  #define Alps_ENCODER_SW	PortB.3			'encoder-switch

   #define Alps_ENCODER_ENC_READ_DELAY 100

;---- variables
  Dim REFRESHLCD as Byte




; ----- Main body of program commences here.

;****************************************************************************
	'Enable portb.3, which is External Interrupt #3, as the source of the interrupt.
  'See the datasheet for more information.
  #define ExternalEventSource_Switch ExtInt3
  #define SetExternalEventEnable_Switch INT3IE
  #define ClearExternalEvent_Switch INT3IF

  SetExternalEventEnable_Switch = 1
  On Interrupt ExternalEventSource_Switch Call Alps_ENCODER_SW_Pressed

;****************************************************************************
  'Enable portb.2, which is External Interrupt #2, as the source of the interrupt.
  'See the datasheet for more information.
  #define ExternalEventSource_Clock ExtInt2
  #define SetExternalEventEnable_Clock INT2IE
  #define ClearExternalEvent_Clock INT2IF
  #define SetExternalEdge_Clock INTEDG2

	SetExternalEdge_Clock = 1
  SetExternalEventEnable_Clock = 1
  On Interrupt ExternalEventSource_Clock Call Alps_ENCODER_Clock_Event
  ;****************************************************************************
  'Prevent events from firing during initial LCD update
	IntOff
	CLS
  PRINT "Rotary Enc. Demo"
  Locate 1,0
  PRINT "GCBASIC"
  wait 2 s
  CLS
  Print "@Dec 2023"
  Locate 1,0
  PRINT "Immo's&Ano Code"
  wait 2 s
	CLS

	'Show what happening with encoder on the LCD
  locate 0,0
  print "Counting enabled"
  locate 1, 0
  print "Rotate encoder  "


  RefreshLCD = True
	inton

  do Forever

			' Alps_ESB_Bit is a bit that is exposed to detect state of button.  Detects event has occurred
			if Alps_ESB_Bit = 1 then

				'Update screen once on button button change
				if 	RefreshLCD = true then
						RefreshLCD = False

						CLS
        		locate 0,0
          	print "Counting enabled"

				end if

				' Alps_EncoderEvent is a bit that is exposed to detect state of button.  Detects event has occurred
				if Alps_EncoderEvent = 1  then

					Alps_EncoderEvent = 0

          locate 1,0
          'Alps_CurrentPosition is a public Integer value that is the current rotational value
          print Alps_CurrentPosition

					'Alps_Directn is a public bit that is the current direction of the encoder
          if Alps_Directn = 1 then
            print " (+) "
          Else
            print " (-) "
          end if

				end if

      else

        locate 0, 0
        print "Count disabled  "
        locate 1, 0
        print "  press button  "
				RefreshLCD= True

      end if

  loop

	End

; ----- Support methods.  Subroutines and Functions
