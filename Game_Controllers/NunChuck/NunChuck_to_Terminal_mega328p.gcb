'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program uses the Wii Nunchuck I2C devices and display the values to the attached PC terminal.
'''This program uses the hardware implementation of I2C and TWI for the Microchip and ATMEL microprocessors.  The microprocessor must have a suitable I2C or TWI module.
'''The hardware serial connections are shown in the program.
''':
'''The program has two display methods 1) A scrolling screen and 2) A hexview of the registers.
'''Change the GOTO's to select which option.
''':
''':
'''The NunChuck.h supports the following:
''':
'''Nunchuck_init alternatively you may have to use Nunchuck_Init_Alternate
'''Nunchuck_Send_Zero which simply set the joystick for the next read
'''Nunchuck_Read_Sensors which set the variables are follows:
'''		JoyX							a byte
'''		JoyY							a byte
'''		Nunchuck_AccelX		a word
'''		Nunchuck_AccelY		a word
'''		Nunchuck_AccelZ		a word
'''		Nunchuck_SwitchState where this is 0,1,2 or 3 dependent on switches C and Z
'''		NunChuck_Decode 	a function to decode the data. Not normally reqired.
''':
''':
''':

'''@author 	EvanV
'''@licence	GPL
'''@version	1.2a
'''@date   	01.11.15
'''********************************************************************************

; ----- Configuration
  #chip mega328p,16
  #option explicit
  #option explicit
  #include	<nunchuck.h>


	#define UseSerial


	'Nunchuck uses I2C!

  #define NunChuck_Address 0xA4
	#define Nunchuck_Read_DelayMs 2
; ----- Define Hardware settings
  ' Define I2C settings
  #define HI2C_BAUD_RATE 100
  #define HI2C_DATA PORTC.4
  #define HI2C_CLOCK PORTC.5
  'I2C pins need to be input for SSP module when used on Microchip device
'  Dir HI2C_DATA in
'  Dir HI2C_CLOCK in
  HI2CMode Master

''; ----- Define Hardware settings
'  ' Define I2C settings - CHANGE PORTS
'  #define I2C_MODE Master
'  #define I2C_DATA PORTC.4
'  #define I2C_CLOCK PORTC.5
'  #define I2C_DISABLE_INTERRUPTS ON
'  ' These are very important - get these correct!!
'  #define I2C_BIT_DELAY 20 us
'  #define I2C_CLOCK_DELAY 10 us
'  #define I2C_END_DELAY 10 us


	#ifdef UseSerial
     ' THIS CONFIG OF THE SERIAL PORT WORKS WITH A  MAX232 (or equiv) THEN TO PC
     ' USART settings - CHANGE PORTS if required
     #define USART_BAUD_RATE 115200
     Dir PORTc.6 Out
     Dir PORTc.7 In
     #define USART_TX_BLOCKING
     #define USART_DELAY 1 ms
     wait 2500 ms
	#endif
 Dir portb.5 out

; ----- Variables
  Dim Nunchuck_AccelX as Integer
  Dim Nunchuck_AccelY as Integer
  Dim Nunchuck_AccelZ as Integer

  dim TenthSeconds as byte
  Dim OLDJOYX, JOYY as Byte
  dim Pnt, AA, AAA, BBB, XX, JOYX, OLDJOYY, NUNCHUCK_STATUS, OLDNUNCHUCK_STATUS, NUNCHUCK_SWITCHSTATE as byte

; ----- Main body of program commences here.


				#ifdef UseSerial
          ' Now assumes Serial Terminal is operational

          'Clear Screen
          HSerSend 27
          wait 1 ms
          HSerPrint "["
          wait 1 ms
          Hserprint "2"
          wait 1 ms
          HSerPrint "J"
          wait 10 ms
          HSerSend 27
          HSerPrint "["
          HSerPrint 1
          HSerSend 59
          HSerPrint 1
          HSerPrint "H"
          HSerPrint "Nunchuck Hardware I2C "
          HSerPrint ChipNameStr
          HSerPrintCRLF
				#endif

				Dim xvector, yvector as Integer


 				Nunchuck_Init


				Goto ScrollDisplay
'        Goto HexDisplay

        end




HexDisplay:
		#ifdef UseSerial
       'Clear Screen
       wait 1 s
       HSerSend 27
       wait 1 ms
       HSerPrint "["
       wait 1 ms
       Hserprint "2"
       wait 1 ms
       HSerPrint "J"
       wait 10 ms
		#endif

      pnt=1
      dim mem(64)
      dim new(64)

      for aa =  1 to 64
        mem(aa) = 0xff
        new(aa)= 0xff
      next

			#ifdef UseSerial
        'Set Screen position
        HSerSend 27
        HSerPrint "["
        HSerPrint 1
        HSerSend 59
        HSerPrint 1
        HSerPrint "H"


        Repeat 4
          HSerPrint "FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF"
          HSerPrintCRLF
        end Repeat
			#endif


      do Forever
           HI2CSTART
           HI2CSEND ( NunChuck_address | 1 )
           for aaa = 1 to 64
           HI2CReceive ( new(aaa)  , ACK)
           next
           HI2CReceive ( new(255)  , NACK)
           HI2CStop
           wait 10 ms
            Nunchuck_Send_Zero
           pnt=1
           for aaa = 0 to 3

              for bbb = 0 to 15


               if mem(pnt) <> new(pnt) then

									#ifdef UseSerial
            				'Set Screen position
                    xx = (bbb * 3)+1
                    HSerSend 27
                    HSerPrint "["
                    HSerPrint aaa+1
                    HSerSend 59
                    HSerPrint xx
                    HSerPrint "H"
                    HSerPrint hex(new(pnt)) +" "
                  #endif
                    mem(pnt) = new(pnt)

                end if
                pnt++

              Next

           next aaa

      loop



ScrollDisplay:
				 dim Outstring as string * 48
         dim OutNum as word
         OutNum = 1


				 Do Forever

            Nunchuck_Read_Sensors


            if ( JoyX <> OldJoyX ) OR ( JoyY <> OldJoyY ) OR ( NunChuck_Status <> OldNunChuck_Status ) then

            	#ifdef UseSerial
              		OutNum++
									'Create a nice string
         					Outstring = pad ( str( OutNum ), 8)
                  Outstring = Outstring + str( JoyX )
                  Outstring = Outstring + ","
                  Outstring = Outstring + str( JoyY )
                  Outstring = pad( Outstring, 19 )
                  Outstring = Outstring + "     acc:"
                  Outstring = Outstring + pad ( str( Nunchuck_AccelX ), 3) + ","
                  Outstring = Outstring + pad ( str( Nunchuck_AccelY ), 3) + ","
                  Outstring = Outstring + pad ( str( Nunchuck_AccelZ ), 3)
                  Outstring = Outstring + " but:"
                  if ( Nunchuck_SwitchState AND 1 ) = 1 then
                  		Outstring = Outstring + "0,"
                  Else
                  		Outstring = Outstring + "1,"
                  end if
                  if ( Nunchuck_SwitchState AND 2 ) = 2 then
                  		Outstring = Outstring + "0"
                  Else
                  		Outstring = Outstring + "1"
                  end if

                  HSerPrint Outstring
                  HSerPrintCRLF
							#endif
              'turn on/off LED
							if Nunchuck_SwitchState = 0 then
              	portb.5 =1
              else
              	portb.5 =0
              end if

              OldNunChuck_Status = NunChuck_Status
              OldJoyX = JoyX
              OldJoyY = JoyY

            end if
         Loop


         end


; ----- Support methods.  Subroutines and Functions

