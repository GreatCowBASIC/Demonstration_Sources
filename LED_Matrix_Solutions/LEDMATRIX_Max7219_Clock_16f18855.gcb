'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program shows a clock on the LED Matrix
'''This is not an accurate clock as this uses the internal clock source. Use an external or better clock source to make a real clock.
''':
'''You must select the correct Pset constant to match your LED Matrix.  See Configuration below.
''':
'''@author  Evan R. Venn
'''@licence GPL
'''@version 1.00
'''@date    27.01.2017
'''********************************************************************************
; ----- Configuration
  #chip 16f18855,32
  #config MCLRE=on
  #include <max7219_ledmatrix_driver.h>
  #option Explicit

  #startup InitPPS, 85
  Sub InitPPS
    #ifdef MAX7219_LEDMatrix_HardwareSPI
      UNLOCKPPS
              SSP1DATPPS = 0x0C;   //RB4->MSSP1:SDI1;
              RB5PPS = 0x15;   //RB5->MSSP1:SDO1;
              RB3PPS = 0x14;   //RB3->MSSP1:SCK1;
      LOCKPPS
    #endif
  End sub



; ----- Constants
  'Set SPI pins for the Max7219
  #define Max7219_DI    portb.4
  #define Max7219_DO    portb.5
  #define Max7219_SCK   portb.3
  #define Max7219_CS    portc.3

  'Specifics for device configuration
  #define MAX7219_X_Devices 4
  #define MAX7219_LEDMatrix_HardwareSPI     ' remove and make a comment out if you want to use Software SPI for this device

  'Choose one of the constants below to match the orientation of your LED Matrixes.
  'All the LED Matrixes must have the same orientation.
  #define Pset max7219_LEDMatrix_PSet_0
  '#define Pset max7219_LEDMatrix_PSet_90
  '#define Pset max7219_LEDMatrix_PSet_180
  '#define Pset max7219_LEDMatrix_PSet_270


'; ----- Main body of program commences here.


  'Start of clock code - this is not highly accurate - get a proper clock source!
  dim mytime as long
  dim mystring as string * 5
  dim secs, mins, hours as byte

  'start time 16:49
  myTime = 900+109

  '   Initialise the timer.
  '   Firstly tell the compiler to use a 16bit timer for this demonstration
      #define TMR0_16BIT

  '     For this timer we need the following:
  '       Prescaler
  '           1:256
  '            HF int Osc, and
  '            NOT to sync Timer
  '       Post scaler
  '           1:2
      InitTimer0 Osc, PRE0_256 + TMR0_HFINTOSC ,  POST0_2
  '     Start the Timer
      StartTimer 0

      'Event every 1 sec
      Settimer ( 0 , 0x0bdc  )


    do

        secs = myTime mod 60
        mins = myTime mod 3600 / 60
        mystring=""

        dim minutepassed as byte
        minutepassed=0
        do while minutepassed <> 60
            'wait for the event
            wait while TMR0IF = 0
            ' Clearing Timer flag will reset event
            TMR0IF = 0
            'Set timer to 1s before the next event occurs.  This as close as you can get to 1s
             Settimer ( 0 , 0x0bdc )
             minutepassed++


              Max7219_LEDMatrix_ClearBuffer
              if minutepassed.0 = 1 then
                pset 0,0, 1
              Else
                pset 0,0, 0
              end if

              if mins < 10 then
                myString = "0" + str(mins)
              Else
                myString = str(mins)
              end if
              if secs < 10 then
                myString = myString +":0" + str(secs)
              Else
                myString = myString +":" + str(secs)
              end if

              GLCDPrint ( 2, 0, myString )
              Max7219_LEDMatrix_Update

        loop

        if myTime = 1440 then mytime = 0  'end of day
        mytime++
    loop
