'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program shows some very simple maths and the method to handle the scope of variables.
'''  This shows the reults on a simple GLCD SSD1306.
'''
'''1) Change the following and see the result. Try other types
'''     Sub MyCalc ( in wordvarsub as word , in intvarsub as integer).
'''2) Remove the following variable definitionsand see the result
'''
'''    dim wordvarsub as word
'''
'''    dim intvarsub as Integer
'''
'''3) Change the casting on this line subcalculation = [word]wordvarsub + [integer]intvarsub
'''
'''4) And, create you own tests to see the results.
'''
'''The answer should alway be 95 if it not - try to figure why after thinking about the scope of variables.
'''
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code, change to LCD or Serial for you own needs
'''
'''
'''@author  EvanV
'''@licence GPL
'''@version 1.1
'''@date    19.9.17
'''************************************************************************
'''
'''  PIC: 18f26k22
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: SmartPIC 18 Board
'''  Date: 29.8.17
'''
' ----- Configuration
    'Chip Settings.
    #chip 18f26k22, 16
     #config MCLRE=on
    #option Explicit

    '' -------------------PORTA----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---------------------------------
    ''-----------------------------------------
    ''

    '' -------------------PORTB----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -------| O | A |-------| O | I |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---| TX|---|SDA|CLK| X |---------
    ''-----------------------------------------
    ''

    #define LEDD1 PORTB.1
    #define LEDD2 PORTB.5
    #define Potentiometer   PORTC.5
    #define LDR             PORTB.4
    #define SwitchIn        PORTB.0
    #define LCDControl      PORTC.2

    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     Potentiometer In   'this is the AN17 port
    Dir     LDR           In   'this is the AN11 port
    Dir     SwitchIn      In
    Dir     LCDControl    Out

    'Always set the LCD on (high) to Shut OFF the LCD-Backlight. This is required when powered from a PicKit.
    LCDControl = 1

    '*****************************************************************************************************
    'Main program commences here.. everything before this is setup for the board.

    ' Define I2C settings
    #define HI2C_BAUD_RATE 400
    #define HI2C_DATA PORTC.4
    #define HI2C_CLOCK PORTC.3
    'Initialise I2C Slave
    'I2C pins need to be input for SSP module - this is not an option
    Dir HI2C_DATA in
    Dir HI2C_CLOCK in
    'MASTER
    HI2CMode Master


    #include <glcd.h>
    #define GLCD_TYPE GLCD_TYPE_SSD1306_32
    #define GLCD_I2C_Address 0x78
    #define GLCD_PROTECTOVERRUN
    #define GLCD_OLED_FONT


'************************************** EVERYTHING ABOVE HERE IS SETUP AND PREABLE *** CHANGE TO MEET YOUR OWN NEEDS ******************************************


 'See Variable Lifecycle in the HELP
    dim myString as string * 28
    myString = "Great Cow BASIC 2019"
    GLCDDrawString(2, 24, myString)

    dim signedvar as Integer
    dim wordvar, wordresult as word

     wordvar = 300
     signedvar= -5

     'Complete the calculation
     wordresult = signedvar + wordvar

     'Show the result
     GLCDPrint(0,  0, pad(str(wordresult),4) )  'Padding a string to improve the display only... you can print the just the number

     'Call a method to complete the same calculation
     MyCalc ( wordvar, signedvar )


    end

sub MyCalc ( in wordvarsub , in intvarsub )  'you want to define you input variable types here to support overloading of the same method

    'Ensure the variable type is correct in this method
    dim wordvarsub as word
    'Ensure the variable type is correct in this method
    dim intvarsub as Integer

    'Define the assignment variable
    dim subcalculation as word

    'Define a string for the output
    dim subcalculationstring as string * 16

    'Complete the calculation - this is where the real maths are done!
    subcalculation = wordvarsub + intvarsub

    'Show the maths results
    GLCDPrint(0,  8, pad(str(subcalculation), 4) )

    'Build up a string to show the full maths results
    subcalculationstring = str(wordvarsub) + "+"
    if intvarsub => 0 then
       subcalculationstring = subcalculationstring + str(abs(intvarsub ))
    else
      subcalculationstring = subcalculationstring + "-" + str(abs(intvarsub ))
    end if

    subcalculationstring = subcalculationstring + "=" + str(subcalculation)

    GLCDPrint(24,  8, subcalculationstring  )

end sub
