
'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the ILI9341 GLCD capabilities.
'''It is a nice graphical LCD, suitable for a lot of various projects.
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
''':
'''This has been tested using the hardware SPI option.
''':
''':
'''@author  EvanV
'''@licence GPL
'''@version 1.0
'''@date    29/03/19
'''********************************************************************************

      #chip 18f24k42, 64
     #config MCLRE=on
    #option Explicit
    #include <glcd.h>
    #include <xpt2046.h>

    #define GLCD_TYPE GLCD_TYPE_ILI9341

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.5.25
    'PinManager data: Not available (3)
    'Generated for 18F24K42
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F24K42

    Sub InitPPS

        'This has been added to turn off PPS SPI when in SPI software mode
        #ifdef ILI9341_hardwarespi
            'Module: SPI1
            SPI1SDIPPS = 0x0014    'RC4 > SDI1
            RC5PPS = 0x001F    'SDO1 > RC5
            RC3PPS = 0x001E    'SCK1 > RC3
            SPI1SCKPPS = 0x0013    'RC3 > SCK1 (bi-directional)
        #endif

    End Sub
    'Template comment at the end of the config file


    'Pin mappings for ILI9341
    #define GLCD_DC portb.0
    #define GLCD_CS portb.2
    #define GLCD_RESET portb.1

    'This is a PPS chip, so, needs to make the PPS match these assignments
    'The following example is commented out intentionally
    '#define GLCD_DI portc.4
    #define GLCD_DO portc.5
    #define GLCD_SCK portc.3

    #define ILI9341_hardwarespi

    'For the K42 type SPI MODULE ONLY hardware SPI only
    'You can specify an SPI baud rate - the baud rate is dependent on the chip frequency!
    'If you get nothing, you have exceeded the SPI modules capabilites, so, slow down the BAUD RATE or use the SPI_BAUD_RATE_REGISTER constant, shown below.

    'The default SPI_BAUD_RATE is 1/4th of the clock frequency in khz. Khz is used to allow for fine adjustment
    'The following example is commented out intentionally
        '#define SPI_BAUD_RATE 32000

    'or, use an explicit constant as show below
    'The following example is commented out intentionally
        '#define SPI_BAUD_RATE_REGISTER 9

    'Optionally, you can define the HWSPIMode by using #define HWSPIMode masterfast where #define HWSPIMode is masterslow|master|masterfast
    'This will overwrite the default in the GLCD SPI library.  This is so users do not have to change the library.
    'the default is "master"
    'The following example can be commented out if you want to use the default value
        '#define HWSPIMode master



 '******************************************************************************************************
    'Setup the XPT2046

    'Typical calibration range for Hardware SPI when using XPT2046
    'for 320 * 240 screeen... may be different for others
    #define XPT2046XMIN   15
    #define XPT2046YMIN   14
    #define XPT2046XMAX   110
    #define XPT2046YMAX   113
    #define XPT2046_ReadSamples 15

    'Typical Calibration range for Software SPI when using XPT2046
'    #define XPT2046XMIN   30
'    #define XPT2046YMIN   25
'    #define XPT2046XMAX   210
'    #define XPT2046YMAX   225


    #define XPT2046_DI       portc.4          ' Data in | MISO
    #define XPT2046_DO       portc.5          ' Data out | MOSI
    #define XPT2046_SCK      portc.3          ' Clock Line
    #define XPT2046_CS       portc.1           ' Chip select line
    #define XPT2046_IRQ      portc.0
    #define XPT2046_HardwareSPI                  ' remove/comment out if you want to use software SPI - must use same method as GLCD
    'Optionally, you can define the HWSPIMode by using #define HWSPIMode masterfast where #define HWSPIMode is masterslow|master|masterfast
    'This will overwrite the default in the XPT2046 library.  This is so users do not have to change the library.
    'the default is "masterfast"
    'The following example is commented out intentionally
        '#define HWSPIMode masterfast



    'Set the initial calibration - shown here to show the method.
    'If you rotate the screen then you will have to call the method to reset these parameters.
    SetCalibation_XPT2046 ( XPT2046XMIN, XPT2046XMAX, XPT2046YMIN, XPT2046YMAX, GLCD_WIDTH, GLCD_HEIGHT  )

    '******************************************************************************************************
    '******************************************************************************************************
    'Main program
    GLCDRotate Portrait_Rev
    GLCDCLS TFT_NAVY
    SetCalibation_XPT2046 ( XPT2046XMIN, XPT2046XMAX, XPT2046YMIN, XPT2046YMAX, GLCD_WIDTH, GLCD_HEIGHT )
    ScreenLayout

    dim Xconverge, Yconverge as Integer
    dim convergeCounter as byte
    do

      Xconverge = 0
      Yconverge = 0
      convergeCounter = 1

      filledbox Current_GLCD_WIDTH, 0, Current_GLCD_WIDTH-10, 10, TFT_RED
      'always wait for touch event
      wait while isTouched_XPT2046
      filledbox Current_GLCD_WIDTH, 0, Current_GLCD_WIDTH-10, 10, TFT_YELLOW
      do
          repeat 5
              'get the values -
              GetXY_XPT2046( XTouchPoint_XPT2046, YTouchPoint_XPT2046 )
          end Repeat
          'test for settling by testing for convergance
          if ABS( ( Xconverge - XTouchPoint_XPT2046 ) ) > 1  or  ABS( ( Yconverge - YTouchPoint_XPT2046 ) ) > 1  then
              Xconverge = XTouchPoint_XPT2046
              Yconverge = YTouchPoint_XPT2046
              convergeCounter++
          Else
              'converged
              exit do
          end if
      Loop
      'Flip the data to handle for the screen rotation
      YTouchPoint_XPT2046 = Current_GLCD_HEIGHT - YTouchPoint_XPT2046
      filledbox Current_GLCD_WIDTH, 0, Current_GLCD_WIDTH-10, 10, TFT_GREEN
        if XTouchPoint_XPT2046 > Current_GLCD_WIDTH-59 and YTouchPoint_XPT2046 > Current_GLCD_HEIGHT-20  then
          if XTouchPoint_XPT2046 < Current_GLCD_WIDTH and  YTouchPoint_XPT2046 < Current_GLCD_HEIGHT then
            'clear
            ScreenLayout
          end if
      else

          FilledCircle XTouchPoint_XPT2046, YTouchPoint_XPT2046, 3, TFT_LIGHTGREY

          'Show the raw data
          GLCDPrint ( 24, 56, pad(str(XTouchPoint_XPT2046raw),3 ) )
          GLCDPrint ( 24, 72, pad(str(YTouchPoint_XPT2046raw),3 ) )
          GLCDPrint ( 24, 90, pad(str(convergeCounter ) ,3 ) )

          'Automatically adjust the values to min and max
          'Not needed in a real program use SetCalibation_XPT2046( XPT2046_Xmin, XPT2046_Xmax, XPT2046_Ymin, XPT2046_Ymax )
          if XTouchPoint_XPT2046raw < XPT2046_Xmin then XPT2046_Xmin = XTouchPoint_XPT2046raw
          if YTouchPoint_XPT2046raw < XPT2046_Ymin then XPT2046_Ymin = YTouchPoint_XPT2046raw
          if XTouchPoint_XPT2046raw > XPT2046_Xmax then XPT2046_Xmax = XTouchPoint_XPT2046raw
          if YTouchPoint_XPT2046raw  > XPT2046_Ymax then XPT2046_Ymax = YTouchPoint_XPT2046raw

          'show the values
          GLCDPrint ( 102, 56, pad(str(XPT2046_Xmin),3 ) )
          GLCDPrint ( 102, 72, pad(str(XPT2046_Ymin),3 ) )
          GLCDPrint ( 162, 56, pad(str(XPT2046_Xmax),3 ) )
          GLCDPrint ( 162, 72, pad(str(XPT2046_Ymax),3 ) )

          GLCDPrint ( 24, 230, pad(str(XTouchPoint_XPT2046),5 ))
          GLCDPrint ( 24, 246, pad(str(YTouchPoint_XPT2046),5 ))

          'do not hammer the touch
          wait 20 ms

      end if

    loop


sub ScreenLayout

        #define GLCD_OLED_FONT
        GLCDfntDefaultsize = 2
        GLCDFontWidth = 5
        'Layout the screen
        GLCDCLS
        GLCDPrint ( 2, 3, "XPT2046 demonstration 2023")
        line 0, 34, Current_GLCD_WIDTH, 34
        line 0, 128, Current_GLCD_WIDTH, 128
        line 0, 220, Current_GLCD_WIDTH, 220
        GLCDPrint ( 2, 25, "Dynamic Calibration")
        GLCDPrint ( 22, 40, "Raw    Min   Max")
        GLCDPrint ( 2, 56, "X:")
        GLCDPrint ( 2, 72, "Y:")
        GLCDPrint ( 2, 90, "C:")

        GLCDPrint ( 2, 122, "Current Calibration")
        GLCDPrint ( 2, 146, "X:")
        GLCDPrint ( 2, 162, "Y:")
        GLCDPrint ( 102, 146, pad(str(XPT2046_Xmin),3 ) )
        GLCDPrint ( 102, 162, pad(str(XPT2046_Ymin),3 ) )
        GLCDPrint ( 162, 146, pad(str(XPT2046_Xmax),3 ) )
        GLCDPrint ( 162, 162, pad(str(XPT2046_Ymax),3 ) )
        GLCDPrint ( 2, 214, "Scaled")
        GLCDPrint ( 2, 230, "X:")
        GLCDPrint ( 2, 246, "Y:")

        GLCDPrint ( 120, 214, "GLCD Size")
        GLCDPrint ( 120, 230, "X:" + Str( Current_GLCD_WIDTH ) )
        GLCDPrint ( 120, 246, "Y:" + Str( Current_GLCD_HEIGHT ) )


        GLCDfntDefaultsize = 1
        GLCDPrint ( 2, Current_GLCD_HEIGHT-17, "v0.9c")
        GLCDfntDefaultsize = 2

        filledbox Current_GLCD_WIDTH, 0, Current_GLCD_WIDTH-10, 10, TFT_RED

        Dim oldGLCDBackground as word
        oldGLCDBackground = GLCDBackground
            GLCDBackground = TFT_WHITE
            GLCDPrint ( Current_GLCD_WIDTH-58, Current_GLCD_HEIGHT-18, "Clear", TFT_BLACK )
        GLCDBackground = oldGLCDBackground

        ' ------ Version Control - optional
        #include "GCBVersionNumber.cnt"
        'Include the GCBVersionNumber.cnt to increment versionString and create the build time string called GCBBuildTimeStr.
        ' versionString a string is created automatically.
        ' GCBBuildTimeStr is a string that is also created automatically.
        ' use "GCBVersionNumber.cnt" as this will create a local copy of the versionString tracker.
        ' if you use <GCBVersionNumber.cnt> this is a system wide versionString tracker.

        dim versionString as string * 40
        versionString = "Build: "+GCBBuildStr
        versionString = versionString + "@"+GCBBuildTimeStr
        GLCDfntDefaultsize = 1
        GLCDPrint ( 2, Current_GLCD_HEIGHT-10, versionString)
        GLCDfntDefaultsize = 2
        ' ------ End of Version Control - optional
End Sub
