'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the Touch Screen adapater working with the SSD1289 GLCD display.
'''The XPT2046 is a 8-bit sampling Analog-to-Digital Converter (ADC) with a synchronous serial interface and low
'''on-resistance switches for driving touch screens.
''':
'''It is a low power, high speed device with onboard switches make the XPT2046 ideal for battery-operated systems
'''such as personal digital assistants with resistive touch screens and other portable equipment.
'''The ADS7843 is available in an SSOP-16 package and is specified over the -40°C to +85°C temperature range.
''':
''':
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''@author  EvanV
'''@licence GPL
'''@version 1.0
'''@date    30.12.2018
'''********************************************************************************

        #chip mega2560, 16
    #option explicit

    'Include files
    #include <glcd.h>
    'GLCD Device Selection
    #define GLCD_TYPE GLCD_TYPE_SSD1289
    #include <xpt2046.h>



    'Define ports for the SSD1289 display
    #define GLCD_WR   PORTG.2
    #define GLCD_CS   PORTG.1
    #define GLCD_RS   PORTD.7
    #define GLCD_RST  PORTG.0
    #define GLCD_DB0  PORTC.0
    #define GLCD_DB1  PORTC.1
    #define GLCD_DB2  PORTC.2
    #define GLCD_DB3  PORTC.3
    #define GLCD_DB4  PORTC.4
    #define GLCD_DB5  PORTC.5
    #define GLCD_DB6  PORTC.6
    #define GLCD_DB7  PORTC.7
    #define GLCD_DB8  PORTA.0
    #define GLCD_DB9  PORTA.1
    #define GLCD_DB10 PORTA.2
    #define GLCD_DB11 PORTA.3
    #define GLCD_DB12 PORTA.4
    #define GLCD_DB13 PORTA.5
    #define GLCD_DB14 PORTA.6
    #define GLCD_DB15 PORTA.7


    '******************************************************************************************************
    'Setup the XPT2046

    'Typical calibration range for Hardware SPI when using XPT2046
    'for 320 * 240 screeen... may be different for others
    #define XPT2046XMIN   13
    #define XPT2046YMIN   20
    #define XPT2046XMAX   241
    #define XPT2046YMAX   246
    #define XPT2046_ReadSamples 15


    #define XPT2046_Do       PORTG.5  ' Arduino Mega D4
    #define XPT2046_Di       PORTE.5  ' Arduino Mega D3
    #define XPT2046_SCK      PORTH.3  ' Arduino Mega D6
    #define XPT2046_CS       PORTE.3  ' Arduino Mega D5
    #define XPT2046_IRQ      PORTE.4  ' Arduino Mega D2
    'The mega2560 does not suppport hardware SPI!! So, for this hardware configuration tested, using Software SPI by default

    'Set the initial calibration - shown here to show the method.
    'If you rotate the screen then you will have to call the method to reset these parameters.
    SetCalibation_XPT2046 ( XPT2046XMIN, XPT2046XMAX, XPT2046YMIN, XPT2046YMAX, GLCD_WIDTH, GLCD_HEIGHT  )

    '******************************************************************************************************
    'Main program
    GLCDRotate Portrait_Rev
    GLCDCLS SSD1289_NAVY



    SetCalibation_XPT2046 ( XPT2046XMIN, XPT2046XMAX, XPT2046YMIN, XPT2046YMAX, GLCD_WIDTH, GLCD_HEIGHT )
    ScreenLayout

    dim Xconverge, Yconverge as Integer
    dim convergeCounter as byte
    dim oldGLCDBackground as word

    do

      Xconverge = 0
      Yconverge = 0
      convergeCounter = 1

      filledbox Current_GLCD_WIDTH, 0, Current_GLCD_WIDTH-10, 10, SSD1289_RED
      'always wait for touch event
      wait while isTouched_XPT2046
      filledbox Current_GLCD_WIDTH, 0, Current_GLCD_WIDTH-10, 10, SSD1289_YELLOW
      do
          repeat 5
              'get the values -
              GetXY_XPT2046( XTouchPoint_XPT2046, YTouchPoint_XPT2046 )
          end Repeat
          'test for settling by testing for convergance
          if ABS( ( Xconverge - XTouchPoint_XPT2046 ) ) > 1  or  ABS( ( Yconverge - YTouchPoint_XPT2046 ) ) > 1  then
              Xconverge = XTouchPoint_XPT2046
              Yconverge = YTouchPoint_XPT2046
              convergeCounter++
          Else
              'converged
              exit do
          end if
      Loop
      'Flip the data to handle for the screen rotation
      XTouchPoint_XPT2046 = Current_GLCD_WIDTH - XTouchPoint_XPT2046


      filledbox Current_GLCD_WIDTH, 0, Current_GLCD_WIDTH-10, 10, SSD1289_GREEN
        if XTouchPoint_XPT2046 > Current_GLCD_WIDTH-59 and YTouchPoint_XPT2046 > Current_GLCD_HEIGHT-20  then
          if XTouchPoint_XPT2046 < Current_GLCD_WIDTH and  YTouchPoint_XPT2046 < Current_GLCD_HEIGHT then
            'clear
            ScreenLayout
          end if
      else

          FilledCircle XTouchPoint_XPT2046, YTouchPoint_XPT2046, 3, SSD1289_WHITE

          'Show the raw data
          GLCDBackground = oldGLCDBackground
          GLCDPrint ( 24, 56, pad(str(XTouchPoint_XPT2046raw),3 ) )
          GLCDPrint ( 24, 72, pad(str(YTouchPoint_XPT2046raw),3 ) )
          GLCDPrint ( 24, 90, pad(str(convergeCounter ) ,3 ) )

          'Automatically adjust the values to min and max
          'Not needed in a real program use SetCalibation_XPT2046( XPT2046_Xmin, XPT2046_Xmax, XPT2046_Ymin, XPT2046_Ymax )
          if XTouchPoint_XPT2046raw < XPT2046_Xmin then XPT2046_Xmin = XTouchPoint_XPT2046raw
          if YTouchPoint_XPT2046raw < XPT2046_Ymin then XPT2046_Ymin = YTouchPoint_XPT2046raw
          if XTouchPoint_XPT2046raw > XPT2046_Xmax then XPT2046_Xmax = XTouchPoint_XPT2046raw
          if YTouchPoint_XPT2046raw  > XPT2046_Ymax then XPT2046_Ymax = YTouchPoint_XPT2046raw

          GLCDForeground = SSD1289_WHITE
          'show the values
          GLCDPrint ( 102, 56, pad(str(XPT2046_Xmin),3 ) )
          GLCDPrint ( 102, 72, pad(str(XPT2046_Ymin),3 ) )
          GLCDPrint ( 162, 56, pad(str(XPT2046_Xmax),3 ) )
          GLCDPrint ( 162, 72, pad(str(XPT2046_Ymax),3 ) )

          GLCDPrint ( 24, 230, pad(str(XTouchPoint_XPT2046),5 ))
          GLCDPrint ( 24, 246, pad(str(YTouchPoint_XPT2046),5 ))

          'do not hammer the touch
          wait 20 ms

      end if

    loop


sub ScreenLayout

        #define GLCD_OLED_FONT
        GLCDfntDefaultsize = 2
        GLCDFontWidth = 5
        'Layout the screen
        GLCDCLS
        GLCDPrint ( 2, 3, "XPT2046 demonstration 2023")
        line 0, 32, Current_GLCD_WIDTH, 32
        line 0, 128, Current_GLCD_WIDTH, 128
        line 0, 220, Current_GLCD_WIDTH, 220
        GLCDPrint ( 2, 25, "Dynamic Calibration")
        GLCDPrint ( 22, 40, "Raw    Min   Max")
        GLCDPrint ( 2, 56, "X:")
        GLCDPrint ( 2, 72, "Y:")
        GLCDPrint ( 2, 90, "C:")

        GLCDPrint ( 2, 122, "Current Calibration")
        GLCDPrint ( 2, 146, "X:")
        GLCDPrint ( 2, 162, "Y:")
        GLCDPrint ( 102, 146, pad(str(XPT2046_Xmin),3 ) )
        GLCDPrint ( 102, 162, pad(str(XPT2046_Ymin),3 ) )
        GLCDPrint ( 162, 146, pad(str(XPT2046_Xmax),3 ) )
        GLCDPrint ( 162, 162, pad(str(XPT2046_Ymax),3 ) )
        GLCDPrint ( 2, 214, "Scaled")
        GLCDPrint ( 2, 230, "X:")
        GLCDPrint ( 2, 246, "Y:")

        GLCDPrint ( 120, 214, "GLCD Size")
        GLCDPrint ( 120, 230, "X:" + Str( Current_GLCD_WIDTH ) )
        GLCDPrint ( 120, 246, "Y:" + Str( Current_GLCD_HEIGHT ) )


        GLCDfntDefaultsize = 1
        GLCDPrint ( 2, Current_GLCD_HEIGHT-19, "v0.9c")
        GLCDfntDefaultsize = 2

        filledbox Current_GLCD_WIDTH-1, 0, Current_GLCD_WIDTH-11, 10, SSD1289_RED

        filledbox ( Current_GLCD_WIDTH-58, Current_GLCD_HEIGHT-18, Current_GLCD_WIDTH, Current_GLCD_HEIGHT, SSD1289_WHITE )
        oldGLCDBackground = GLCDBackground
        GLCDBackground = SSD1289_WHITE
        GLCDPrint ( Current_GLCD_WIDTH-58, Current_GLCD_HEIGHT-18, "Clear", SSD1289_BLACK )
        GLCDBackground = oldGLCDBackground

        ' ------ Version Control - optional
        #include "GCBVersionNumber.cnt"
        'Include the GCBVersionNumber.cnt to increment versionString and create the build time string called GCBBuildTimeStr.
        ' versionString a string is created automatically.
        ' GCBBuildTimeStr is a string that is also created automatically.
        ' use "GCBVersionNumber.cnt" as this will create a local copy of the versionString tracker.
        ' if you use <GCBVersionNumber.cnt> this is a system wide versionString tracker.

        dim versionString as string * 40
        versionString = "Build: "+GCBBuildStr
        versionString = versionString + "@"+GCBBuildTimeStr
        GLCDfntDefaultsize = 1
        GLCDPrint ( 2, Current_GLCD_HEIGHT-10, versionString, SSD1289_WHITE)
        GLCDfntDefaultsize = 2
        ' ------ End of Version Control - optional
End Sub
