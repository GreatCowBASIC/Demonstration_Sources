'''A demonstration program for GCBASIC
'''---------------------------------------------------------------------------------
'''This program uses the SoftSerial library for serial sending and receiving.
''' SoftSerial uses ASM routines for minimal overhead.
''' This samples uses the Interrupt-On-Change to detect incoming data.
''' Ser1Receive normally stops programm execution until a startbit-impulse is detected;
''' "#define SERx_RXNOWAIT On" abrogates that and shortens the startbit delay.
''' This is necessary to compensate the additional time used for interrupt-handling.
''':
'''@author  Frank Steinberg
'''@licence GPL
'''@version 1.1
'''@date    29.01.2017
'''********************************************************************************

; ----- Configuration
#chip 12F1501, 1
#option Explicit

; ----- Include library
#include <softserial.h>

; ----- Config Serial UART :
#define SER1_BAUD 9600   ; baudrate must be defined
#define SER1_DATABITS 8    ; databits optional (default = 8)
#define SER1_STOPBITS 1    ; stopbits optional (default = 1)
#define SER1_INVERT Off    ; inverted polarity optional (default = Off)
; Config I/O ports for transmitting:
#define SER1_TXPORT PORTA  ; I/O port (without .bit) must be defined
#define SER1_TXPIN 5       ; portbit  must be defined
; Config I/O ports for receiving:
#define SER1_RXPORT PORTA  ; I/O port (without .bit) must be defined
#define SER1_RXPIN 4       ; portbit  must be defined
; RXNOWAIT disables waiting for stopbit and reduces first delaytime
; to compensate overhead for invoking an interrupt:
#define SER1_RXNOWAIT On   ; don't wait for stopbit optional (default = Off)

; ----- Variables
Dim RecByte As Byte
Dim RxIndicator As Byte

; ----- Config Interrupt
On Interrupt PORTAChange Call ISR_StartReceive
Set IOCAN.SER1_RXPIN On     ; set portbit in INTERRUPT-ON-CHANGE PORTA NEGATIVE EDGE REGISTER

; ----- Main body of program commences here.
 Ser1Send 10   'new line in Terminal
 Ser1Send 13
 Ser1Print "Please send a byte!"

 RxIndicator = 0

 Do Forever

   ;we can do someting else here!

   If RxIndicator Then       'if an interrupt occured
     Ser1Send 10             'new line in Terminal
     Ser1Send 13
     Ser1Print "You sent: "
     Ser1Send RecByte
     RxIndicator -= 1        'reset "flag"
   End If

 Loop


Sub ISR_StartReceive

  IntOff                    'ignore interrupts while receiving
  Set IOCAF.SER1_RXPIN Off  'flag bit must be cleared by software
  Set IOCAN.SER1_RXPIN Off  'bit has to be cleared; otherwise we don't get data
  RecByte = Ser1Receive     'get new data
  Set IOCAN.SER1_RXPIN On   'bit has to be re-enabled for next byte
  RxIndicator += 1          'tell mainprog, that we have new data
  IntOn                     're-enable interrupts

End Sub
