'''A demonstration program for GCBASIC
'''---------------------------------------------------------------------------------
'''This program uses the SoftSerial library for serial sending and receiving.
''' SoftSerial uses ASM routines for minimal overhead.
''' This samples uses a pin change interrupt to detect incoming data.
''' Ser1Receive normally stops programm execution until a startbit-impulse is detected;
''' "#define SERx_RXNOWAIT On" abrogates that and shortens the startbit delay.
''' This is necessary to compensate the additional time used for interrupt-handling.
''':
'''@author  Frank Steinberg
'''@licence GPL
'''@version 1.0
'''@date    17.01.2017
'''********************************************************************************

; ----- Configuration
#chip mega328P, 16     'Arduino UNO
#option Explicit

; ----- Include library
#include <softserial.h>

; ----- Config Serial UART (we use the onboard USB-serial converter):
#define SER1_BAUD 256000   ; baudrate must be defined
#define SER1_DATABITS 8    ; databits optional (default = 8)
#define SER1_STOPBITS 1    ; stopbits optional (default = 1)
#define SER1_INVERT Off    ; inverted polarity optional (default = Off)
; Config UNOs Tx-Pin (PortD.1) for transmitting:
#define SER1_TXPORT PORTD  ; I/O port (without .bit) must be defined
#define SER1_TXPIN 1       ; portbit  must be defined
; Config UNOs Rx-Pin (PortD.0) for receiving:
#define SER1_RXPORT PORTD  ; I/O port (without .bit) must be defined
#define SER1_RXPIN 0       ; portbit  must be defined
; RXNOWAIT disables waiting for stopbit and reduces first delaytime
; to compensate overhead for invoking an interrupt:
#define SER1_RXNOWAIT On   ; don't wait for stopbit optional (default = Off)

; ----- Variables
Dim RecByte As Byte
Dim RxIndicator As Byte

; ----- Config Interrupt
Set PCMSK2.PCINT16 On  'Rx Pin on Arduino UNO is PCINT16
On Interrupt PinChange2 Call ISR_StartReceive  'activate PinChangeInterrupt2

; ----- Main body of program commences here.
 Ser1Send 10   'new line in Terminal
 Ser1Send 13
 Ser1Print "Please send a byte!"

 RxIndicator = 0

 Do Forever

   ;we can do someting else here!

   If RxIndicator Then       'if an interrupt occured
     Ser1Send 10             'new line in Terminal
     Ser1Send 13
     Ser1Print "You sent: "
     Ser1Send RecByte
     RxIndicator -= 1        'reset "flag"
   End If

 Loop


Sub ISR_StartReceive

  If SER1_RXPORT.SER1_RXPIN = 1 Then Exit Sub  'process falling edge only (of startbit)
  'IntOff                'ignore interrupts while receiving
  cli                    'ignore interrupts while receiving
  RecByte = Ser1Receive  'receive one byte
  RxIndicator += 1       'indicate new data
  sei                    'reactivate interrupts
  'IntOn                 'reactivate interrupts

End Sub
