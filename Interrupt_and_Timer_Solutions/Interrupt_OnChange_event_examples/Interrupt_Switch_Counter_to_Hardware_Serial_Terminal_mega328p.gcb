'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program demonstrates Interrupt upon the button press on portb.0
'''Each microprocessor will have different commands to setup the Interrupt. Refer to datasheet.
'''When each interrupt event occurs a counter is incremented.
'''Afer each event the counter is shown on the terminal.
'''The demonstration also show the four states a button can be in UP, PRESSED, DOWN and RELEASED.
'''Enjoy
'''@author 	EvanV
'''@licence	GPL
'''@version	1.1a
'''@date   	20.02.2015
'''********************************************************************************

 #chip mega328p, 16
 #option explicit

; ----- Define Hardware settings
  'Config hardware UART
  #define USART_BLOCKING
  #define USART_BAUD_RATE 9600
  #define USART_DELAY 10 ms

  'Required for switch_event method
  Dir SwitchIn1 In


; ----- Constants
  'Required for switch_event method
  #Define BUTTON_UP 0
  #Define BUTTON_PRESSED 1
  #Define BUTTON_DOWN 2
  #Define BUTTON_RELEASED 3
  #Define BUTTON_UNKNOWN 4


  'Required for switch_event method
  #define SwitchIn1 PORTb.0
  #define check_switch PORTb.0
  #define state_switch ON


;----- Variables
  Dim CURRENT_STATE, OLD_STATE, BTN as Byte
  Dim ButtonPressCount as BYTE
  ButtonPressCount = 0

  'Required for switch_event method
  Dim btn_pv



; ----- Main body of program commences here.


  'Enable portb.0 as the source of the interrupt. See the datasheet for more information.
  'Trigger on change of PB0
  PCINT0 = 1
  On Interrupt PinChange0  Call ButtonPressed

  HSerPrintCRLF 2
  HSerPrint "Started"
  HSerPrintCRLF


  'track button presses - required to manage serial display only
  old_state = 0

  do forever
     'determine the state of the switch
     current_state = switch_event

     'if the current state is not the same as the saved state then print current state
     if current_state <> old_state then
        HSerPrint current_state
        'save state
        old_state = current_state
     end if
     'if the current state is Released then show the count.
     'count is incremented in the Interrupt routine.
     if current_state = BUTTON_RELEASED then
        HSerPrint "("
        HserPrint ButtonPressCount
        HSerPrint ")"
        ' Restore intterupt
        On Interrupt PinChange0  Call ButtonPressed
     end if
     'print only if the button is Pressed. Formatting display only.
     if current_state = BUTTON_PRESSED then
        HSerPrint ":"
     end if

  loop
  end

; ----- Support methods.  Subroutines and Functions
 sub ButtonPressed

     'Check port is depressed/down? If yes, then increment counter
     if check_switch = 1 then
         ButtonPressCount++
         On Interrupt PinChange0  Ignore
     end if


 end sub




'/****************************************************************************
'  Function:
'    input_event(void)
'
'  Summary:
'    Processes the single button into the states UP, DOWN, PRESSED & RELEASED.
'
'  Description:
'    This function helps write user interface state machines by determining when
'    the button was pressed, released
'
'  Precondition:
'    None
'
'  Parameters:
'    None
'
'  Returns:
'    event_t value of the current button events.
'    Valid responses are BUTTON_UP, BUTTON_DOWN, BUTTON_PRESSED, BUTTON_RELEASED
'
'  Remarks:
'	state_switch inverts the port. If high then use state_switch=off

'	#define SwitchIn1 PORTD.2
'	Dir SwitchIn1 In
'	#define check_switch RD2
'	#define state_switch OFF
'
' ***************************************************************************/

  function switch_event()
      dim ret As byte
      Dim btn as Byte

      btn = check_switch = state_switch

     if !btn & !btn_pv then
                ' button is not pressed now nor was it pressed previously
          ret = BUTTON_UP

      END if
      if btn & !btn_pv then
                ' button is pressed now but it wasn't previously
          ret = BUTTON_PRESSED

      End if
      if btn & btn_pv  then
                ' button was pressed previously and is still pressed
          ret = BUTTON_DOWN

      end if
      if !btn & btn_pv    then
                ' button is not pressed now but it was previously
          ret = BUTTON_RELEASED
      End If

      btn_pv = btn
      switch_event = ret
  End Function

  ' Debounce button, Debounce switch
  Function input_switch (  )

      input_switch  = false
      If check_switch = state_switch Then
          ButtonCount = 0
          Do While check_switch = state_switch and ButtonCount < 4
              wait 5 ms
              ButtonCount = ButtonCount + 1
          Loop
      end if
      If ButtonCount > 3 then
          input_switch  = true
          ButtonCount = 0
      end if
  End Function
