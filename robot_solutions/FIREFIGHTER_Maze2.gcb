'' FIREFIGHTER CODE: MAZE 2''
'' 16/12/2022 ''
'' Antonio Rech Santos and Guhan Iyer ''

' Chip definition
#CHIP 16F18875

' LCD definitions
#DEFINE LCD_IO 4
#DEFINE LCD_RS portd.0
#DEFINE LCD_RW portd.1
#DEFINE LCD_ENABLE portd.2
#DEFINE LCD_DB4 portd.4
#DEFINE LCD_DB5 portd.5
#DEFINE LCD_DB6 portd.6
#DEFINE LCD_DB7 portd.7

' Sensor definitions
#DEFINE LW porta.0
#DEFINE FW porta.1
#DEFINE FS porta.2
#DEFINE LS porta.3

' Motor/Fan definitions
#DEFINE RMF portb.0
#DEFINE RMB portb.1
#DEFINE LMF portb.3
#DEFINE LMB portb.2
#DEFINE FAN portb.4

' Input/Output port direction
DIR porta IN
DIR portb OUT

' Variable definitions
DIM voltage AS BYTE
DIM distanceFront AS BYTE
DIM voltageLeft AS BYTE
DIM distanceLeft AS BYTE
DIM voltageFlame AS BYTE
DIM roomCounter AS INTEGER
DIM xVar AS WORD
DIM leftCounter AS INTEGER

roomCounter = 0
leftCounter = 0

main:

  gosub followWall

goto main

sub room3

  ' After entering room 3 it finds the right wall
  Do Until distanceFront <= 10

    gosub readSensors
    CLS
    Locate(0, 1)
    Print roomCounter
    Locate(1,1)
    Print distanceFront
    gosub smoothTurnRight

  loop

  ' Lines itself up with the wall (to to the left)
  Do Until distanceFront >= 15

    gosub readSensors
    CLS
    Locate(0, 1)
    Print roomCounter
    Locate(1,1)
    Print distanceFront
    gosub turnRightInPlace

  loop

  ' Fixing allignment
  gosub turnLeftInPlace
  wait 100 ms

  ' Goes backwards until the wall ends
  Do Until distanceLeft >= 20

    gosub readSensors
    CLS
    Locate(0, 1)
    Print roomCounter
    Locate(1,1)
    Print distanceLeft

    ' Too far/too close corrections
    if distanceLeft >= 15 then

      gosub farLeftB

      else if distanceLeft <= 10 then

        gosub closeLeftB

      else

        gosub backwards

    end if
    gosub backwards

  loop

  gosub backwards
  wait 300 ms

  gosub stopBot

  ' Looking for the flame
  for xVar = 0 To 10

    gosub readSensors

    if voltageFlame <= 100 then

      gosub outFlame

    end if

    wait 5 ms

  next

  wait 150 ms

  ' Fixing allignment
  gosub turnRightInPlace
  wait 40 ms

  gosub forwards
  wait 400 ms
  gosub readSensors

  ' Leaves the room
  Do Until LS = 0
    gosub readSensors
    gosub forwards

    loop

  roomCounter = 4

  ' Alligning itself for a good entrance into room 4
  gosub forwards
  wait 550 ms
  gosub turnLeftInPlace
  wait 375 ms
  gosub forwards
  wait 750 ms

return

sub room4

  ' Fixing allignment
  gosub turnLeftInPlace
  wait 75 ms

  ' Goes forwards until it finds a wall
  Do Until distanceFront <= 10

    gosub readSensors
    gosub forwards
  loop

  gosub readSensors

  ' Turns left to go to the line
  Do Until distanceFront >= 15
    gosub turnLeftInPlace
    gosub readSensors
  loop

  ' Fixing Allignment
  gosub turnLeftInPlace
  wait 40 ms

  ' Goes slowly up to the line to avoid the pit
  Do Until LS = 0

    gosub readSensors
    gosub forwards
    wait 1 ms
    gosub stopBot
    wait 1 ms


  loop

  ' Backwards to not fall in
  gosub backwards
  wait 350 ms

  gosub stopBot
  wait 500 ms

  ' Turns to enter room 4
  gosub turnLeftInPlace
  wait 375 ms

  gosub readSensors

  ' Forwards until finds a wall
  Do until distanceFront <= 10
    gosub readSensors
    gosub forwards
  loop

  ' Turns to enter room 4
  gosub readSensors
  gosub turnRightInPlace
  wait 325 ms

  gosub stopBot
  wait 300 ms

  gosub readSensors

  ' Enters room 4
  Do until distanceFront <= 10
    gosub readSensors
    gosub forwards
  loop

  gosub stopBot
  wait 300 ms
  gosub readSensors
  ' Looks for Flame
  if voltageFlame <= 15 then
    gosub outFlame
  end if

return

' Follows the left wall
sub followWall

  ' Printing values for debugging
  CLS
  Locate(0, 1)
  Print roomCounter
  Locate(1,1)
  Print distanceLeft

  'Read sensor values before proceeding
  gosub readSensors

  ' If a line is detected
  if LS = 0 then

    ' Increment the room counter
    roomCounter += 1
    ' Go forwards to move the bot off the line and prevent it from being read twice
    gosub forwards
    wait 100 ms

    ' When roomCounter = 3 for maze 2, run procedures for room 3
    if roomCounter = 3 then

      gosub room3

    end if

    ' When roomCounter = 4, the bot has exited room 3. When distanceFront <= 16, the bot is nearing the turn into room 4.
    else if roomCounter = 4 and distanceFront <= 16 then


     roomCounter += 1

     ' Go forward for alignment
     gosub forwards
     wait 100 ms

     ' Turn left into room 4
     gosub turnLeftInPlace
     wait 350 ms

     ' Go forward until the bot crosses the line and is in room 4
     Do Until LS = 0
      gosub forwards
      gosub readSensors
     loop


     gosub room4

    '' Conditions to run turning subroutines ''

    else if voltageFlame <= 12 then

      gosub outFlame

    else if distanceFront <= 15 then

      gosub turnRightInPlace

    else if distanceLeft >= 23 then

      gosub smoothTurnLeft

    else if distanceLeft >= 15 then

      gosub farLeftS

    else if distanceLeft <= 8 then

      gosub closeLeftS

    else if distanceLeft >= 13 then

      gosub farLeft

    else if distanceLeft <= 10 then

      gosub closeLeft

    else

      gosub forwards

  end if

return

''SUBROUTINES''

' Reads voltage values off wall detection sensors and linearizes them to compute distance, reads flame sensor voltage for flame detection
sub readSensors

 voltageLeft = ReadAD(AN0)
 distanceLeft = (((6787/(voltageLeft-3)))-4)/5
 voltageFront = ReadAD(AN1)
 distanceFront = (((6787/(voltageFront-3)))-4)/5
 voltageFlame = ReadAD(AN2)

return


' Sets the forward component of both motors to 'high'
sub forwards

  RMF = 1
  LMF = 1
  RMB = 0
  LMB = 0

return

' Sets the backwards component of both motors to 'high'
sub backwards

  RMF = 0
  LMF = 0
  RMB = 1
  LMB = 1

return

' Sets all motors to 'low', stopping motion
sub stopBot

  RMF = 0
  LMF = 0
  RMB = 0
  LMB = 0

return

' Sets the right motor forward and left motor backward component to high, and all others to low
sub turnLeftInPlace

  RMF = 1
  LMF = 0
  RMB = 0
  LMB = 1

return

' Sets the left motor forward and right motor backward component to high, and all others to low
sub turnRightInPlace

  RMF = 0
  LMF = 1
  RMB = 1
  LMB = 0

return

' Turn that is preformed when the bot is too close to the left wall
sub closeLeft

  RMF = 0
  LMF = 1
  LMB = 0
  RMB = 0
  wait 1 ms
  gosub forwards
  wait 3 ms

return

' Turn that is performed when the bot is too far from the left wall
sub farLeft

  RMF = 1
  LMF = 0
  LMB = 0
  RMB = 0
  wait 1 ms
  gosub forwards
  wait 3 ms

return

' Turn that is preformed when the bot is too close to the left wall. Sharper turn than closeLeft.
sub closeLeftS

  gosub turnRightInPlace
  wait 1 ms
  gosub forwards
  wait 2 ms

return

' Turn that is performed when the bot is too far from the left wall. Sharper turn than farLeft.
sub farLeftS

  gosub turnLeftInPlace
  wait 1 ms
  gosub forwards
  wait 2 ms

return

' Turn performed when the bot is too close to the left wall. Needed for the bot's reversal procedure in room 3.
sub closeLeftB

  gosub turnLeftInPlace
  wait 1 ms
  gosub backwards
  wait 3 ms

return

' Turn performed when the bot is too far to the left wall. Needed for the bot's reversal procedure in room 3.
sub farLeftB

  gosub turnRightInPlace
  wait 1 ms
  gosub backwards
  wait 3 ms

return

'  A gradual left turn.
sub smoothTurnLeft

  gosub forwards
  wait 2 ms
  RMF = 1
  LMF = 0
  RMB = 0
  LMB = 0
  wait 5 ms

return

'A gradual right turn.
sub smoothTurnRight

  gosub forwards
  wait 2 ms
  RMF = 0
  LMF = 1
  RMB = 0
  LMB = 0
  wait 5 ms

return

' An extensive subroutine to extinguish the flame, depending on it's position in each room.
sub outFlame

  if roomCounter = 1 then
    ' Approaches the flame
    gosub forwards
    wait 250 ms
    gosub turnRightInPlace
    wait 350 ms
    gosub forwards
    wait 1250 ms

    else if roomCounter = 2 then
      ' Right turn to approach the flame
      gosub turnRightInPlace
      wait 350 ms
      gosub forwards
      wait 1750 ms

    '
    else if roomCounter = 3 then
      ' At the point where outFlame is called in sub room3, the bot will perform a right turn for 500 ms.
      gosub turnRightInPlace
      wait 500 ms

      ' The bot slowly creeps forward until it reaches the line.
      Do Until LS = 0
        gosub readSensors
        gosub forwards
        wait 1 ms
        gosub stopBot
        wait 2 ms

        ' Correction for if the bot is facing right instead of straight forward.
        if distanceFront <= 10 then
          gosub backwards
          wait 100 ms
          Do Until distanceFront >= 15
            gosub turnLeftInPlace
          loop

        end if
      loop

      ' When the bot has reached the line, it goes backwards a slight amount before running the general outFlame routine.
      gosub backwards
      wait 250 ms

    ' Because room 3 has two lines that the bot crosses, room 4 is reached when roomCounter = 5.
    else if roomCounter = 5 then

      gosub turnRightInPlace
      wait 400 ms
      gosub forwards
      wait 250 ms

  end if

  ' This is the beginning of the general routine for outFlame.
  FAN = 1

  gosub stopBot
  wait 600 ms

  gosub turnLeftInPlace
  wait 400 ms

  ' The bot spins from right to left in place, in order to catch the flame in a wide area.
  For xVar = 1 To 3

    gosub turnRightInPlace
    wait 800 ms
    gosub turnLeftInPlace
    wait 800 ms
  next

  ' The bot returns to its original position before the fan is put out.
  gosub turnRightInPlace
  wait 400 ms

  FAN = 0

return
