/*
    This demonstration flashes an LED to show the use of a Timer 0 overflow event

    Timer0 is a counter implemented in the processor. It may be used to count instruction
    cycles or external events, that occur at or below the instruction cycle rate.
    In the pic, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
    mid-range core implements only an 8-bit counter.
    This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
    over. This frees up the processor to do meaningful work rather than wasting instruction
    cycles in a timing loop.
    Using a counter provides a convenient method of measuring time or delay loops as it
    allows the processor to work on other tasks rather than counting instruction cycles.


    ************************************************************************
    @author  EvanV / HiB
    @licence GPL
    @version 1.1
    @date    11-02-2025
*/
' ----- Configuration

//Set microcontroller required
#chip 16F76
#option Explicit


/*
            ------------PORTA---------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ------------SW--------------ADC--
    IO:    ---------------------------------

            ------------PORTB----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------LED-LED-LED-LED--
    IO:    ---------------------------------

            ------------PORTC----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ---------------------------------
    IO:    ---------------------------------

    */

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF

    // Define constants to make things easier. We can reuse a constant at any time.
    #DEFINE LEDD0 PORTB.0
    #DEFINE LEDD1 PORTB.1
    #DEFINE LEDD2 PORTB.2
    #DEFINE LEDD3 PORTB.3

    #DEFINE LEDPORT PORTB

    Dir     LEDD0 Out
    Dir     LEDD1 Out
    Dir     LEDD2 Out
    Dir     LEDD3 Out

    #DEFINE POTENTIOMETER PORTA.0
    //This is the PORTA.0 port
    Dir POTENTIOMETER In

    #DEFINE SWITCHIN      PORTA.4
    Dir     SWITCHIN      In
    #DEFINE DOWN          1

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF
    
    
//*****************************************************************************************************
// Main program commences here.. everything before this is setup for the board.

//! Initialise the timer.

    // Set the type of event
    On Interrupt Timer0Overflow Call blink

    //! Init the Timer 
    InitTimer0 Osc, PS0

    //! Start the Timer - you need to start this Timer!!
    StartTimer 0

    // Support variables
    // Create variable as a flag
    Dim TimeOut As Word
    TimeOut = 0

    // Initialize a variable to hold the LED states
    DIM LEDs AS BYTE
    LEDs = 0B0001  // Start with the first LED on

    // Initialize a counter for rotations
    DIM RotateCount AS BYTE
    RotateCount = 0


    Do Forever

        //! We need many interrupts for 1 second!!
        If TimeOut = 8000 Then
        
            //! Same code as previous demo 040
            // Output the current state to PORTB
            PORTB = LEDs
            
            // Rotate the LEDs to the left
            Rotate LEDs Left Simple
            
            // Increment the rotation counter
            RotateCount = RotateCount + 1
            
            // Reset the LEDs after 4 rotations
            If RotateCount >= 4 Then
                LEDs = 0B0001  // Reset to initial state
                RotateCount = 0  // Reset counter
            End If
            
            TimeOut= 0

        End If

    Loop


Sub blink
    TimeOut = TimeOut + 1
End Sub
