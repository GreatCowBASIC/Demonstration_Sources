/*
    A demonstration program for GCBASIC
    --------------------------------------------------------------------------------
    This demonstration rotates the LEDs to show the use of 8-Bit Timer0

    This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
    over. This frees up the processor to do meaningful work rather than wasting instruction
    cycles in a timing loop using a 8-bit timer.
    Using a counter provides a convenient method of measuring time or delay loops as it
    allows the processor to work on other tasks rather than counting instruction cycles.

@author 	EvanV / HiB
@licence	GPL
@version	1.1
@date   	11.02.2025
********************************************************************************/


// Chip Settings 
//! The timer calculations are based on 2mHz.  
//! You would need to recalculate the timer values if 2mHz is not used
//Select microcontroller required
#chip 16F76, 2
#option Explicit


/*
            ------------PORTA---------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ------------SW--------------ADC--
    IO:    ---------------------------------

            ------------PORTB----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------LED-LED-LED-LED--
    IO:    ---------------------------------

            ------------PORTC----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ---------------------------------
    IO:    ---------------------------------

    */

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF

    // Define constants to make things easier. We can reuse a constant at any time.
    #DEFINE LEDD0 PORTB.0
    #DEFINE LEDD1 PORTB.1
    #DEFINE LEDD2 PORTB.2
    #DEFINE LEDD3 PORTB.3

    #DEFINE LEDPORT PORTB

    Dir     LEDD0 Out
    Dir     LEDD1 Out
    Dir     LEDD2 Out
    Dir     LEDD3 Out

    #DEFINE POTENTIOMETER PORTA.0
    //This is the PORTA.0 port
    Dir POTENTIOMETER In

    #DEFINE SWITCHIN      PORTA.4
    Dir     SWITCHIN      In
    #DEFINE DOWN          1

    
//*****************************************************************************************************
// Main program commences here.. everything before this is setup for the board.

// Initialise the timer.

    // For this we need the following for timer1
    //       Prescaler with the FOSC/4
    //          1:8
    InitTimer1 Osc, PS1_8

    //    Start the Timer
    StartTimer 1

    // Every 1 sec.  3036 is calculated value using a tool like Mr E. Timer Helper
    SetTimer ( 1 , 3036 )

    // Create byte variable as a flag
    Dim TIMEOUT As Bit

    // Initialize a variable to hold the LED states
    DIM LEDs AS BYTE
    LEDs = 0B0001  // Start with the first LED on

    // Initialize a counter for rotations
    DIM RotateCount AS BYTE
    RotateCount = 0


Do

    // wait for the event
    Wait While TMR1IF = 0

    // Clearing Timer 0 flag will reset event
    TMR1IF = 0

//! Same rotate code as 040

    HSerPrintStringCRLF "."

    // Output the current state to PORTB
    PORTB = LEDs
    
    // Rotate the LEDs to the left
    Rotate LEDs Left Simple
    
    // Increment the rotation counter
    RotateCount = RotateCount + 1
    
    // Reset the LEDs after 4 rotations
    If RotateCount >= 4 Then
        LEDs = 0B0001  // Reset to initial state
        RotateCount = 0  // Reset counter
    End If
        
    // Set timer. This value as close as you can get to 1s
    SetTimer ( 1 , 3036 )

Loop
