/*
A demonstration program for GCBASIC.
--------------------------------------------------------------------------------------------------------------------------------
This program demonstrates the capabilities of the 1602 LCD display.
the LCD displays temperature in degrees C and a selectable volts or clock display.
The LCD uses a 4-bit bus for connectivity.
For the new LCD connections - please refer to the program.

@author 	EvanV HiB
@licence	GPL
@version	1.2
@date   	12.03.2025
********************************************************************************/

' ----- Configuration
#chip 18F4431,4 //4mhz ext xtal
#option Explicit
#CONFIG MCLRE=ON

/*
            ------------PORTA---------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ------------SW--------------ADC--
    IO:    ---------------------------------

            ------------PORTB----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------LED-LED-LED-LED--
    IO:    --------------------BZ-----------

    ------------------PORTC-----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    -----TX-----SDA-SCL--------------
    ---------------------------------------- 

            ------------PORTD----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----EN--RW--RS--DB7-DB6-DB5-DB4-- //no power option for this display
    IO:    ---------------------------------

            ------------PORTE----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------RST---------------
    IO:    ---------------------------------
    */
    
    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF

    // Define constants to make things easier. We can reuse a constant at any time.
    #DEFINE LEDD0 PORTB.0
    #DEFINE LEDD1 PORTB.1
    #DEFINE LEDD2 PORTB.2
    #DEFINE LEDD3 PORTB.3

    #DEFINE LEDPORT LATB

    Dir     LEDD0 Out
    Dir     LEDD1 Out
    Dir     LEDD2 Out
    Dir     LEDD3 Out

    #DEFINE POTENTIOMETER PORTA.0
    //This is the PORTA.0 port
    Dir POTENTIOMETER In

    #DEFINE SW2      PORTA.4
    Dir     SW2      In

    #DEFINE SW3      PORTB.0
    Dir     SW3      In

    #DEFINE SW_DOWN     0        
    #DEFINE SW_UP       1

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF

    // Setup LCD Parameters
    #DEFINE LCD_IO 4

    // Define new LCD Hardware settings
    #DEFINE LCD_RS      PORTA.3
    #DEFINE LCD_RW      PORTA.2
    #DEFINE LCD_Enable  PORTA.1

    #DEFINE LCD_DB4     PORTD.0
    #DEFINE LCD_DB5     PORTD.1
    #DEFINE LCD_DB6     PORTD.2
    #DEFINE LCD_DB7     PORTD.3

    #DEFINE SOUNDOUT PORTC.2

    // Define I2C settings
    #DEFINE I2C_DATA       PORTC.4
    #DEFINE I2C_CLOCK      PORTC.3
    #DEFINE I2C_BAUD_RATE  100
    #DEFINE I2C_MODE master    //HI2CMode (Master)old code

    // Setup temperature sensor address
    #DEFINE I2CTEMPSENSOR  0x9A            //  b'10011010'  'read '
    Dim temperatureVal as Byte
    

'*****************************************************************************************************
// Main program commences here.. everything before this is setup for the board.

    #DEFINE  SYSDEFAULTCONCATSTRING  8

    // Init the 31k external clock
    InitClock 

    // Create a varaible
    Dim DemoSelect as Byte
    DemoSelect = 1

    // Control the LCD cursor
    LCDCursor CURSOROFF 

    Locate 0,3 
    Print "Microchip"
    Locate 1,1
    Print "PICDEM 2 PLUS"
    SWPressed

    CLS
    Locate 0,2
    Print "GCBASIC 2025"
    Locate 1,4
    Print "Anobium"
    SWPressed

        // Main loop
       Do
            CLS

            ShowI2CTemperature 'this does nothing...

            Locate 0,0

            If DemoSelect = 1 Then    
                Print "Voltmeter"
            Else
                Print "Clock"
            End If

            Locate 1,0
            Print "SW2-Next SW3-Now" 
            
            SWPressed

        Loop
        End   

    Sub SWPressed

        // Check for button press 

        // Ensure the ADC operations not active... think would stop digital checks of switches
        // ADCON1 = 255

        //! Potentially waits 3s but will exit when a button is pressed
        Repeat 120
            If SW3 = SW_DOWN Then

                ShortTone 127, 50
                Wait While SW3 = SW_DOWN  

                ' select demo and run
                If DemoSelect = 1 then
                    ShowVoltmeter
                Else
                    ShowClock
                End If

                ShortTone 127, 50
                Exit Sub

            End If
            
            If SW2 = SW_DOWN Then

                ShortTone 127, 50
                Wait While SW2 = SW_DOWN 

                ' change demo
                If DemoSelect = 1 Then
                    DemoSelect = 0
                Else
                    DemoSelect = 1
                End If

                ShortTone 127, 50
                Exit Sub

            End If

            Wait 25 ms
        End Repeat

        End Sub

    Sub ShowVoltmeter

        // Read AN0 and display results
        Dim VoltsRead as Word
        Dim VoltsInteger, VoltsDecimal
        Dim VoltsString as String * 7  

        // ADCON1 = 255

        Wait While SW3 = SW_DOWN

        CLS
        Print "Voltmeter"
        Locate 1,0
        Print "SW3-Exit Test"

        Do

            VoltsRead = Scale( ReadAD( AN0 ), 0, 255, 0, 500 )
            VoltsInteger = VoltsRead / 100
            VoltsDecimal = VoltsRead Mod 100

            Locate 0,0
            Print "Volts:" 
            Print VoltsInteger
            Print "."
            Print Left("0"+Str(VoltsDecimal),2)
            // Print " ["
            // Print Right("00" + IntegerToString(VoltsRead),3 )
            // Print "]"
            
            pulseout PORTA.2, 100 ms

            // Restore register
            // ADCON1 = 255
            If SW3 = SW_DOWN Then
                Wait While SW3 = SW_DOWN
                Exit Sub
            End If

        Loop

        End Sub

    Sub InitClock

        // Initialise the clock

        Dim Secs, Mins, Hours as Byte  
        
        // Commence Clock
        //T1OSCEN enabled; nT1SYNC synchronize; T1CKPS 1:1; TMR1CS External; TMR1ON enabled; 
         T1CON = 0x89   

        Secs = 0
        Mins = 0
        Hours = 0
        TMR1L = 0

        End Sub

    Sub ShowClock
            
        // Show clock and increment seconds

        // ADCON1 = 255
        Wait While SW3 = SW_DOWN

        CLS
        Locate 1,0
        Print "SW2-Set SW3-Menu"
        
        TMR1L = 0

        Do     

            Locate 0,0
            Print Right( "0" + Str(Hours), 2)
            Print ":"
            Print Right( "0" +Str(Mins),2)
            Print ":"
            Print Right( "0" +Str(Secs),2)
            
            TMR1IF = 0
            TMR1H += 0x80
            Wait while TMR1IF = 0
            
            ShortTone 75, 50

            Secs++
            If Secs = 60 then 
                Mins++
                Secs = 0
                If Mins = 60 Then 
                    Hours++
                    Mins = 0
                    If Hours = 24 then Hours = 0
                End If
            End If

            If SW3 = SW_DOWN Then
                Wait While SW3 = SW_DOWN
                Exit Sub
            End If

            If SW2 = SW_DOWN Then
                Wait While SW2 = SW_DOWN
                SetClock
            End If

        Loop

        End Sub

    Sub SetClock

        // Set the clock
        CLS
        Locate 1,0
        Print "SW2 --  SW3 ++"

        Secs = 0

        Do     

            Locate 0,0
            Print Right( "0" + Str(Hours), 2)
            Print ":"
            Print Right( "0" +Str(Mins),2)
            Print ":"
            Print Right( "0" +Str(Secs),2)

            If SW3 = SW_DOWN Then Mins++
            If SW2 = SW_DOWN Then Mins--

            Mins++
            If Mins = 60 Then 
                Hours++
                Mins = 0
                If Hours = 24 then Hours = 0
            End If

            Mins--
            If Mins = 255 Then 
                Hours--
                Mins = 59
                If Hours = 255 then Hours = 23
            End If

            If SW3 = SW_DOWN and SW2 = SW_DOWN Then
                Wait While SW3 = SW_DOWN
                Exit Sub
            End If

        Loop

        End Sub

    Sub InitLCDChar
        'Create an array to store the character until it is copied
        Dim CharArray(8)

        'Set the array to hold the character
        'Binary has been used to improve the readability of the code, but is not essential
        CharArray(1) = b'00001100'
        CharArray(2) = b'00010010'
        CharArray(3) = b'00001100'
        CharArray(4) = b'00000000'
        CharArray(5) = b'00000000'
        CharArray(6) = b'00000000'
        CharArray(7) = b'00000000'
        CharArray(8) = b'00000000'

        'Copy the character from the array to the LCD
        LCDCreateChar 0, CharArray()
    End Sub

   Sub ShowI2CTemperature

        InitLCDChar

        // This routine is called to get current temperature reading
        // from the TC74 on the PICDEM 2 Plus board and return the value
        // to the caller as 2 BCD nibbles.
        // In temperature data registers, each unit value represents one degree (Celsius). 
        // The value is in 2’s complement binary format such that a reading of 0000
        // 0000b corresponds to 0°C. 

        // This routine only supports positive temperatures.  You would need to add a 2's compliment routine for negative results.

            I2CStart
            I2CSend I2CTEMPSENSOR
            I2CSend 0                      // RTR 00h Read Temperature (TEMP)
            I2CReStart
            I2CSend I2CTEMPSENSOR + 1
            I2CReceive ( temperatureVal, NACK )
            I2CStop
            
            Locate 0,12
            Print temperatureVal
            LCDWriteChar 0
            Print "C "

    End Sub     // GCBASIC Program. 

/*
  Sub ShowI2CTemperature

    InitLCDChar

  //Set temperatureVal - set to 20 as a test

        temperatureVal = 20
        Locate 0,12
        Print temperatureVal
        LCDWriteChar 0
        Print "C "

    End Sub     // GCBASIC Program. 
 */  
