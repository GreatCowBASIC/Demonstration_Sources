'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program shows how to draw sprites on an SSD1306 I2C device.
'''Only support I2C and Full GLCD Mode - supported from v1.xx onwards
'''
'''The #define 'spritechoice' defines the sprite to be managed.
'''You can define your own in the sprite tables. Each table is 8 pixles vertical - col1 to col8 in each table.
'''
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 2.1
'''@date    27.8.17
'''************************************************************************
'''
'''  PIC: 18f25k22
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: SmartPIC 18 Board
'''  Date: 04.10.22
'''
' ----- Configuration
'Chip Settings.
#CHIP 18f25k22, 16
#CONFIG MCLRE=On
#OPTION Explicit

'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -------| O | A |-------| O | I |-
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---| TX|---|SDA|CLK| X |---------
''-----------------------------------------
''


#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.5
#DEFINE Potentiometer   PORTA.4
#DEFINE LDR             PORTB.4
#DEFINE SwitchIn        PORTB.0
#DEFINE LCDControl      PORTC.2

Dir     LEDD1         Out
Dir     LEDD2         Out
'this is the AN17 port
Dir     Potentiometer In
'this is the AN11 port
Dir     LDR           In
Dir     SwitchIn      In
Dir     LCDControl    Out

'Always set the LCD on (high) to Shut OFF the LCD-Backlight. This is required when powered from a PicKit.
LCDControl = 1

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

' Define I2C settings
#DEFINE HI2C_BAUD_RATE 400
#DEFINE HI2C_DATA PORTC.4
#DEFINE HI2C_CLOCK PORTC.3
'Initialise I2C
'I2C pins need to be input for SSP module - this is not an option
Dir HI2C_DATA In
Dir HI2C_CLOCK In
'MASTER
HI2CMode Master

#INCLUDE <glcd.h>
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address 0x78

' ----- Define variables

'These constants allow you to change the GLCD memory usage.
#DEFINE GLCD_PROTECTOVERRUN
'*******************************************************************************************
'Select the sprite and the user delay
#DEFINE spritechoice 2
'3ms is limit of user visual perception
#DEFINE spritedelay 3 ms

'*******************************************************************************************
'Draw initial screen
Box 0,0,127,63
GLCDPrint ( 1, 36, "Great Cow BASIC")
GLCDPrint ( 1, 46, "GLCD Library 2022")
GLCDPrint ( 1, 54, "Sprite Support")
Wait 1 s
GLCDCLS
Box 0,0,127,63


'dimension and initialise variables
Dim oldx, oldy As Byte
Dim curx, cury As Byte
Dim dirx, diry As Byte

curx = 63
cury = 31
oldx = curx
oldy = cury

'Draw initial sprite
GLCDDrawSprite_SSD1306 curx,cury, spritechoice, GLCDForeground

'Set initial direction
If Random > 127 Then
    dirx=1
Else
    dirx=255
End If

If Random > 127 Then
    diry=1
Else
    diry=255
End If


Dir portc.0 Out

Do

    ' handle bounce
    If  curx>0 AND curx<119  Then
        oldx = curx
        curx=curx+dirx

    Else

        If dirx = 1 Then
            dirx=255
        Else
            dirx=1
        End If
        oldx = curx
        curx=curx+dirx

    End If


    If cury >1 AND cury<55 Then
        oldy = cury
        cury=cury+diry

    Else

        If diry = 1 Then
            diry=255
        Else
            diry=1
        End If
        oldy = cury
        cury=cury+diry

    End If
    ' end of handle bounce


    'draw sprite
    GLCDDrawSprite_SSD1306 oldx,oldy, spritechoice
    GLCDDrawSprite_SSD1306 curx,cury, spritechoice
    'pulse output for scope
    portc.0 = !portc.0
'      'user delay
    'so you can see it!
    Wait spritedelay

Loop



End


Sub GLCDDrawSprite_SSD1306(In GLCDX As Byte, In GLCDY As Byte, In CharCode )

    Dim CurrCharVal, CurrCharCol, SSD1306_Page, GLCDHiChange, GLCDLoChange, GLCDRotateBits, GLCDTemp As Byte

    'Calculate device row
    SSD1306_Page = GLCDY
    Repeat 3
        Set C Off
        Rotate SSD1306_Page Right
    End Repeat
    ' SSD1306_Page is now the correct ROW

    'Calculate buffer element
    SSD1306_BufferLocationCalc = GLCDY AND 0xF8
    Repeat 4
        Set c Off
        Rotate SSD1306_BufferLocationCalc Left
    End Repeat
    SSD1306_BufferLocationCalc = (SSD1306_BufferLocationCalc OR GLCDX)
    'Increment as we do not use element 0 in the array
    SSD1306_BufferLocationCalc++
    'SSD1306_BufferLocationCalc is now the correct buffer element

    'is the y position of Sprite on a ROW positin 0?
    If ( GLCDY mod 8 ) = 0 Then

        'uses GLDX and SS1306_Page variables
        Cursor_Position_SSD1306_Fast

        'Read 8 pixels value into CurrCharVal then write to display
        Open_Transaction_SSD1306
        For CurrCharCol = 1 To 8
            Select Case CurrCharCol
            Case 1: ReadTable sprite1, CharCode, CurrCharVal
            Case 2: ReadTable sprite2, CharCode, CurrCharVal
            Case 3: ReadTable sprite3, CharCode, CurrCharVal
            Case 4: ReadTable sprite4, CharCode, CurrCharVal
            Case 5: ReadTable sprite5, CharCode, CurrCharVal
            Case 6: ReadTable sprite6, CharCode, CurrCharVal
            Case 7: ReadTable sprite7, CharCode, CurrCharVal
            Case 8: ReadTable sprite8, CharCode, CurrCharVal
            End Select

            'Xor pixels into buffer
            GLCDTemp = SSD1306_BufferAlias(SSD1306_BufferLocationCalc) XOR CurrCharVal
            SSD1306_BufferAlias(SSD1306_BufferLocationCalc) = GLCDTemp
            'Write buffer this will Increment the device point as part of the write operation
            Write_Transaction_Data_SSD1306(GLCDTemp)
            'Increment buffer by 1 to match device Increment
            SSD1306_BufferLocationCalc++
        Next
        Close_Transaction_SSD1306

    Else
        'handle TOP portion of the sprite as we are NOT at 0 pixel of a ROW
        'send the TOP pixels
        Cursor_Position_SSD1306_Fast

        Open_Transaction_SSD1306
        For CurrCharCol = 1 To 8
            Select Case CurrCharCol
            Case 1: ReadTable sprite1, CharCode, GLCDHiChange
            Case 2: ReadTable sprite2, CharCode, GLCDHiChange
            Case 3: ReadTable sprite3, CharCode, GLCDHiChange
            Case 4: ReadTable sprite4, CharCode, GLCDHiChange
            Case 5: ReadTable sprite5, CharCode, GLCDHiChange
            Case 6: ReadTable sprite6, CharCode, GLCDHiChange
            Case 7: ReadTable sprite7, CharCode, GLCDHiChange
            Case 8: ReadTable sprite8, CharCode, GLCDHiChange
            End Select

            'handle top row
            GLCDRotateBits = GLCDY AND 7
            Repeat GLCDRotateBits
                Set c Off
                Rotate GLCDHiChange Left
            End Repeat

            GLCDTemp = SSD1306_BufferAlias(SSD1306_BufferLocationCalc) XOR GLCDHiChange
            SSD1306_BufferAlias(SSD1306_BufferLocationCalc) = GLCDTemp
            Write_Transaction_Data_SSD1306(GLCDTemp)

            SSD1306_BufferLocationCalc++

        Next
        Close_Transaction_SSD1306

        'handle BOTTOM pixels of the sprite

        'Increment to the next ROW
        SSD1306_Page++
        Cursor_Position_SSD1306_Fast

        'Move buffer pointet to the next row/buffer which is 128 bytes, but, the top half of the buffer has been write... 8 bytes.
        'So 128-8 = 120
        SSD1306_BufferLocationCalc = SSD1306_BufferLocationCalc  + 120

        Open_Transaction_SSD1306
        For CurrCharCol = 1 To 8
            Select Case CurrCharCol
            Case 1: ReadTable sprite1, CharCode, GLCDHiChange
            Case 2: ReadTable sprite2, CharCode, GLCDHiChange
            Case 3: ReadTable sprite3, CharCode, GLCDHiChange
            Case 4: ReadTable sprite4, CharCode, GLCDHiChange
            Case 5: ReadTable sprite5, CharCode, GLCDHiChange
            Case 6: ReadTable sprite6, CharCode, GLCDHiChange
            Case 7: ReadTable sprite7, CharCode, GLCDHiChange
            Case 8: ReadTable sprite8, CharCode, GLCDHiChange
            End Select

            GLCDLoChange = 0
            Repeat GLCDRotateBits
                Set c Off
                'as bits move to left C is set... moving in GLCDLoChange in the next command
                Rotate GLCDHiChange Left
                Rotate GLCDLoChange Left
            End Repeat

            GLCDTemp = SSD1306_BufferAlias(SSD1306_BufferLocationCalc) XOR GLCDLoChange
            SSD1306_BufferAlias(SSD1306_BufferLocationCalc) = GLCDTemp
            Write_Transaction_Data_SSD1306(GLCDTemp)
            SSD1306_BufferLocationCalc++
        Next
        Close_Transaction_SSD1306

    End If

End Sub


'sprite shape data
Table sprite1
    b'00000000'
    b'00000000'
    b'10000000'
    b'11111111'
    b'00111000'
    b'00000000'
    b'00000000'
    b'11111111'


End Table

'sprite shape data
Table sprite2
    b'00000000'
    b'00111100'
    b'01000000'
    b'11111111'
    b'01000100'
    b'00000000'
    b'00111100'
    b'11000011'
End Table

'sprite shape data
Table sprite3
    b'00000000'
    b'01011010'
    b'00100000'
    b'11111111'
    b'10000010'
    b'00111100'
    b'01100110'
    b'10100101'
End Table

'sprite shape data
Table sprite4
    b'00000000'
    b'01011010'
    b'00010000'
    b'11111111'
    b'00011000'
    b'00111100'
    b'01011010'
    b'10100101'
End Table

'sprite shape data
Table sprite5
    b'00000000'
    b'01011010'
    b'00001000'
    b'11111111'
    b'10000010'
    b'00111100'
    b'01011010'
    b'10100101'
End Table

'sprite shape data
Table sprite6
    b'00000000'
    b'01011010'
    b'00000100'
    b'11111111'
    b'01000100'
    b'00111100'
    b'01100110'
    b'10100101'
End Table

'sprite shape data
Table sprite7
    b'00000000'
    b'00111100'
    b'00000010'
    b'11111111'
    b'00111000'
    b'00000000'
    b'00111100'
    b'11000011'
End Table

'sprite shape data
Table sprite8
    b'00000000'
    b'00000000'
    b'00000001'
    b'11111111'
    b'00000000'
    b'00000000'
    b'00000000'
    b'11111111'
End Table


Macro Cursor_Position_SSD1306_Fast

    Dim I2CByte As Byte

    HI2CStart
    HI2CSend GLCD_I2C_Address
    HI2CSend 0x00
    HI2CSend 0xB0 + SSD1306_Page

    HI2CStop
    HI2CStart
    HI2CSend GLCD_I2C_Address
    HI2CSend 0x00
    ' lower nibble
    I2CByte = ( GLCDX  & 0x0f )
    HI2CSend I2CByte
    HI2CStop

    HI2CStart
    HI2CSend GLCD_I2C_Address
    HI2CSend 0x00
    I2CByte = ( SWAP4(GLCDX) & 0x0F ) + 0x10
    HI2CSend I2CByte
    HI2CStop

End Macro
