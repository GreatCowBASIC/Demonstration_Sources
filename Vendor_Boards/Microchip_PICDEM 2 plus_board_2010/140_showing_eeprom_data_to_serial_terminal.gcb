/*
    This demonstration shows the EEProm values on the Serial Terminal.

    This lesson will provide code for writing and reading a single byte onto
    the on-board EEPROM. EEPROM is non-volatile memory, meaning that it does
    not lose its value when power is shut off. This is unlike RAM, which will
    lose its value when no power is applied. The EEPROM is useful for storing
    variables that must still be present during no power.
    It is also convenient to use if the entire RAM space is used up.
    Writes and reads to the EEPROM are practically instant and are much faster
    than program memory operations.

    This will show the value of the EEPROM on the serial Terminal.
    You can experiment by changing the variable // Outdata//  from Random function to a specific range.  Enjoy.

    ************************************************************************
    @author  EvanV
    @licence GPL
    @version 1.00
    @date    14-01-2025
*/
//  ----- Configuration

#chip 16F1937
#option Explicit
#CONFIG MCLRE=ON

/*
            ------------PORTA---------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ------------SW--------------ADC--
    IO:    ---------------------------------

            ------------PORTB----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------LED-LED-LED-LED--
    IO:    ---------------------------------

            ------------PORTC----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    -----TX--------------------------
    IO:    ---------------------------------

            ------------PORTD----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    PWR-EN--RW--RS--DB7-DB6-DB5-DB4--
    IO:    ---------------------------------

            ------------PORTE----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------RST---------------
    IO:    ---------------------------------
    */

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF

    // Define constants to make things easier. We can reuse a constant at any time.
    #DEFINE LEDD0 PORTB.0
    #DEFINE LEDD1 PORTB.1
    #DEFINE LEDD2 PORTB.2
    #DEFINE LEDD3 PORTB.3

    #DEFINE LEDPORT LATB

    Dir     LEDD0 Out
    Dir     LEDD1 Out
    Dir     LEDD2 Out
    Dir     LEDD3 Out

    #DEFINE POTENTIOMETER PORTA.0
    //This is the PORTA.0 port
    Dir POTENTIOMETER In

    #DEFINE SWITCHIN      PORTA.4
    Dir     SWITCHIN      In
    #DEFINE DOWN          1

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF
    
    //! Specify explicit OCULAR_OM1614 support!!
    #DEFINE LCD_OCULAR_OM1614

    // Setup LCD Parameters
    #DEFINE LCD_IO 4

    // Define LCD Hardware settings
    #DEFINE LCD_RS      PORTD.4
    #DEFINE LCD_RW      PORTD.5
    #DEFINE LCD_Enable  PORTD.6

    #DEFINE LCD_DB4     PORTD.0
    #DEFINE LCD_DB5     PORTD.1
    #DEFINE LCD_DB6     PORTD.2
    #DEFINE LCD_DB7     PORTD.3

    //! Required for OCULAR LCD driver
    #DEFINE LCD_POWER   PORTD.7

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF
    
        
// *****************************************************************************************************
// Main program commences here.. everything before this is setup for the board.
// Now assumes Serial Terminal is operational

Dim DisplayNewLine, Outdata, Indata  As Byte
Dim EEPromAddress as Word

Wait 3 s

Do Forever

    // Terminal Preparation and Table header
        HSerPrintCRLF
        HSerPrint "EEPROM Test and Show Results "
        HSerPrintCRLF 2

        HSerPrint "      "
        For EEPromAddress = 0 To 15
            HSerPrint Hex(EEPromAddress)
            HSerPrint " "
        Next

        For EEPromAddress = 0 To ChipEEProm -1
            // Table formatting
                DisplayNewLine = EEPromAddress % 16
                If DisplayNewLine = 0 Then
                    HSerPrintCRLF
                    HSerPrint right(Hex(EEPromAddress_H),1)
                    HSerPrint Hex(EEPromAddress)
                    HSerPrint ": "
                End If
                HSerPrint " "

            // Prepare some data to send    

                // Outdata = Random
                // Outdata = 0x55    // If you DON'T believe put your own value here!
                Outdata = 255 - EEPromAddress    // If you DON'T believe put your own value here!

            // Write

                EPWrite ( EEPromAddress, Outdata )

            // Reads, clear indata, just for good practice

                Indata = 0
                EPRead  ( EEPromAddress, Indata )

            // Show result
            If Outdata = Indata Then
                HSerPrint  Hex(Indata)
            Else
                // Show -- as an error condition
                HSerPrint  "--"
            End If
        Next

    // End formating
    HSerPrintCRLF 2
    HSerPrint   "End of EEProm Program and Display"
    HSerPrintCRLF 2

    Wait While SwitchIn = DOWN
Loop
End
