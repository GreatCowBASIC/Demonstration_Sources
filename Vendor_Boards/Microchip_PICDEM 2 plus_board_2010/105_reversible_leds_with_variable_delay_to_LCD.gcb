/*
A demonstration program for GCBASIC.
--------------------------------------------------------------------------------------------------------------------------------
This program demonstrates the capabilities of the board

This the basic test - set the LEDs on

@author 	EvanV
@licence	GPL
@version	1.0a
@date   	27.12.2024
********************************************************************************/

//Set chip model required
#chip 16F1937
#option Explicit
#CONFIG MCLRE=ON

/*
            ------------PORTA---------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ------------SW--------------ADC--
    IO:    ---------------------------------

            ------------PORTB----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------LED-LED-LED-LED--
    IO:    ---------------------------------

            ------------PORTC----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ---------------------------------
    IO:    ---------------------------------

            ------------PORTD----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    PWR-EN--RW--RS--DB7-DB6-DB5-DB4--
    IO:    ---------------------------------

            ------------PORTE----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------RST---------------
    IO:    ---------------------------------
    */

    // Define constants to make things easier. We can reuse a constant at any time.
    #DEFINE LEDD0 PORTB.0
    #DEFINE LEDD1 PORTB.1
    #DEFINE LEDD2 PORTB.2
    #DEFINE LEDD3 PORTB.3

    #DEFINE LEDPORT LATB

    Dir     LEDD0 Out
    Dir     LEDD1 Out
    Dir     LEDD2 Out
    Dir     LEDD3 Out

    #DEFINE POTENTIOMETER PORTA.0
    //This is the PORTA.0 port
    Dir POTENTIOMETER In

    #DEFINE SWITCHIN      PORTA.4
    Dir     SWITCHIN      In
    #DEFINE DOWN          1

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

    //! Specify explicit OCULAR_OM1614 support!!
    #DEFINE LCD_OCULAR_OM1614

    // Setup LCD Parameters
    #DEFINE LCD_IO 4

    // Define LCD Hardware settings
    #DEFINE LCD_RS      PORTD.4
    #DEFINE LCD_RW      PORTD.5
    #DEFINE LCD_Enable  PORTD.6

    #DEFINE LCD_DB4     PORTD.0
    #DEFINE LCD_DB5     PORTD.1
    #DEFINE LCD_DB6     PORTD.2
    #DEFINE LCD_DB7     PORTD.3

    //! Required for OCULAR LCD driver
    #DEFINE LCD_POWER   PORTD.7


//*****************************************************************************************************
//Main program commences here.. everything before this is setup for the board.

    Print "GCBASIC 2024"
    Wait 2 s: CLS
    Print ChipNameStr
    Locate 1,0
    Print ChipMHz
    Print "mHz"
    Wait 1 s: CLS


    Dim direction As Bit
    Dim mydelay As Word
    Dim LEDportState as Byte
    
    //  Control Constants 
        #DEFINE LED_RIGHT 0
        #DEFINE LED_LEFT  1

    //Start from left direction
        direction = LED_LEFT

    //Set the initial LED states - change to suit your configuration
        LEDportState = 1


    // Main loop
    Do

        Locate 0, 0

        //Get a value for the ADC port
            mydelay = ReadAD( ANA0 )
            mydelay = scale( mydelay, 0, 255, 50, 1000 )

        //Set the port and only the state of our LEDs
            LATB = LEDportState AND 0b00001111

        // Show state on LCD
            Locate 0,5
            Print Right(ByteToBin ( LEDportState ),4)
            Print " "
            Print Left( Str(mydelay)+"    ",4)
            Locate 0,0

        //Wait, and then check the switch has been pressed
            Wait mydelay ms

        // Manage the direction
            If  funcKeyPressed() = TRUE Then
                //  change the direction
                direction = !direction
            End If

        //Set the LEDs
            If  direction = LED_LEFT  Then

                Print "<L:"

                If LEDportState.3 = 1 then 
                    LEDportState = 0
                    C = 1
                Else
                    C = 0
                End If
                'shift the contents of LEDportState
                Rotate LEDportState Left
            Else

                Print ">R:"

                'shift the contents of LEDportState
                C = 0
                Rotate LEDportState Right
                If C = 1 Then LEDportState.3 = 1
            End If

    Loop


        



// This is function, it returns the state of the switch
    Function  funcKeyPressed as Bit
    
        // Define some variables
        Dim CurrentSwitchState As Bit
        Dim LastSwitchState As Bit

        wait 1 ms

        // Is the switch pressed down ?
        If ( SWITCHIN = DOWN ) Then
            // Set the state
            CurrentSwitchState = TRUE
        Else
            // So, switch is therefore UP/released
            CurrentSwitchState = FALSE
        End If

        // This check ensures the state of the switch ....
        // ensure the switch has changed state
        If ( CurrentSwitchState <> LastSwitchState ) AND ( CurrentSwitchState = TRUE ) Then
            // Return the state value - returns TRUE
            funcKeyPressed = TRUE
        Else      
            // Switch is not down
            funcKeyPressed = FALSE
        End If

        LastSwitchState = CurrentSwitchState

    End Function