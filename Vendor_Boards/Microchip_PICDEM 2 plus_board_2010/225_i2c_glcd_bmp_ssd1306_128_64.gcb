
/*
This demonstration program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.

This program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.
This program draws lines, boxes, circles and prints strings and numbers.
The SSD1306 controller a small graphical OLED, suitable for a lot of various projects.
The display is 38*35 mm, with an active display surface of 0.96inches, and a 128*64 pixel resolution.
The display is easy to interface, using an I2C type of communication.
The GLCD is connected to the microprocessor as shown in the hardware section of this code.

This version is compatible will all version of GCBASIC as this demonstration uses Full Memory GLCD mode only.  This can be adapted to Low Memory GLCD mode.

************************************************************************
    @author  EvanV
    @licence GPL
    @version 1.02
    @date    14-01-2025
    */
// ----- Configuration
//Set microcontroller required
#chip 16F1937
#option Explicit
#CONFIG MCLRE=ON

/*
            ------------PORTA---------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ------------SW--------------ADC--
    IO:    ---------------------------------

            ------------PORTB----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------LED-LED-LED-LED--
    IO:    ---------------------------------

            ------------PORTC----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    -----TX-----SDA-SCL---------------
    IO:    ---------------------------------

            ------------PORTD----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    PWR-EN--RW--RS--DB7-DB6-DB5-DB4--
    IO:    ---------------------------------

            ------------PORTE----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------RST---------------
    IO:    ---------------------------------
    */

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF

    // Define constants to make things easier. We can reuse a constant at any time.
    #DEFINE LEDD0 PORTB.0
    #DEFINE LEDD1 PORTB.1
    #DEFINE LEDD2 PORTB.2
    #DEFINE LEDD3 PORTB.3

    #DEFINE LEDPORT LATB

    Dir     LEDD0 Out
    Dir     LEDD1 Out
    Dir     LEDD2 Out
    Dir     LEDD3 Out

    #DEFINE POTENTIOMETER PORTA.0
    //This is the PORTA.0 port
    Dir POTENTIOMETER In

    #DEFINE SWITCHIN      PORTA.4
    Dir     SWITCHIN      In
    #DEFINE DOWN          1

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF
    
    //! Specify explicit OCULAR_OM1614 support!!
    #DEFINE LCD_OCULAR_OM1614

    // Setup LCD Parameters
    #DEFINE LCD_IO 4

    // Define LCD Hardware settings
    #DEFINE LCD_RS      PORTD.4
    #DEFINE LCD_RW      PORTD.5
    #DEFINE LCD_Enable  PORTD.6

    #DEFINE LCD_DB4     PORTD.0
    #DEFINE LCD_DB5     PORTD.1
    #DEFINE LCD_DB6     PORTD.2
    #DEFINE LCD_DB7     PORTD.3

    //! Required for OCULAR LCD driver
    #DEFINE LCD_POWER   PORTD.7

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF
    
    
// Define I2C settings
    #DEFINE HI2C_DATA       PORTC.4
    #DEFINE HI2C_CLOCK      PORTC.3
    #DEFINE HI2C_BAUD_RATE  100
    HI2CMode (Master)

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

#INCLUDE <glcd.h>
#DEFINE GLCD_TYPE           GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address    0x78
#DEFINE GLCD_PROTECTOVERRUN

'These constants allow you to change the GLCD memory usage.
'We have set this demonstration to use only 128bytes of RAM for GLCD operations.
#DEFINE GLCD_TYPE_SSD1306_LOWMEMORY_GLCD_MODE
// #DEFINE GLCD_TYPE_SSD1306_CHARACTER_MODE_ONLY

//! Include a BMP file.  This will automatically convert to a table called ANOBIUMFULL
#INCLUDE "ANOBIUMFULL.BMP"

    Dim lengthofpicture, ram_index as word
    Dim bytenumber, widthofpicture, heightofpicture, orgcharlocx, currcharval, firstpass, charlocy, currcharrow, charlocx, ccount as Byte

    
    GLCDCLS
    GLCD_Open_PageTransaction 0,7
        GLCDPrint 0,0, "About to load BMP"
    GLCD_Close_PageTransaction
    Wait 4 s

    // Display a BMP file
    // Add your own case statement here to handle multiple BMPs, you just  need the variables to be defined
    ReadTable AnobiumFull, 0, lengthofpicture
    ReadTable AnobiumFull, 1, widthofpicture
    ReadTable AnobiumFull, 2, heightofpicture
    lengthofpicture =  heightofpicture / 8
    lengthofpicture = [word]lengthofpicture * widthofpicture

     // For BMP that fit the display simple write the data to the screen
    GLCD_Open_PageTransaction 0,7

        CharLocX = 0                      // specify X pos for BMP
        CharLocY = 0                      // specify Y pos for BMP.  For buffer any valid Y, for non-buffered 0,8,16, 24 etc...
        OrgCharLocX = CharLocX             // specify X orginisal X pos
        firstpass = true                   // specify this is the first pass

        for  ram_index =  3 to lengthofpicture + 3         ; start at third byte and finish at the end

                // Add your own case statement here to handle multiple BMPs, you just  need set CurrCharVal to the data value
                    ReadTable AnobiumFull,  ( ram_index ), CurrCharVal // read data

                    if ( ( ram_index - 3 ) % widthofpicture ) = 0  and firstpass = false then    // change position for new line of data
                        CharLocY = CharLocY + 8
                        CharLocX = OrgCharLocX
                    end if

                            For CurrCharRow = 0 to 7
                                if ( CharLocY + CurrCharRow < GLCD_HEIGHT ) and ( CharLocX < GLCD_WIDTH ) then
                                        If CurrCharVal.0 = 0 Then
                                            PSet CharLocX , CharLocY + CurrCharRow, GLCDBackground
                                        Else
                                            PSet CharLocX , CharLocY + CurrCharRow, GLCDForeground
                                        End If
                                end if
                                Rotate CurrCharVal Right
                            Next

                    firstpass = false                                         // now this is NOT the first pass
                    CharLocX++                                                // increment the X pos
        next
    GLCD_Close_PageTransaction
