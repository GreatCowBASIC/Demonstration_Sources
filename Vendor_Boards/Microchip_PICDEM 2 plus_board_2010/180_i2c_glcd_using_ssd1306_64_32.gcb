/*

    This demonstration program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.

    This program draws lines, boxes, circles and prints strings and numbers.
    The SSD1306 controller a small graphical OLED, suitable for a lot of various projects.
    The display is 19*17 mm, with an active display surface of 0.48inches , and a 64*32 pixel resolution.
    The display is easy to interface, using an I2C type of communication.
    The GLCD is connected to the microprocessor as shown in the hardware section of this code.

************************************************************************
    @author  EvanV
    @licence GPL
    @version 1.02
    @date    09-01-2025
    
*/
// ----- Configuration
//Set microcontroller required
#chip 16F1937
#option Explicit
#CONFIG MCLRE=ON

/*
            ------------PORTA---------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ------------SW--------------ADC--
    IO:    ---------------------------------

            ------------PORTB----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------LED-LED-LED-LED--
    IO:    ---------------------------------

            ------------PORTC----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    -----TX-----SDA-SCL---------------
    IO:    ---------------------------------

            ------------PORTD----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    PWR-EN--RW--RS--DB7-DB6-DB5-DB4--
    IO:    ---------------------------------

            ------------PORTE----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------RST---------------
    IO:    ---------------------------------
    */

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF

    // Define constants to make things easier. We can reuse a constant at any time.
    #DEFINE LEDD0 PORTB.0
    #DEFINE LEDD1 PORTB.1
    #DEFINE LEDD2 PORTB.2
    #DEFINE LEDD3 PORTB.3

    #DEFINE LEDPORT LATB

    Dir     LEDD0 Out
    Dir     LEDD1 Out
    Dir     LEDD2 Out
    Dir     LEDD3 Out

    #DEFINE POTENTIOMETER PORTA.0
    //This is the PORTA.0 port
    Dir POTENTIOMETER In

    #DEFINE SWITCHIN      PORTA.4
    Dir     SWITCHIN      In
    #DEFINE DOWN          1

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF
    
    //! Specify explicit OCULAR_OM1614 support!!
    #DEFINE LCD_OCULAR_OM1614

    // Setup LCD Parameters
    #DEFINE LCD_IO 4

    // Define LCD Hardware settings
    #DEFINE LCD_RS      PORTD.4
    #DEFINE LCD_RW      PORTD.5
    #DEFINE LCD_Enable  PORTD.6

    #DEFINE LCD_DB4     PORTD.0
    #DEFINE LCD_DB5     PORTD.1
    #DEFINE LCD_DB6     PORTD.2
    #DEFINE LCD_DB7     PORTD.3

    //! Required for OCULAR LCD driver
    #DEFINE LCD_POWER   PORTD.7

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF
    
    
// Define I2C settings
    #DEFINE HI2C_DATA       PORTC.4
    #DEFINE HI2C_CLOCK      PORTC.3
    #DEFINE HI2C_BAUD_RATE  100
    HI2CMode (Master)

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

#INCLUDE <glcd.h>
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306_64x32
#DEFINE GLCD_I2C_Address 0x78

// ----- Main program

    Dim BYTENUMBER, CCOUNT As Byte

    CCount = 0
    Dim wordNumber, adcval, ldrval As Word
    
    wordNumber = 0
    byteNumber = 0

    GLCDPrint (10, 0,   "GCBASIC")
    GLCDPrint (10, 8,  "Anobium")
    GLCDPrint (20, 16, "2025")

    Wait 2 s
    GLCDCLS


    GLCDPrint (20, 0, GLCD_WIDTH )
    GLCDPrint (23, 8, "*" )
    GLCDPrint (20, 16, GLCD_HEIGHT )


    Wait 3 s
    GLCDCLS


    GLCDPrint 0, 0,   "Version 1"


        GLCDPrint (0, 8, "Full Mem.")
        GLCDPrint (0, 16, "GLCD mode")

    Wait 3 s    
    GLCDCLS
    
    Do Forever

        For CCount = 31 To 127

            ' Prepare a string
            adcval = ReadAD ( ANA0 )

            ' Draw a box
            Box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1
            ' Draw a box
            Box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1

            ' Draw a circle
            Circle( 44,24,5)
            ' Draw a line
            Line 0,GLCD_HEIGHT-1,44,19

            GLCDPrint ( 2 , 2,  "ADC:"+Pad(Str(adcval),4 ) )

            ' Draw a string
            GLCDPrint(2, 10, Pad(Str(CCount),4 ))

        Next
    Loop
    End


/* GCBASIC Optimisation file - this will optimise ADC operations by disabling the ADC operations on the AD channel that is set to FALSE
                             to enable ADC operations on a specific AD channel set to TRUE

            Legacy chip Constants for ADC
 */
            #DEFINE USE_AD0 TRUE
            #DEFINE USE_AD1 FALSE
            #DEFINE USE_AD2 FALSE
            #DEFINE USE_AD2 FALSE
            #DEFINE USE_AD3 FALSE
            #DEFINE USE_AD4 FALSE
            #DEFINE USE_AD5 FALSE
            #DEFINE USE_AD6 FALSE
            #DEFINE USE_AD7 FALSE
            #DEFINE USE_AD8 FALSE
            #DEFINE USE_AD9 FALSE
            #DEFINE USE_AD10 FALSE
            #DEFINE USE_AD11 FALSE
            #DEFINE USE_AD12 FALSE
            #DEFINE USE_AD13 FALSE
            #DEFINE USE_AD14 FALSE
            #DEFINE USE_AD15 FALSE
            #DEFINE USE_AD16 FALSE
            #DEFINE USE_AD17 FALSE
            #DEFINE USE_AD18 FALSE
            #DEFINE USE_AD19 FALSE
            #DEFINE USE_AD20 FALSE
            #DEFINE USE_AD21 FALSE
            #DEFINE USE_AD22 FALSE
            #DEFINE USE_AD23 FALSE
            #DEFINE USE_AD24 FALSE
            #DEFINE USE_AD25 FALSE
            #DEFINE USE_AD26 FALSE
            #DEFINE USE_AD27 FALSE
            #DEFINE USE_AD28 FALSE
            #DEFINE USE_AD29 FALSE
            #DEFINE USE_AD30 FALSE
            #DEFINE USE_AD31 FALSE
            #DEFINE USE_AD32 FALSE
            #DEFINE USE_AD33 FALSE
            #DEFINE USE_AD34 FALSE
//          Recent chip Constants for ADC 
            #DEFINE USE_ADA0 FALSE
            #DEFINE USE_ADA1 FALSE
            #DEFINE USE_ADA2 FALSE
            #DEFINE USE_ADA3 FALSE
            #DEFINE USE_ADA4 FALSE
            #DEFINE USE_ADA5 FALSE
            #DEFINE USE_ADA6 FALSE
            #DEFINE USE_ADA7 FALSE
            #DEFINE USE_ADB0 FALSE
            #DEFINE USE_ADB1 FALSE
            #DEFINE USE_ADB2 FALSE
            #DEFINE USE_ADB3 FALSE
            #DEFINE USE_ADB4 FALSE
            #DEFINE USE_ADB5 FALSE
            #DEFINE USE_ADB6 FALSE
            #DEFINE USE_ADB7 FALSE
            #DEFINE USE_ADC0 FALSE
            #DEFINE USE_ADC1 FALSE
            #DEFINE USE_ADC2 FALSE
            #DEFINE USE_ADC3 FALSE
            #DEFINE USE_ADC4 FALSE
            #DEFINE USE_ADC5 FALSE
            #DEFINE USE_ADC6 FALSE
            #DEFINE USE_ADC7 FALSE
            #DEFINE USE_ADD0 FALSE
            #DEFINE USE_ADD1 FALSE
            #DEFINE USE_ADD2 FALSE
            #DEFINE USE_ADD3 FALSE
            #DEFINE USE_ADD4 FALSE
            #DEFINE USE_ADD5 FALSE
            #DEFINE USE_ADD6 FALSE
            #DEFINE USE_ADD7 FALSE
            #DEFINE USE_ADE0 FALSE
            #DEFINE USE_ADE1 FALSE
            #DEFINE USE_ADE2 FALSE
