'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program combines the GLCD demonstration and CLC.
'''This shows how the switch input and the LED can be controlled without using the core microcontroller.
'''The LED changes state when the switch is depressed and there is no main user code.
'''
''' MPLABÂ® Xpress PIC16F18446 contains one mechanical button. This is a generic user configurable
''' button and when a button is pressed it will drive the I/O line to GND.
''' There is no pull-up resistor connected to the generic user button. So we enable
''' the internal pull-up in the PIC16F18446 to use the mechanical button.
'''
'''@author  EvanV
'''@licence GPL
'''@version 1.0
'''@date    7.7.2018
'''********************************************************************************

' ----- Configuration
#CHIP 16f18446, 32
#OPTION Explicit

#INCLUDE <glcd.h>

'Set a constant to refer to the LED.  RA2 is a Yellow LED called LED0 Edge connector, see section 3.3.1 of the MPLAB-Xpress-PIC16F18446-Evaluation-Board.pdf
#DEFINE LED0 porta.2
'Set LED as an output
Dir LED0 Out

'Set a constant to refer to the switch
#DEFINE SW0 portc.2
'Set the switch as an input
Dir SW0 In
'Enable weak pullup, see section 3.3.2 of the MPLAB-Xpress-PIC16F18446-Evaluation-Board.pdf
WPUC2 = 1

'Generated by PIC PPS Tool for GCBASIC
'PPS Tool version: 0.0.5.20
'PinManager data: v1.65.2
'Generated for 16F18446
'
'Template comment at the start of the config file
'
#STARTUP InitPPS, 85
#DEFINE PPSToolPart 16F18446

Sub InitPPS

    'Module: MSSP1
    'SCL1 > RB7
    RB7PPS = 0x0013
    'RB7 > SCL1 (bi-directional)
    SSP1CLKPPS = 0x000F
    'SDA1 > RB5
    RB5PPS = 0x0014
    'RB5 > SDA1 (bi-directional)
    SSP1DATPPS = 0x000D
    'Module: CLC1
    'CLC1OUT > RA2
    RA2PPS = 0x0001

End Sub
'Template comment at the end of the config file



' ----- Define Hardware settings
' Define I2C settings - CHANGE PORTS if required for your specific device.
#DEFINE HI2C_BAUD_RATE 400
#DEFINE HI2C_DATA  PORTB.5
#DEFINE HI2C_CLOCK PORTB.7
'I2C pins need to be input for SSP module when used on Microchip PIC device
Dir HI2C_DATA In
Dir HI2C_CLOCK In

' ----- Define GLCD Hardware settings
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address 0x78


' ----- Define CLC config
'CLC Setting CLC1 or-xor to CLC1OUT which is the LED
CLC1GLS0  = 0x02
CLC1GLS1  = 0x00
CLC1GLS2  = 0x00
CLC1GLS3  = 0x00
CLC1SEL0  = 0x00
CLC1SEL1  = 0x13
CLC1SEL2  = 0x01
CLC1SEL3  = 0x13
CLC1POL   = 0x00
CLC1CON   = 0x81
CLCIN0PPS = 0x12
CLCIN1PPS = 0x00
CLCIN2PPS = 0x00
CLCIN3PPS = 0x00

' ----- Define variables

Dim BYTENUMBER, CCOUNT As Byte

CCount = 0
Dim longNumber As Long
' max value = 4294967290
longNumber = 123456
Dim wordNumber As Word
Dim outstring As String
wordNumber = 0
byteNumber = 0

// ----- Main program

GLCDPrint 0, 0,   "Great Cow BASIC"
GLCDPrint (0, 11, "Anobium 2019")
GLCDPrint (0, 23, "MPLAB Xpress Board")
GLCDPrint (0, 35, "PIC"+ChipNameStr )
GLCDPrint (0, 47, "I2C OLED SDD1306" )


Wait 3 s
GLCDCLS

' Prepare the static components of the screen
' Print some text
GLCDPrint ( 2,   1, "PrintStr")
' Print some more text
GLCDPrint ( 64,  1, "@")
' Print chip speed
GLCDPrint ( 72,  1, ChipMHz)
' Print some text
GLCDPrint ( 86, 1, "Mhz")
' Draw a box
Box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1
' Draw a box
Box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1
' Draw a circle
Circle( 44,41,15)
' Draw a line
Line 64,31,0,31

Do Forever

    For CCount = 32 To 127

        ' Print a HEX string
        GLCDPrint ( 64 ,  36,  Hex(longNumber_E ) )
        ' Print a HEX string
        GLCDPrint ( 76 ,  36,  Hex(longNumber_U ) )
        ' Print a HEX string
        GLCDPrint ( 88 ,  36,  Hex(longNumber_H ) )
        ' Print a HEX string
        GLCDPrint ( 100 ,  36, Hex(longNumber   ) )
        ' Print a HEX string
        GLCDPrint ( 112 ,  36, "h" )


        ' Print a padded string
        GLCDPrint ( 64 ,  44, Pad(Str(wordNumber), 5 ) )
        ' Print a padded string
        GLCDPrint ( 64 ,  52, Pad(Str(byteNumber), 3 ) )


        ' Draw a Box
        Box (46,9,56,19)
        ' Draw a character
        GLCDDrawChar(48, 10, CCount )
        ' Prepare a string
        outString = Str( CCount )
        ' Draw a string
        GLCDDrawString(64, 10, Pad(outString,3) )

        ' Draw a filled box
        FilledBox 3,43,11,51, wordNumber

        ' Draw a filled box
        FilledCircle( 44,41,9, longNumber XOR 1)
        ' Draw a line
        Line 0,63,64,31

        ' Do some simple maths
        longNumber = longNumber + 7 : wordNumber = wordNumber + 3 : byteNumber++

    Next

Loop
End
