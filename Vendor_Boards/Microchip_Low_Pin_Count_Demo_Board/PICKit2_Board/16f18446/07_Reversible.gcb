'''
''' GCBASIC Header block Header block
'''
'''@author  Chris Roper
'''@licence GPL
'''@version 1.00
'''@date    03/05/2018
'''********************************************************************

#CHIP 16F18446
' Allow RA3 to be used as an Input
#CONFIG MCLRE_OFF
' as found by A2D example
#DEFINE ADC_Fudge 0x0739

' Declare constants and Aliases
#DEFINE SWITCH_DOWN   0
#DEFINE SWITCH_UP     1

#DEFINE LED_RIGHT     TRUE
#DEFINE LED_LEFT      FALSE

' Push button Switch
#DEFINE SW1           PORTA.3
' Potentiometer
#DEFINE VR1           PORTA.0

' Declare Variables
#OPTION Explicit
Dim Direction As Byte

'start from the right to left
Direction = LED_RIGHT

Dir PortC Out
' LED D4 ON
PortC.3 = 1

Dir VR1 In
Dir SW1 In

Do

    Wait Scale( ReadAD12 ( AN0 ), 0, ADC_Fudge, 100, 1000) ms

    If check_switch = TRUE Then
        ' toggle the direction
        direction = !direction
    End If

    If  direction = LED_RIGHT  Then
        'shift to the right by 1
        Set C Off
        Rotate portc Right

        ' when the last LED is lit, restart the pattern
        If C = 1 Then
            portc.3 = 1
        End If

    Else
        'shift to the left by 1
        Set C Off
        Rotate portc Left

        'when the last LED is lit, restart the pattern
        If  portC.4 = 1 Then
            portC.0 = 1
            portC.4 = 0
        End If
    End If

Loop

End

'global variable - if button is held down, we don't want to keep on switching directions
Dim previous_state As BIT
previous_state = SWITCH_UP

Function  check_switch
'switch is normally open to Vdd ...when pressed, RA3 is connected to GND
    If (SW1 = SWITCH_DOWN) Then
        'debounce by delaying and checking if switch is still pressed
        Wait 5 ms
        If ( (previous_state =  SWITCH_DOWN) & (SW1 = SWITCH_DOWN) ) Then
            ' don't toggle
            check_switch = FALSE
            Exit Function
        Else
            ' check if still down
            If (SW1 = SWITCH_DOWN) Then
                previous_state = SWITCH_DOWN
                ' reverse the LEDs
                check_switch = TRUE
                Exit Function
            Else
                'switch not properly held down
                previous_state = SWITCH_UP
                ' don't reverse
                check_switch = FALSE
                Exit Function
            End If
        End If
    Else
        'switch not pressed
        previous_state = SWITCH_UP
        'don't reverse
        check_switch = FALSE
        Exit Function
    End If
End Function
