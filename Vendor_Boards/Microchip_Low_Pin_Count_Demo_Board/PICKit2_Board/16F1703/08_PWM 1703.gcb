'''
'''******************************************************************
''' Lesson 8 - "PWM"
'''
''' Pulse-Width Modulation (PWM) is a scheme that provides power to a load by switching
''' quickly between fully on and fully off states. The PWM signal resembles a square wave
''' where the high portion of the signal is considered the on state and the low portion of
''' the signal is considered the off state. The high portion, also known as the pulse width,
''' can vary in time and is defined in steps. A longer, high on time will illuminate the LED
''' brighter. The frequency or period of the PWM does not change. A larger number of
''' steps applied, which lengthens the pulse width, also supplies more power to the load.
''' Lowering the number of steps applied, which shortens the pulse width, supplies less
''' power. The PWM period is defined as the duration of one complete cycle or the total
''' amount of on and off time combined.
'''
''' Demo1.  Rotating the POT will adjust the brightness of the CCP1 ports..
'''
''' Also shows how to use the PPS tool to re-route signals in the microchip.
'''*** " All pin digital outputs default to PORT latch data. Any pin can be selected as a
''' peripheral digital output with the PPS output selection registers." ***(datasheet)
'''
''' As CCP1 is connected to portc.0 to portc.3
'''
'''  PIC: 16F1703
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: PICkit 2 Low Pin Count Demo Board
'''  Date: 21.4.2020
'''
''''''******************************************************************
''' See Low Pin Count Demo Board User's Guide for Lesson Information*
''''''*****************************************************************
'''
'''


 #chip 16f1703

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.1
    'PinManager data: v1.79.0
    'Generated for 16f1703
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 16f1703

    Sub InitPPS

            'Module: CCP1
            RC0PPS = 0x000C    'CCP1 > RC0
            CCP1PPS = 0x0010    'RC0 > CCP1 (bi-directional)
            RC1PPS = 0x000C    'CCP1 > RC1
            CCP1PPS = 0x0011    'RC1 > CCP1 (bi-directional)
            RC2PPS = 0x000C    'CCP1 > RC2
            CCP1PPS = 0x0012    'RC2 > CCP1 (bi-directional)
            RC3PPS = 0x000C    'CCP1 > RC3
            CCP1PPS = 0x0013    'RC3 > CCP1 (bi-directional)

    End Sub
    'Template comment at the end of the config file


    '' -------------------LATC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' LED:   --------PWM----|DS4|DS3|DS2|DS1|-
    ''-----------------------------------------
    ''

 #script
        'This script provides PWM results!

        'reference voltage                        5v
        'actual voltage at port when 100% Pot     4.15
        'adc max                                  1023
        'number of graduations requried           255
        reference_voltage = 4.15
        vcc = 5
        numberofgrads = 255
        maxADC = 1023
        ADC_adjustment = int((reference_voltage*100)/(vcc*10))
        ADC_adjustment = int(ADC_adjustment * maxADC / numberofgrads )

 #endscript

''' As CCP1 is connect to portc.0 thru to portc.3 using PPS

      dir portc.0 out
      dir portc.1 out
      dir portc.2 out
      dir portc.3 out

      dim calculatedPWM as word

      do
          wait 5 ms
          calculatedPWM = ( ( ReadAD10 ( AN0 ) * 10  ) / ADC_adjustment   )
          if calculatedPWM > 255 then calculatedPWM = 255
          HPWM 1, 40, calculatedPWM
      loop
