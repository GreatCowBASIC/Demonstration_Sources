'''
'''This program shows how to use PWM to provide 1KHz at 50% for 64Khz chip frequency
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.01
'''@date       31.12.2020
'''********************************************************************************
#CHIP 18F16Q41
#OPTION Explicit


    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.2
    'PinManager data: v1.81.0
    'Generated for 18f16q41
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18f16q41

    Sub InitPPS

            'Module: PWM1_16BIT
            RC0PPS = 0x000A    'PWM11 > RC0
            RC1PPS = 0x000A    'PWM11 > RC1

    End Sub
    'Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   ---------------------SW------ADC--
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX---------LED--LED-LED LED--
''-----------------------------------------




'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATC

Dir     RC0         Out
Dir     RC1         Out
Dir     RC2         Out
Dir     RC3         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTA.3
Dir     SWITCHIN      In

'analogue port selection
#DEFINE ADCChannelSelected AN0
#DEFINE ADSpeed LowSpeed



' ------ Start of main Program to provide 250Hz at 50% for 16Khz chip frequency


    //PWMERS External Reset Disabled;
    PWM1ERS = 0x00;

    //PWMCLK FOSC;
    PWM1CLK = 0x02;

    //PWMLDS Autoload disabled;
    PWM1LDS = 0x00;

    //PWMPRL 255;
    PWM1PRL = 0xFF;

    //PWMPRH 249;
    PWM1PRH = 0xF9;

    //PWMCPRE No prescale;
    PWM1CPRE = 0x00;

    //PWMPIPOS No postscale;
    PWM1PIPOS = 0x00;

    //PWMS1P2IF PWM2 output match did not occur; PWMS1P1IF PWM1 output match did not occur;
    PWM1GIR = 0x00;

    //PWMS1P2IE disabled; PWMS1P1IE disabled;
    PWM1GIE = 0x00;

    //PWMPOL2 disabled; PWMPOL1 disabled; PWMPPEN disabled; PWMMODE Left aligned mode;
    PWM1S1CFG = 0x00;

    //PWMS1P1L 0;
    PWM1S1P1L =   0x80

    //PWMS1P1H 125;
    PWM1S1P1H = 0x3E

    //PWMS1P2L 0;
    PWM1S1P2L = 0x00;

    //PWMS1P2H 125;
    PWM1S1P2H = 0x7D;

    //Clear PWM1_16BIT period interrupt flag
    PWM1PIF = 0;

    //Clear PWM1_16BIT interrupt flag
    PWM1IF = 0;

    //Clear PWM1_16BIT slice 1, output 1 interrupt flag
    S1P1IF = 0;

    //Clear PWM1_16BIT slice 1, output 2 interrupt flag
    S1P2IF = 0;

    //PWM1_16BIT interrupt enable bit
    PWM1IE = 0;

    //PWM1_16BIT period interrupt enable bit
    PWM1PIE = 0;

    //PWMEN enabled; PWMLD disabled; PWMERSPOL disabled; PWMERSNOW disabled;
    PWM1CON = 0x80;




    Dim ADCval as word alias PWM1S1P1H, PWM1S1P1L



    Do
          for ADCVal = 0 to 0x3FFF
            wait 250 us
            PWM1CON = 0x00
            PWM1CON = 0x80
          Next

          for ADCVal = 0x3FFe to 0x00
            wait 250 us
            PWM1CON = 0x00
            PWM1CON = 0x80
          Next


    Loop

    End
