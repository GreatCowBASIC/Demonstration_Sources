'''
'''This demonstration program is a simple GLCD demonstration of the SSD1306 GLCD capabilities and Maths/Trig capabilities.
'''
'''This program demonstrates the basic primatives a voltmeter on a Graphical LCD (GLCD)
''':
'''You can change the microcontroller, the GLCD and the analogue port.
'''
'''To change the microcontroller simply change the #chip statement
'''To change the GLCD replace GLCD definition
'''To change the analogue port change the ADCChannelSelected constant
'''
'''************************************************************************
'''@author  StanC & EvanV
'''@licence GPL
'''@version 1.01
'''@date    31.12.2020
' ----- Configuration

'Chip Settings.
#CHIP 18F16Q41
#OPTION Explicit

#INCLUDE <trig2places.h>


'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.2
    'PinManager data: v1.81.0
    'Generated for 18f16q41
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18f16q41

    Sub InitPPS

            'Module: I2C1
            I2C1SDAPPS = 0x0C;   //RB4->I2C1:SDA1;
            RB6PPS = 0x21;   //RB6->I2C1:SCL1;
            RB4PPS = 0x22;   //RB4->I2C1:SDA1;
            I2C1SCLPPS = 0x0E;   //RB6->I2C1:SCL1;

            'Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            'Module: UART1
            RC6PPS = 0x0010    'TX1 > RC6

    End Sub
    'Template comment at the end of the config file

'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   ---------------------SW------ADC--
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX---------LED--LED-LED LED--
''-----------------------------------------




'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATC

Dir     RC0         Out
Dir     RC1         Out
Dir     RC2         Out
Dir     RC3         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTA.2
Dir     SWITCHIN      In

'Setup Serial port
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING


' Define I2C settings
#DEFINE HI2C_BAUD_RATE 125
#DEFINE HI2C_DATA PORTB.4
#DEFINE HI2C_CLOCK PORTB.6
'Initialise I2C - note for the I2C module the ports need to be set to IN
Dir HI2C_DATA Out
Dir HI2C_CLOCK Out

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

'analogue port selection
#DEFINE ADCChannelSelected AN0
#DEFINE ADSpeed LowSpeed



#INCLUDE <glcd.h>
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address 0x78
'These constants allow you to change the GLCD memory usage.
#DEFINE GLCD_PROTECTOVERRUN


'*******************************************************************************************

Dim radius,xcentre,ycentre,xend,old_xend,yend,old_yend As Byte
Dim angle,old_angle,adcval As Word
Dim volts As String * 4
xcentre=63
ycentre=58
'draw dial
GLCDCLS
Box 0,0,127,63
For radius=144 To 141
    dial
Next radius
GLCDDrawChar (5,40,Asc("0")):GLCDDrawChar (115,40,Asc("5"))
radius=120
angle=1
anglecheck

Do
    old_angle=angle
    '--- DVM
    adcval=ReadAD(ADCChannelSelected)


    adcval = scale( adcval, 0, 210, 0, 196 )
    angle=adcval/2
    '
    adcval=adcval*100
    adcval=adcval/51
    volts=Str(adcval)
    If adcval<10 Then
        volts="0.0"+Left(volts,1,1)
        Goto volt_format_done
    End If
    If adcval<100 Then
        volts="0."+Mid(volts,1,2)
    Else
        volts=Left(volts,1,1)+"."+Mid(volts,2,2)
    End If
volt_format_done:
    '---
    anglecheck
    old_xend = xcentre + radius  * sin (old_angle)/255
    old_yend = ycentre - radius  * cos (old_angle)/255
    xend = xcentre + radius  * sin (angle)/255
    yend = ycentre - radius  * cos (angle)/255
    If old_angle<>angle Then
        '-- update screen if volts has changed
        '   erase old needle

        Line (xcentre,ycentre,old_xend,old_yend,0)
        '   draw V
        Line (55,22,63,38):Line (63,38,71,22)
        '   print new voltage
        'print Voltage
        GLCDPrint (50,10,volts,1)
        '   draw new needle
        Line (xcentre,ycentre,xend,yend,1)
        Wait 20 ms
    End If
Loop
'end main


Sub plotdial
    xend = 63 + radius  * sin (angle)/255
    yend = 58 - radius  * cos (angle)/255
    Pset (xend,yend,1)
End Sub
'
Sub dial
    For angle= 296 To 359
        plotdial
    Next angle
    '
    For angle= 0 To 63
        plotdial
    Next angle
End Sub
'
Sub anglecheck
    If angle>127 Then
        angle =angle-127
    Else
        angle =296+angle
    End If
End Sub
