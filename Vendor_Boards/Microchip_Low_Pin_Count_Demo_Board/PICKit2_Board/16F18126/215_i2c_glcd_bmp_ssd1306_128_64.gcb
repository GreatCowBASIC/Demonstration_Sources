'''
'''This demonstration program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.
'''
'''This program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The SSD1306 controller a small graphical OLED, suitable for a lot of various projects.
'''The display is 38*35 mm, with an active display surface of 0.96inches, and a 128*64 pixel resolution.
'''The display is easy to interface, using an I2C type of communication.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''
'''This version is compatible will all version of GCBASIC as this demonstration uses Full Memory GLCD mode only.  This can be adapted to Low Memory GLCD mode.
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.00
'''@date    31.11.2022
' ----- Configuration


'Chip Settings.
#CHIP 16f18126
#OPTION Explicit


    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.3
    'PinManager data: Not available (3)
    // Generated for 16f18126
    //
    // Template comment at the start of the config file
    //
    #startup InitPPS, 85
    #define PPSToolPart 16f18126

    Sub InitPPS
              
            'Module: MSSP1
            RA1PPS = 0x001B    'SCK1 > RA1
            SSP1CLKPPS = 0x0001    'RA1 > SCK1 (bi-directional)
            RA4PPS = 0x001C    'SDA1 > RA4
            SSP1DATPPS = 0x0004    'RA4 > SDA1 (bi-directional)
        
      
    End Sub
    // Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   -------------SDA-SW------SCL-ADC--
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ------------TX-LED--LED-LED LED--
''-----------------------------------------




'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATC

Dir     RC0         Out
Dir     RC1         Out
Dir     RC2         Out
Dir     RC3         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTA.3
Dir     SWITCHIN      In

'Setup Serial port
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING


' Define I2C settings
#DEFINE HI2C_BAUD_RATE 400
#DEFINE HI2C_DATA PORTA.4
#DEFINE HI2C_CLOCK PORTA.1
'Initialise I2C - note for the I2C module the ports need to be set to IN
Dir HI2C_DATA In
Dir HI2C_CLOCK In


'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.
#INCLUDE <glcd.h>
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address 0x78

'A constant to  allow you to change the GLCD memory usage.
#DEFINE GLCD_PROTECTOVERRUN

'Include a BMP file.  This will automatically convert to a table called ANOBIUMFULL
#include "anobiumfull.bmp"

  Dim lengthofpicture, ram_index as word
  Dim bytenumber, widthofpicture, heightofpicture, orgcharlocx, currcharval, firstpass, charlocy, currcharrow, charlocx, ccount as Byte


  ' Display a BMP file
  GLCDCLS
  GLCDPrintStringLn "About to load BMP"
  Wait 1 s

  ' Add your own case statement here to handle multiple BMPs, you just  need the variables to be defined
  ReadTable AnobiumFull, 0, lengthofpicture
  ReadTable AnobiumFull, 1, widthofpicture
  ReadTable AnobiumFull, 2, heightofpicture
  lengthofpicture =  heightofpicture / 8
  lengthofpicture = [word]lengthofpicture * widthofpicture

  ' For BMP that fit the display simple write the data to the screen

  CharLocX = 0                       ' specify X pos for BMP
  CharLocY = 0                       ' specify Y pos for BMP.  For buffer any valid Y, for non-buffered 0,8,16, 24 etc...
  OrgCharLocX = CharLocX              ' specify X orginisal X pos
  firstpass = true                    ' specify this is the first pass

  for  ram_index =  3 to lengthofpicture + 3         ; start at third byte and finish at the end

            ' Add your own case statement here to handle multiple BMPs, you just  need set CurrCharVal to the data value
            ReadTable AnobiumFull,  ( ram_index ), CurrCharVal  ' read data

            if ( ( ram_index - 3 ) % widthofpicture ) = 0  and firstpass = false then     ' change position for new line of data
               CharLocY = CharLocY + 8
               CharLocX = OrgCharLocX
            end if

                    For CurrCharRow = 0 to 7
                        if ( CharLocY + CurrCharRow < GLCD_HEIGHT ) and ( CharLocX < GLCD_WIDTH ) then
                            If CurrCharVal.0 = 0 Then
                               PSet CharLocX , CharLocY + CurrCharRow, GLCDBackground
                            Else
                               PSet CharLocX , CharLocY + CurrCharRow, GLCDForeground
                            End If
                        end if
                        Rotate CurrCharVal Right
                    Next

            firstpass = false                                          ' now this is NOT the first pass
            CharLocX++                                                 ' increment the X pos
  next
