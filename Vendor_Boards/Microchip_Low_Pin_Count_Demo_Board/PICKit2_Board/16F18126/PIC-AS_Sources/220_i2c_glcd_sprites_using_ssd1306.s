;Program compiled by GCBASIC (1.00.00 Release Candidate 2022-11-06 (Windows 64 bit) : Build 1189) for Microchip PIC-AS
;  See the GCBASIC forums at http://sourceforge.net/projects/gcbasic/forums,
;  Check the documentation and Help at http://gcbasic.sourceforge.net/help/,
;or, email:
;   evanvennn at users dot sourceforge dot net

;********************************************************************************


;Set up the assembler options (Chip type, clock source, other bits and pieces)
;PROCESSOR   16F18126
 PAGEWIDTH   180
 RADIX       DEC
 TITLE       "d:\GreatCowBASICGits\Demonstration_Sources.git\trunk\Vendor_Boards\Microchip_Low_Pin_Count_Demo_Board\PICKit2_Board\16F18126\220_i2c_glcd_sprites_using_ssd1306.s"
 SUBTITLE    "11-24-2022"

; Reverse lookup file(s)
; C:\Program Files\Microchip\xc8\v2.40\pic\include\proc\pic16f18126.inc
; C:\Program Files\Microchip\xc8\v2.40\pic\dat\cfgmap\16f18126.cfgmap
; Alternative CONFIG file is to be found at C:\Program Files\Microchip\xc8\vX.YY\pic\dat\cfgdata as per Microchip support ticket #00730936 

;********************************************************************************

;********************************************************************************
;Explicit CONFIG
 CONFIG FCMEN=ON                                 ;C1 Reverselookup FCMEN = ON
 CONFIG CLKOUTEN=OFF                             ;C1 Reverselookup CLKOUTEN = OFF
 CONFIG RSTOSC=HFINTOSC_32MHz                    ;C1 Reverselookup RSTOSC = HFINTOSC_32MHZ
 CONFIG FEXTOSC=OFF                              ;C1 Reverselookup FEXTOSC = OFF
 CONFIG MCLRE=INTMCLR                            ;C1 Reverselookup MCLRE = INTMCLR
 CONFIG WDTE=OFF                                 ;C1 Reverselookup WDTE = OFF
 CONFIG LVP=OFF                                  ;C1 Reverselookup LVP = OFF
 CONFIG WRTSAF=OFF                               ;C1 Reverselookup WRTSAF = OFF
 CONFIG WRTD=OFF                                 ;C1 Reverselookup WRTD = OFF
 CONFIG WRTB=OFF                                 ;C1 Reverselookup WRTB = OFF
 CONFIG CPD=OFF                                  ;C1 Reverselookup CPD = OFF
 CONFIG CP=OFF                                   ;C1 Reverselookup CP = OFF
;Inferred CONFIG


;********************************************************************************
; The XC8 xc.inc include file.  This MUST be placed after the CONFIG statements.

 #include <xc.inc>

;********************************************************************************

;Set aside RAM memory locations for variables. All variables are global.
GLOBAL	CHARCODE
 CHARCODE                         EQU 32          ; 0X20
GLOBAL	CHARCOL
 CHARCOL                          EQU 33          ; 0X21
GLOBAL	CHARCOLS
 CHARCOLS                         EQU 35          ; 0X23
GLOBAL	CHARCOL_H
 CHARCOL_H                        EQU 34          ; 0X22
GLOBAL	CHARLOCX
 CHARLOCX                         EQU 36          ; 0X24
GLOBAL	CHARLOCX_H
 CHARLOCX_H                       EQU 37          ; 0X25
GLOBAL	CHARLOCY
 CHARLOCY                         EQU 38          ; 0X26
GLOBAL	CHARLOCY_H
 CHARLOCY_H                       EQU 39          ; 0X27
GLOBAL	CHARROW
 CHARROW                          EQU 40          ; 0X28
GLOBAL	CHARROWS
 CHARROWS                         EQU 42          ; 0X2A
GLOBAL	CHARROW_H
 CHARROW_H                        EQU 41          ; 0X29
GLOBAL	COL
 COL                              EQU 43          ; 0X2B
GLOBAL	CURRCHARCOL
 CURRCHARCOL                      EQU 44          ; 0X2C
GLOBAL	CURRCHARROW
 CURRCHARROW                      EQU 45          ; 0X2D
GLOBAL	CURRCHARVAL
 CURRCHARVAL                      EQU 46          ; 0X2E
GLOBAL	CURX
 CURX                             EQU 47          ; 0X2F
GLOBAL	CURY
 CURY                             EQU 48          ; 0X30
GLOBAL	DELAYTEMP
 DELAYTEMP                        EQU 112          ; 0X70
GLOBAL	DELAYTEMP2
 DELAYTEMP2                       EQU 113          ; 0X71
GLOBAL	DIRX
 DIRX                             EQU 49          ; 0X31
GLOBAL	DIRY
 DIRY                             EQU 50          ; 0X32
GLOBAL	DRAWLINE
 DRAWLINE                         EQU 51          ; 0X33
GLOBAL	DRAWLINE_H
 DRAWLINE_H                       EQU 52          ; 0X34
GLOBAL	GLCDBACKGROUND
 GLCDBACKGROUND                   EQU 53          ; 0X35
GLOBAL	GLCDBACKGROUND_H
 GLCDBACKGROUND_H                 EQU 54          ; 0X36
GLOBAL	GLCDBITNO
 GLCDBITNO                        EQU 55          ; 0X37
GLOBAL	GLCDCHANGE
 GLCDCHANGE                       EQU 56          ; 0X38
GLOBAL	GLCDCOLOUR
 GLCDCOLOUR                       EQU 57          ; 0X39
GLOBAL	GLCDCOLOUR_H
 GLCDCOLOUR_H                     EQU 58          ; 0X3A
GLOBAL	GLCDDATATEMP
 GLCDDATATEMP                     EQU 59          ; 0X3B
GLOBAL	GLCDFNTDEFAULT
 GLCDFNTDEFAULT                   EQU 60          ; 0X3C
GLOBAL	GLCDFNTDEFAULTHEIGHT
 GLCDFNTDEFAULTHEIGHT             EQU 61          ; 0X3D
GLOBAL	GLCDFNTDEFAULTSIZE
 GLCDFNTDEFAULTSIZE               EQU 62          ; 0X3E
GLOBAL	GLCDFONTWIDTH
 GLCDFONTWIDTH                    EQU 63          ; 0X3F
GLOBAL	GLCDFOREGROUND
 GLCDFOREGROUND                   EQU 64          ; 0X40
GLOBAL	GLCDFOREGROUND_H
 GLCDFOREGROUND_H                 EQU 65          ; 0X41
GLOBAL	GLCDHICHANGE
 GLCDHICHANGE                     EQU 66          ; 0X42
GLOBAL	GLCDLOCHANGE
 GLCDLOCHANGE                     EQU 67          ; 0X43
GLOBAL	GLCDPRINTLEN
 GLCDPRINTLEN                     EQU 68          ; 0X44
GLOBAL	GLCDPRINTLOC
 GLCDPRINTLOC                     EQU 69          ; 0X45
GLOBAL	GLCDPRINTLOC_H
 GLCDPRINTLOC_H                   EQU 70          ; 0X46
GLOBAL	GLCDPRINT_STRING_COUNTER
 GLCDPRINT_STRING_COUNTER         EQU 71          ; 0X47
GLOBAL	GLCDROTATEBITS
 GLCDROTATEBITS                   EQU 72          ; 0X48
GLOBAL	GLCDTEMP
 GLCDTEMP                         EQU 73          ; 0X49
GLOBAL	GLCDTEMP_H
 GLCDTEMP_H                       EQU 74          ; 0X4A
GLOBAL	GLCDX
 GLCDX                            EQU 75          ; 0X4B
GLOBAL	GLCDY
 GLCDY                            EQU 76          ; 0X4C
GLOBAL	GLCD_YORDINATE
 GLCD_YORDINATE                   EQU 77          ; 0X4D
GLOBAL	GLCD_YORDINATE_H
 GLCD_YORDINATE_H                 EQU 78          ; 0X4E
GLOBAL	HI2CACKPOLLSTATE
 HI2CACKPOLLSTATE                 EQU 79          ; 0X4F
GLOBAL	HI2CCURRENTMODE
 HI2CCURRENTMODE                  EQU 80          ; 0X50
GLOBAL	HI2CWAITMSSPTIMEOUT
 HI2CWAITMSSPTIMEOUT              EQU 81          ; 0X51
GLOBAL	I2CBYTE
 I2CBYTE                          EQU 82          ; 0X52
GLOBAL	LINECOLOUR
 LINECOLOUR                       EQU 83          ; 0X53
GLOBAL	LINECOLOUR_H
 LINECOLOUR_H                     EQU 84          ; 0X54
GLOBAL	LINEX1
 LINEX1                           EQU 85          ; 0X55
GLOBAL	LINEX1_H
 LINEX1_H                         EQU 86          ; 0X56
GLOBAL	LINEX2
 LINEX2                           EQU 87          ; 0X57
GLOBAL	LINEX2_H
 LINEX2_H                         EQU 88          ; 0X58
GLOBAL	LINEY1
 LINEY1                           EQU 89          ; 0X59
GLOBAL	LINEY1_H
 LINEY1_H                         EQU 90          ; 0X5A
GLOBAL	LINEY2
 LINEY2                           EQU 91          ; 0X5B
GLOBAL	LINEY2_H
 LINEY2_H                         EQU 92          ; 0X5C
GLOBAL	LOCX
 LOCX                             EQU 93          ; 0X5D
GLOBAL	LOCY
 LOCY                             EQU 94          ; 0X5E
GLOBAL	OLDX
 OLDX                             EQU 95          ; 0X5F
GLOBAL	OLDY
 OLDY                             EQU 96          ; 0X60
GLOBAL	POSCHARX
 POSCHARX                         EQU 97          ; 0X61
GLOBAL	POSCHARX_H
 POSCHARX_H                       EQU 98          ; 0X62
GLOBAL	POSCHARY
 POSCHARY                         EQU 99          ; 0X63
GLOBAL	PRINTLOCX
 PRINTLOCX                        EQU 100          ; 0X64
GLOBAL	PRINTLOCX_H
 PRINTLOCX_H                      EQU 101          ; 0X65
GLOBAL	PRINTLOCY
 PRINTLOCY                        EQU 102          ; 0X66
GLOBAL	PRINTLOCY_H
 PRINTLOCY_H                      EQU 103          ; 0X67
GLOBAL	RANDOM
 RANDOM                           EQU 104          ; 0X68
GLOBAL	RANDOMSEED
 RANDOMSEED                       EQU 105          ; 0X69
GLOBAL	RANDOMSEED_H
 RANDOMSEED_H                     EQU 106          ; 0X6A
GLOBAL	RANDOMTEMP
 RANDOMTEMP                       EQU 107          ; 0X6B
GLOBAL	RANDOMTEMP_H
 RANDOMTEMP_H                     EQU 108          ; 0X6C
GLOBAL	ROW
 ROW                              EQU 109          ; 0X6D
GLOBAL	SSD1306SENDBYTE
 SSD1306SENDBYTE                  EQU 110          ; 0X6E
GLOBAL	SSD1306_BUFFERALIAS
 SSD1306_BUFFERALIAS              EQU 9199          ; 0X23EF
GLOBAL	SSD1306_BUFFERLOCATIONCALC
 SSD1306_BUFFERLOCATIONCALC       EQU 160          ; 0XA0
GLOBAL	SSD1306_BUFFERLOCATIONCALC_H
 SSD1306_BUFFERLOCATIONCALC_H     EQU 161          ; 0XA1
GLOBAL	SSD1306_PAGE
 SSD1306_PAGE                     EQU 111          ; 0X6F
GLOBAL	STRINGPOINTER
 STRINGPOINTER                    EQU 162          ; 0XA2
GLOBAL	SWAP4
 SWAP4                            EQU 163          ; 0XA3
GLOBAL	SWAP4IN
 SWAP4IN                          EQU 164          ; 0XA4
GLOBAL	SYSBYTETEMPA
 SYSBYTETEMPA                     EQU 117          ; 0X75
GLOBAL	SYSBYTETEMPB
 SYSBYTETEMPB                     EQU 121          ; 0X79
GLOBAL	SYSBYTETEMPX
 SYSBYTETEMPX                     EQU 112          ; 0X70
GLOBAL	SYSDIVLOOP
 SYSDIVLOOP                       EQU 116          ; 0X74
GLOBAL	SYSFORLOOPABSVALUE8
 SYSFORLOOPABSVALUE8              EQU 165          ; 0XA5
GLOBAL	SYSFORLOOPABSVALUE8_H
 SYSFORLOOPABSVALUE8_H            EQU 166          ; 0XA6
GLOBAL	SYSFORLOOPSTEP7
 SYSFORLOOPSTEP7                  EQU 167          ; 0XA7
GLOBAL	SYSFORLOOPSTEP7_H
 SYSFORLOOPSTEP7_H                EQU 168          ; 0XA8
GLOBAL	SYSLCDPRINTDATAHANDLER
 SYSLCDPRINTDATAHANDLER           EQU 169          ; 0XA9
GLOBAL	SYSLCDPRINTDATAHANDLER_H
 SYSLCDPRINTDATAHANDLER_H         EQU 170          ; 0XAA
GLOBAL	SYSREPEATTEMP1
 SYSREPEATTEMP1                   EQU 171          ; 0XAB
GLOBAL	SYSREPEATTEMP10
 SYSREPEATTEMP10                  EQU 172          ; 0XAC
GLOBAL	SYSREPEATTEMP5
 SYSREPEATTEMP5                   EQU 173          ; 0XAD
GLOBAL	SYSREPEATTEMP8
 SYSREPEATTEMP8                   EQU 174          ; 0XAE
GLOBAL	SYSSTRINGA
 SYSSTRINGA                       EQU 119          ; 0X77
GLOBAL	SYSSTRINGA_H
 SYSSTRINGA_H                     EQU 120          ; 0X78
GLOBAL	SYSTEMP1
 SYSTEMP1                         EQU 175          ; 0XAF
GLOBAL	SYSTEMP1_H
 SYSTEMP1_H                       EQU 176          ; 0XB0
GLOBAL	SYSTEMP2
 SYSTEMP2                         EQU 177          ; 0XB1
GLOBAL	SYSTEMP2_H
 SYSTEMP2_H                       EQU 178          ; 0XB2
GLOBAL	SYSTEMP3
 SYSTEMP3                         EQU 179          ; 0XB3
GLOBAL	SYSWAITTEMPMS
 SYSWAITTEMPMS                    EQU 114          ; 0X72
GLOBAL	SYSWAITTEMPMS_H
 SYSWAITTEMPMS_H                  EQU 115          ; 0X73
GLOBAL	SYSWAITTEMPS
 SYSWAITTEMPS                     EQU 116          ; 0X74
GLOBAL	SYSWORDTEMPA
 SYSWORDTEMPA                     EQU 117          ; 0X75
GLOBAL	SYSWORDTEMPA_H
 SYSWORDTEMPA_H                   EQU 118          ; 0X76
GLOBAL	SYSWORDTEMPB
 SYSWORDTEMPB                     EQU 121          ; 0X79
GLOBAL	SYSWORDTEMPB_H
 SYSWORDTEMPB_H                   EQU 122          ; 0X7A

;********************************************************************************

;ALIAS VARIABLES
GLOBAL	AFSR0
 AFSR0                            EQU 4
GLOBAL	AFSR0_H
 AFSR0_H                          EQU 5

;********************************************************************************

 PSECT   PROGMEM0,delta=2, abs
 RESETVEC:
;VECTORS
	ORG	0
	PAGESEL	BASPROGRAMSTART
	GOTO	BASPROGRAMSTART
	ORG	4
	RETFIE

;********************************************************************************

;START OF PROGRAM MEMORY PAGE 0
	ORG	5
GLOBAL	BASPROGRAMSTART
BASPROGRAMSTART:
;CALL INITIALISATION ROUTINES
	CALL	INITSYS
	CALL	INITPPS
	CALL	HI2CINIT
	CALL	INITGLCD_SSD1306
	PAGESEL	$
	CALL	INITRANDOM

;START OF THE MAIN PROGRAM
;''
;''This demonstration program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.
;''
;''This program shows how to draw sprites on an SSD1306 I2C device.
;''Only support I2C and Full GLCD Mode - supported from v0.98 onwards
;''
;''The #define 'spritechoice' defines the sprite to be managed.
;''You can define your own in the sprite tables. Each table is 8 pixles vertical - col1 to col8 in each table.
;''
;''
;''************************************************************************
;''@author  EvanV
;''@licence GPL
;''@version 1.00
;''@date    31.11.2022
;----- Configuration
;Chip Settings.
;Template comment at the start of the config file
;
;Template comment at the end of the config file
;' -------------------PORTA----------------
;' Bit#:  -7---6---5---4---3---2---1---0---
;' IO:   -------------SDA-SW------SCL-ADC--
;'-----------------------------------------
;'
;' -------------------PORTB----------------
;' Bit#:  -7---6---5---4---3---2---1---0---
;' IO:    ---------------------------------
;'-----------------------------------------
;'
;' ------------------PORTC-----------------
;' Bit#:  -7---6---5---4---3---2---1---0---
;' IO:    ------------TX-LED--LED-LED LED--
;'-----------------------------------------
;Define constants to make things easier. We can reuse these at any time.
;Dir     RC0         Out
	BCF	TRISC,0
;Dir     RC1         Out
	BCF	TRISC,1
;Dir     RC2         Out
	BCF	TRISC,2
;Dir     RC3         Out
	BCF	TRISC,3
;Dir     POTENTIOMETER In
	BSF	TRISA,0
;Dir     SWITCHIN      In
	BSF	TRISA,3
;Define I2C settings
;Initialise I2C - note for the I2C module the ports need to be set to IN
;Dir HI2C_DATA In
	BSF	TRISA,4
;Dir HI2C_CLOCK In
	BSF	TRISA,1
;*****************************************************************************************************
;Main program commences here.. everything before this is setup for the board.
;These constants allow you to change the GLCD memory usage.
;*******************************************************************************************
;Select the sprite and the user delay
;2ms is the lower limit of user visual perception
;*******************************************************************************************
;Draw initial screen
;Box 0,0,127,63
	CLRF	LINEX1
	CLRF	LINEX1_H
	CLRF	LINEY1
	CLRF	LINEY1_H
	MOVLW	127
	MOVWF	LINEX2
	CLRF	LINEX2_H
	MOVLW	63
	MOVWF	LINEY2
	CLRF	LINEY2_H
	MOVF	GLCDFOREGROUND,W
	MOVWF	LINECOLOUR
	MOVF	GLCDFOREGROUND_H,W
	MOVWF	LINECOLOUR_H
	CALL	BOX
;GLCDPrint ( 2, 36, "Great Cow BASIC")
	MOVLW	2
	MOVWF	PRINTLOCX
	CLRF	PRINTLOCX_H
	MOVLW	36
	MOVWF	PRINTLOCY
	CLRF	PRINTLOCY_H
	MOVLW	LOW STRINGTABLE1
	BANKSEL	SYSLCDPRINTDATAHANDLER
	MOVWF	SYSLCDPRINTDATAHANDLER
	MOVLW	(HIGH STRINGTABLE1) | 128
	MOVWF	SYSLCDPRINTDATAHANDLER_H
	BANKSEL	STATUS
	FCALL	GLCDPRINT6
;GLCDPrint ( 2, 46, "GLCD Library 2022")
	MOVLW	2
	MOVWF	PRINTLOCX
	CLRF	PRINTLOCX_H
	MOVLW	46
	MOVWF	PRINTLOCY
	CLRF	PRINTLOCY_H
	MOVLW	LOW STRINGTABLE2
	BANKSEL	SYSLCDPRINTDATAHANDLER
	MOVWF	SYSLCDPRINTDATAHANDLER
	MOVLW	(HIGH STRINGTABLE2) | 128
	MOVWF	SYSLCDPRINTDATAHANDLER_H
	BANKSEL	STATUS
	FCALL	GLCDPRINT6
;GLCDPrint ( 2, 54, "Sprite Support")
	MOVLW	2
	MOVWF	PRINTLOCX
	CLRF	PRINTLOCX_H
	MOVLW	54
	MOVWF	PRINTLOCY
	CLRF	PRINTLOCY_H
	MOVLW	LOW STRINGTABLE3
	BANKSEL	SYSLCDPRINTDATAHANDLER
	MOVWF	SYSLCDPRINTDATAHANDLER
	MOVLW	(HIGH STRINGTABLE3) | 128
	MOVWF	SYSLCDPRINTDATAHANDLER_H
	BANKSEL	STATUS
	FCALL	GLCDPRINT6
;Wait 3 s
	MOVLW	3
	MOVWF	SYSWAITTEMPS
	FCALL	DELAY_S
;GLCDCLS
	CALL	GLCDCLS_SSD1306
;Box 0,0,127,63
	CLRF	LINEX1
	CLRF	LINEX1_H
	CLRF	LINEY1
	CLRF	LINEY1_H
	MOVLW	127
	MOVWF	LINEX2
	CLRF	LINEX2_H
	MOVLW	63
	MOVWF	LINEY2
	CLRF	LINEY2_H
	MOVF	GLCDFOREGROUND,W
	MOVWF	LINECOLOUR
	MOVF	GLCDFOREGROUND_H,W
	MOVWF	LINECOLOUR_H
	CALL	BOX
;dimension and initialise variables
;Dim oldx, oldy As Byte
;Dim curx, cury As Byte
;Dim dirx, diry As Byte
;curx = 63
	MOVLW	63
	MOVWF	CURX
;cury = 31
	MOVLW	31
	MOVWF	CURY
;oldx = curx
	MOVF	CURX,W
	MOVWF	OLDX
;oldy = cury
	MOVF	CURY,W
	MOVWF	OLDY
;Draw initial sprite
;GLCDDrawSprite_SSD1306 curx,cury, spritechoice, GLCDForeground
	MOVF	CURX,W
	MOVWF	GLCDX
	MOVF	CURY,W
	MOVWF	GLCDY
	MOVLW	2
	MOVWF	CHARCODE
	CALL	GLCDDRAWSPRITE_SSD1306
;Set initial direction
;If Random > 127 Then
	FCALL	FN_RANDOM
	MOVF	RANDOM,W
	SUBLW	127
	BTFSC	STATUS,0
	GOTO	ELSE1_1
;dirx=1
	MOVLW	1
	MOVWF	DIRX
;Else
	GOTO	ENDIF1
GLOBAL	ELSE1_1
ELSE1_1:
;dirx=255
	MOVLW	255
	MOVWF	DIRX
;End If
GLOBAL	ENDIF1
ENDIF1:
;If Random > 127 Then
	FCALL	FN_RANDOM
	MOVF	RANDOM,W
	SUBLW	127
	BTFSC	STATUS,0
	GOTO	ELSE2_1
;diry=1
	MOVLW	1
	MOVWF	DIRY
;Else
	GOTO	ENDIF2
GLOBAL	ELSE2_1
ELSE2_1:
;diry=255
	MOVLW	255
	MOVWF	DIRY
;End If
GLOBAL	ENDIF2
ENDIF2:
;Dir portc.0 Out
	BCF	TRISC,0
;Do
GLOBAL	SYSDOLOOP_S1
SYSDOLOOP_S1:
;handle bounce
;If  curx>0 AND curx<119  Then
	MOVF	CURX,W
	MOVWF	SYSBYTETEMPB
	CLRF	SYSBYTETEMPA
	FCALL	SYSCOMPLESSTHAN
	MOVF	SYSBYTETEMPX,W
	BANKSEL	SYSTEMP1
	MOVWF	SYSTEMP1
	BANKSEL	CURX
	MOVF	CURX,W
	MOVWF	SYSBYTETEMPA
	MOVLW	119
	MOVWF	SYSBYTETEMPB
	FCALL	SYSCOMPLESSTHAN
	BANKSEL	SYSTEMP1
	MOVF	SYSTEMP1,W
	ANDWF	SYSBYTETEMPX,W
	MOVWF	SYSTEMP2
	BTFSS	SYSTEMP2,0
	GOTO	ELSE3_1
;oldx = curx
	BANKSEL	CURX
	MOVF	CURX,W
	MOVWF	OLDX
;curx=curx+dirx
	MOVF	DIRX,W
	ADDWF	CURX,F
;Else
	GOTO	ENDIF3
GLOBAL	ELSE3_1
ELSE3_1:
;If dirx = 1 Then
	BANKSEL	DIRX
	DECF	DIRX,W
	BTFSS	STATUS,2
	GOTO	ELSE5_1
;dirx=255
	MOVLW	255
	MOVWF	DIRX
;Else
	GOTO	ENDIF5
GLOBAL	ELSE5_1
ELSE5_1:
;dirx=1
	MOVLW	1
	MOVWF	DIRX
;End If
GLOBAL	ENDIF5
ENDIF5:
;oldx = curx
	MOVF	CURX,W
	MOVWF	OLDX
;curx=curx+dirx
	MOVF	DIRX,W
	ADDWF	CURX,F
;End If
GLOBAL	ENDIF3
ENDIF3:
;If cury >1 AND cury<55 Then
	MOVF	CURY,W
	MOVWF	SYSBYTETEMPB
	MOVLW	1
	MOVWF	SYSBYTETEMPA
	FCALL	SYSCOMPLESSTHAN
	MOVF	SYSBYTETEMPX,W
	BANKSEL	SYSTEMP1
	MOVWF	SYSTEMP1
	BANKSEL	CURY
	MOVF	CURY,W
	MOVWF	SYSBYTETEMPA
	MOVLW	55
	MOVWF	SYSBYTETEMPB
	FCALL	SYSCOMPLESSTHAN
	BANKSEL	SYSTEMP1
	MOVF	SYSTEMP1,W
	ANDWF	SYSBYTETEMPX,W
	MOVWF	SYSTEMP2
	BTFSS	SYSTEMP2,0
	GOTO	ELSE4_1
;oldy = cury
	BANKSEL	CURY
	MOVF	CURY,W
	MOVWF	OLDY
;cury=cury+diry
	MOVF	DIRY,W
	ADDWF	CURY,F
;Else
	GOTO	ENDIF4
GLOBAL	ELSE4_1
ELSE4_1:
;If diry = 1 Then
	BANKSEL	DIRY
	DECF	DIRY,W
	BTFSS	STATUS,2
	GOTO	ELSE6_1
;diry=255
	MOVLW	255
	MOVWF	DIRY
;Else
	GOTO	ENDIF6
GLOBAL	ELSE6_1
ELSE6_1:
;diry=1
	MOVLW	1
	MOVWF	DIRY
;End If
GLOBAL	ENDIF6
ENDIF6:
;oldy = cury
	MOVF	CURY,W
	MOVWF	OLDY
;cury=cury+diry
	MOVF	DIRY,W
	ADDWF	CURY,F
;End If
GLOBAL	ENDIF4
ENDIF4:
;end of handle bounce
;draw sprite
;GLCDDrawSprite_SSD1306 oldx,oldy, spritechoice
	MOVF	OLDX,W
	MOVWF	GLCDX
	MOVF	OLDY,W
	MOVWF	GLCDY
	MOVLW	2
	MOVWF	CHARCODE
	CALL	GLCDDRAWSPRITE_SSD1306
;GLCDDrawSprite_SSD1306 curx,cury, spritechoice
	MOVF	CURX,W
	MOVWF	GLCDX
	MOVF	CURY,W
	MOVWF	GLCDY
	MOVLW	2
	MOVWF	CHARCODE
	CALL	GLCDDRAWSPRITE_SSD1306
;pulse output for scope
;RC1 = !RC1
	BANKSEL	SYSTEMP1
	CLRF	SYSTEMP1
	BANKSEL	PORTC
	BTFSS	PORTC,1
	GOTO	ENDIF7
	BANKSEL	SYSTEMP1
	INCF	SYSTEMP1,F
GLOBAL	ENDIF7
ENDIF7:
	BANKSEL	SYSTEMP1
	COMF	SYSTEMP1,F
	BANKSEL	LATC
	BCF	LATC,1
	BANKSEL	SYSTEMP1
	BTFSS	SYSTEMP1,0
	GOTO	ENDIF8
	BANKSEL	LATC
	BSF	LATC,1
GLOBAL	ENDIF8
ENDIF8:
;user delay
;so you can see it!
;Wait SPRITEDELAY
	MOVLW	10
	MOVWF	SYSWAITTEMPMS
	CLRF	SYSWAITTEMPMS_H
	BANKSEL	STATUS
	FCALL	DELAY_MS
;Loop
	GOTO	SYSDOLOOP_S1
GLOBAL	SYSDOLOOP_E1
SYSDOLOOP_E1:
;End
	GOTO	BASPROGRAMEND
;sprite shape data
;sprite shape data
;sprite shape data
;sprite shape data
;sprite shape data
;sprite shape data
;sprite shape data
;sprite shape data
;asm showdebug  GGLCD SSD1306 buffer is 1024bytes
GLOBAL	BASPROGRAMEND
BASPROGRAMEND:
	SLEEP
	GOTO	BASPROGRAMEND

;********************************************************************************

;SOURCE: GLCD.H (1489)
GLOBAL	BOX
BOX:
;dim GLCDTemp as word
;Make sure that starting point (1) is always less than end point (2)
;If LineX1 > LineX2 Then
	MOVF	LINEX1,W
	MOVWF	SYSWORDTEMPB
	MOVF	LINEX1_H,W
	MOVWF	SYSWORDTEMPB_H
	MOVF	LINEX2,W
	MOVWF	SYSWORDTEMPA
	MOVF	LINEX2_H,W
	MOVWF	SYSWORDTEMPA_H
	FCALL	SYSCOMPLESSTHAN16
	BTFSS	SYSBYTETEMPX,0
	GOTO	ENDIF15
;GLCDTemp = LineX1
	MOVF	LINEX1,W
	MOVWF	GLCDTEMP
	MOVF	LINEX1_H,W
	MOVWF	GLCDTEMP_H
;LineX1 = LineX2
	MOVF	LINEX2,W
	MOVWF	LINEX1
	MOVF	LINEX2_H,W
	MOVWF	LINEX1_H
;LineX2 = GLCDTemp
	MOVF	GLCDTEMP,W
	MOVWF	LINEX2
	MOVF	GLCDTEMP_H,W
	MOVWF	LINEX2_H
;End If
GLOBAL	ENDIF15
ENDIF15:
;If LineY1 > LineY2 Then
	MOVF	LINEY1,W
	MOVWF	SYSWORDTEMPB
	MOVF	LINEY1_H,W
	MOVWF	SYSWORDTEMPB_H
	MOVF	LINEY2,W
	MOVWF	SYSWORDTEMPA
	MOVF	LINEY2_H,W
	MOVWF	SYSWORDTEMPA_H
	FCALL	SYSCOMPLESSTHAN16
	BTFSS	SYSBYTETEMPX,0
	GOTO	ENDIF16
;GLCDTemp = LineY1
	MOVF	LINEY1,W
	MOVWF	GLCDTEMP
	MOVF	LINEY1_H,W
	MOVWF	GLCDTEMP_H
;LineY1 = LineY2
	MOVF	LINEY2,W
	MOVWF	LINEY1
	MOVF	LINEY2_H,W
	MOVWF	LINEY1_H
;LineY2 = GLCDTemp
	MOVF	GLCDTEMP,W
	MOVWF	LINEY2
	MOVF	GLCDTEMP_H,W
	MOVWF	LINEY2_H
;End If
GLOBAL	ENDIF16
ENDIF16:
;dim DrawLine as word
;Draw lines going across
;For DrawLine = LineX1 To LineX2
	MOVF	LINEX1,W
	MOVWF	DRAWLINE
	MOVF	LINEX1_H,W
	MOVWF	DRAWLINE_H
GLOBAL	SYSFORLOOP5
SYSFORLOOP5:
;PSet DrawLine, LineY1, LineColour
	MOVF	DRAWLINE,W
	MOVWF	GLCDX
	MOVF	LINEY1,W
	MOVWF	GLCDY
	MOVF	LINECOLOUR,W
	MOVWF	GLCDCOLOUR
	MOVF	LINECOLOUR_H,W
	MOVWF	GLCDCOLOUR_H
	CALL	PSET_SSD1306
;PSet DrawLine, LineY2, LineColour
	MOVF	DRAWLINE,W
	MOVWF	GLCDX
	MOVF	LINEY2,W
	MOVWF	GLCDY
	MOVF	LINECOLOUR,W
	MOVWF	GLCDCOLOUR
	MOVF	LINECOLOUR_H,W
	MOVWF	GLCDCOLOUR_H
	CALL	PSET_SSD1306
;Next
;POSITIVE VALUE STEP HANDLER IN FOR-NEXT STATEMENT :#4P 
	MOVF	DRAWLINE,W
	SUBWF	LINEX2,W
	BANKSEL	SYSTEMP1
	MOVWF	SYSTEMP1
	BANKSEL	DRAWLINE_H
	MOVF	DRAWLINE_H,W
	SUBWFB	LINEX2_H,W
	BANKSEL	SYSTEMP1_H
	MOVWF	SYSTEMP1_H
	MOVF	SYSTEMP1,W
	MOVWF	SYSWORDTEMPA
	MOVF	SYSTEMP1_H,W
	MOVWF	SYSWORDTEMPA_H
	CLRF	SYSWORDTEMPB
	CLRF	SYSWORDTEMPB_H
	BANKSEL	STATUS
	FCALL	SYSCOMPEQUAL16
	COMF	SYSBYTETEMPX,F
	BTFSS	SYSBYTETEMPX,0
	GOTO	ENDIF17
;SET LOOPVAR TO LOOPVAR + STEPVALUE WHERE STEPVALUE IS A POSITIVE VALUE
	INCF	DRAWLINE,F
	BTFSC	STATUS,2
	INCF	DRAWLINE_H,F
	GOTO	SYSFORLOOP5
;END IF
GLOBAL	ENDIF17
ENDIF17:
GLOBAL	SYSFORLOOPEND5
SYSFORLOOPEND5:
;Draw lines going down
;For DrawLine = LineY1 To LineY2
	MOVF	LINEY1,W
	MOVWF	DRAWLINE
	MOVF	LINEY1_H,W
	MOVWF	DRAWLINE_H
GLOBAL	SYSFORLOOP6
SYSFORLOOP6:
;PSet LineX1, DrawLine, LineColour
	MOVF	LINEX1,W
	MOVWF	GLCDX
	MOVF	DRAWLINE,W
	MOVWF	GLCDY
	MOVF	LINECOLOUR,W
	MOVWF	GLCDCOLOUR
	MOVF	LINECOLOUR_H,W
	MOVWF	GLCDCOLOUR_H
	CALL	PSET_SSD1306
;PSet LineX2, DrawLine, LineColour
	MOVF	LINEX2,W
	MOVWF	GLCDX
	MOVF	DRAWLINE,W
	MOVWF	GLCDY
	MOVF	LINECOLOUR,W
	MOVWF	GLCDCOLOUR
	MOVF	LINECOLOUR_H,W
	MOVWF	GLCDCOLOUR_H
	CALL	PSET_SSD1306
;Next
;POSITIVE VALUE STEP HANDLER IN FOR-NEXT STATEMENT :#4P 
	MOVF	DRAWLINE,W
	SUBWF	LINEY2,W
	BANKSEL	SYSTEMP1
	MOVWF	SYSTEMP1
	BANKSEL	DRAWLINE_H
	MOVF	DRAWLINE_H,W
	SUBWFB	LINEY2_H,W
	BANKSEL	SYSTEMP1_H
	MOVWF	SYSTEMP1_H
	MOVF	SYSTEMP1,W
	MOVWF	SYSWORDTEMPA
	MOVF	SYSTEMP1_H,W
	MOVWF	SYSWORDTEMPA_H
	CLRF	SYSWORDTEMPB
	CLRF	SYSWORDTEMPB_H
	BANKSEL	STATUS
	FCALL	SYSCOMPEQUAL16
	COMF	SYSBYTETEMPX,F
	BTFSS	SYSBYTETEMPX,0
	GOTO	ENDIF18
;SET LOOPVAR TO LOOPVAR + STEPVALUE WHERE STEPVALUE IS A POSITIVE VALUE
	INCF	DRAWLINE,F
	BTFSC	STATUS,2
	INCF	DRAWLINE_H,F
	GOTO	SYSFORLOOP6
;END IF
GLOBAL	ENDIF18
ENDIF18:
GLOBAL	SYSFORLOOPEND6
SYSFORLOOPEND6:
	RETURN

;********************************************************************************

GLOBAL	GLCDCHARCOL3
GLCDCHARCOL3:
	MOVLW	113
	SUBWF	SYSSTRINGA, W
	BTFSC	STATUS,0
	RETLW	0
	MOVF	SYSSTRINGA, W
	ADDLW	LOW TABLEGLCDCHARCOL3
	MOVWF	SYSSTRINGA
	MOVLW	(HIGH TABLEGLCDCHARCOL3) & 127
	BTFSC	STATUS,0
	ADDLW	1
	MOVWF	PCLATH
	MOVF	SYSSTRINGA, W
	MOVWF	PCL
GLOBAL	TABLEGLCDCHARCOL3
TABLEGLCDCHARCOL3:
	RETLW	112
	RETLW	0
	RETLW	16
	RETLW	12
	RETLW	10
	RETLW	136
	RETLW	34
	RETLW	56
	RETLW	32
	RETLW	8
	RETLW	32
	RETLW	16
	RETLW	16
	RETLW	128
	RETLW	128
	RETLW	64
	RETLW	4
	RETLW	0
	RETLW	0
	RETLW	0
	RETLW	40
	RETLW	72
	RETLW	70
	RETLW	108
	RETLW	0
	RETLW	0
	RETLW	0
	RETLW	40
	RETLW	16
	RETLW	0
	RETLW	16
	RETLW	0
	RETLW	64
	RETLW	124
	RETLW	0
	RETLW	132
	RETLW	130
	RETLW	48
	RETLW	78
	RETLW	120
	RETLW	6
	RETLW	108
	RETLW	12
	RETLW	0
	RETLW	0
	RETLW	16
	RETLW	40
	RETLW	0
	RETLW	4
	RETLW	100
	RETLW	248
	RETLW	254
	RETLW	124
	RETLW	254
	RETLW	254
	RETLW	254
	RETLW	124
	RETLW	254
	RETLW	0
	RETLW	64
	RETLW	254
	RETLW	254
	RETLW	254
	RETLW	254
	RETLW	124
	RETLW	254
	RETLW	124
	RETLW	254
	RETLW	76
	RETLW	2
	RETLW	126
	RETLW	62
	RETLW	126
	RETLW	198
	RETLW	14
	RETLW	194
	RETLW	0
	RETLW	4
	RETLW	0
	RETLW	8
	RETLW	128
	RETLW	0
	RETLW	64
	RETLW	254
	RETLW	112
	RETLW	112
	RETLW	112
	RETLW	16
	RETLW	16
	RETLW	254
	RETLW	0
	RETLW	64
	RETLW	254
	RETLW	0
	RETLW	248
	RETLW	248
	RETLW	112
	RETLW	248
	RETLW	16
	RETLW	248
	RETLW	144
	RETLW	16
	RETLW	120
	RETLW	56
	RETLW	120
	RETLW	136
	RETLW	24
	RETLW	136
	RETLW	0
	RETLW	0
	RETLW	0
	RETLW	32
	RETLW	120

;********************************************************************************

;SOURCE: GLCD_SSD1306.H (427)
GLOBAL	GLCDCLS_SSD1306
GLCDCLS_SSD1306:
;initialise global variable. Required variable for Circle in all DEVICE DRIVERS- DO NOT DELETE
;GLCD_yordinate = 0
	CLRF	GLCD_YORDINATE
	CLRF	GLCD_YORDINATE_H
;For SSD1306_BufferLocationCalc = 1 to GLCD_HEIGHT * GLCD_WIDTH / 8
	MOVLW	1
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	MOVWF	SSD1306_BUFFERLOCATIONCALC
	CLRF	SSD1306_BUFFERLOCATIONCALC_H
GLOBAL	SYSFORLOOP7
SYSFORLOOP7:
;SSD1306_BufferAlias(SSD1306_BufferLocationCalc) = 0
	MOVLW	LOW(SSD1306_BUFFERALIAS)
	ADDWF	SSD1306_BUFFERLOCATIONCALC,W
	MOVWF	FSR0L
	MOVLW	HIGH(SSD1306_BUFFERALIAS)
	ADDWFC	SSD1306_BUFFERLOCATIONCALC_H,W
	MOVWF	FSR0H
	CLRF	INDF0
;Next
;POSITIVE VALUE STEP HANDLER IN FOR-NEXT STATEMENT :#4P 
	MOVF	SSD1306_BUFFERLOCATIONCALC,W
	SUBLW	0
	MOVWF	SYSTEMP1
	MOVLW	4
	MOVWF	SYSTEMP2
	MOVF	SSD1306_BUFFERLOCATIONCALC_H,W
	SUBWFB	SYSTEMP2,W
	MOVWF	SYSTEMP1_H
	MOVF	SYSTEMP1,W
	MOVWF	SYSWORDTEMPA
	MOVF	SYSTEMP1_H,W
	MOVWF	SYSWORDTEMPA_H
	CLRF	SYSWORDTEMPB
	CLRF	SYSWORDTEMPB_H
	BANKSEL	STATUS
	FCALL	SYSCOMPEQUAL16
	COMF	SYSBYTETEMPX,F
	BTFSS	SYSBYTETEMPX,0
	GOTO	ENDIF19
;SET LOOPVAR TO LOOPVAR + STEPVALUE WHERE STEPVALUE IS A POSITIVE VALUE
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	INCF	SSD1306_BUFFERLOCATIONCALC,F
	BTFSC	STATUS,2
	INCF	SSD1306_BUFFERLOCATIONCALC_H,F
	GOTO	SYSFORLOOP7
;END IF
GLOBAL	ENDIF19
ENDIF19:
GLOBAL	SYSFORLOOPEND7
SYSFORLOOPEND7:
;1.14 changed to transaction
;For SSD1306_BufferLocationCalc = 0 to GLCD_HEIGHT-1 step 8
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	CLRF	SSD1306_BUFFERLOCATIONCALC
	CLRF	SSD1306_BUFFERLOCATIONCALC_H
GLOBAL	SYSFORLOOP8
SYSFORLOOP8:
;INIT SYSFORLOOPSTEP7 :#0
	MOVLW	8
	MOVWF	SYSFORLOOPSTEP7
	CLRF	SYSFORLOOPSTEP7_H
;Cursor_Position_SSD1306 ( 0 , SSD1306_BufferLocationCalc )
	BANKSEL	LOCX
	CLRF	LOCX
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	MOVF	SSD1306_BUFFERLOCATIONCALC,W
	BANKSEL	LOCY
	MOVWF	LOCY
	FCALL	CURSOR_POSITION_SSD1306
;Open_Transaction_SSD1306
;Macro Source: glcd_ssd1306.h (1218)
;4wire not supported, see Write_Transaction_Data_SSD1306
;HI2CStart
	FCALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x40
	MOVLW	64
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;For GLCDTemp = 0 to 127
;LEGACY METHOD
	MOVLW	255
	MOVWF	GLCDTEMP
GLOBAL	SYSFORLOOP9
SYSFORLOOP9:
	INCF	GLCDTEMP,F
;Write_Transaction_Data_SSD1306(GLCDBackground)
;Macro Source: glcd_ssd1306.h (1249)
;HI2CSend SSD1306SendByte
	MOVF	GLCDBACKGROUND,W
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;Next
	MOVLW	127
	SUBWF	GLCDTEMP,W
	BTFSS	STATUS,0
	GOTO	SYSFORLOOP9
GLOBAL	SYSFORLOOPEND9
SYSFORLOOPEND9:
;Close_Transaction_SSD1306
;Macro Source: glcd_ssd1306.h (1282)
;4wire not supported, see Write_Transaction_Data_SSD1306
;HI2CStop
	FCALL	HI2CSTOP
;Next
;INTEGER NEGATIVE STEP HANDLER IN FOR-NEXT STATEMENT
	BANKSEL	SYSFORLOOPSTEP7_H
	BTFSS	SYSFORLOOPSTEP7_H,7
	GOTO	ELSE21_1
;SET SYSFORLOOPABSVALUE TO -STEPVALUE :#1 
	COMF	SYSFORLOOPSTEP7,W
	MOVWF	SYSFORLOOPABSVALUE8
	COMF	SYSFORLOOPSTEP7_H,W
	MOVWF	SYSFORLOOPABSVALUE8_H
	INCF	SYSFORLOOPABSVALUE8,F
	BTFSC	STATUS,2
	INCF	SYSFORLOOPABSVALUE8_H,F
;IF ( SSD1306_BUFFERLOCATIONCALC - 64-1) } [WORD]SYSFORLOOPABSVALUE8 THEN  :#1N 
	MOVLW	64
	SUBWF	SSD1306_BUFFERLOCATIONCALC,W
	MOVWF	SYSTEMP1
	MOVLW	0
	SUBWFB	SSD1306_BUFFERLOCATIONCALC_H,W
	MOVWF	SYSTEMP1_H
	MOVLW	1
	SUBWF	SYSTEMP1,W
	MOVWF	SYSTEMP2
	MOVLW	0
	SUBWFB	SYSTEMP1_H,W
	MOVWF	SYSTEMP2_H
	MOVF	SYSTEMP2,W
	MOVWF	SYSWORDTEMPA
	MOVF	SYSTEMP2_H,W
	MOVWF	SYSWORDTEMPA_H
	MOVF	SYSFORLOOPABSVALUE8,W
	MOVWF	SYSWORDTEMPB
	MOVF	SYSFORLOOPABSVALUE8_H,W
	MOVWF	SYSWORDTEMPB_H
	BANKSEL	STATUS
	FCALL	SYSCOMPLESSTHAN16
	COMF	SYSBYTETEMPX,F
	BTFSS	SYSBYTETEMPX,0
	GOTO	ENDIF22
;SET LOOPVAR TO LOOPVAR + STEPVALUE WHERE STEPVALUE IS A NEGATIVE VALUE
	BANKSEL	SYSFORLOOPSTEP7
	MOVF	SYSFORLOOPSTEP7,W
	ADDWF	SSD1306_BUFFERLOCATIONCALC,F
	MOVF	SYSFORLOOPSTEP7_H,W
	ADDWFC	SSD1306_BUFFERLOCATIONCALC_H,F
	GOTO	SYSFORLOOP8
;END IF
GLOBAL	ENDIF22
ENDIF22:
	GOTO	ENDIF21
GLOBAL	ELSE21_1
ELSE21_1:
;INTEGER POSITIVE STEP HANDLER IN FOR-NEXT STATEMENT
;IF ([WORD]64-1 - [WORD]SSD1306_BUFFERLOCATIONCALC) } [WORD]SYSFORLOOPSTEP7 THEN :#1P 
	MOVF	SSD1306_BUFFERLOCATIONCALC,W
	SUBLW	63
	MOVWF	SYSTEMP1
	CLRF	SYSTEMP3
	MOVF	SSD1306_BUFFERLOCATIONCALC_H,W
	SUBWFB	SYSTEMP3,W
	MOVWF	SYSTEMP1_H
	MOVF	SYSTEMP1,W
	MOVWF	SYSWORDTEMPA
	MOVF	SYSTEMP1_H,W
	MOVWF	SYSWORDTEMPA_H
	MOVF	SYSFORLOOPSTEP7,W
	MOVWF	SYSWORDTEMPB
	MOVF	SYSFORLOOPSTEP7_H,W
	MOVWF	SYSWORDTEMPB_H
	BANKSEL	STATUS
	FCALL	SYSCOMPLESSTHAN16
	COMF	SYSBYTETEMPX,F
	BTFSS	SYSBYTETEMPX,0
	GOTO	ENDIF23
;SET LOOPVAR TO LOOPVAR + STEPVALUE WHERE STEPVALUE IS A POSITIVE VALUE
	BANKSEL	SYSFORLOOPSTEP7
	MOVF	SYSFORLOOPSTEP7,W
	ADDWF	SSD1306_BUFFERLOCATIONCALC,F
	MOVF	SYSFORLOOPSTEP7_H,W
	ADDWFC	SSD1306_BUFFERLOCATIONCALC_H,F
	GOTO	SYSFORLOOP8
;END IF
GLOBAL	ENDIF23
ENDIF23:
;END IF
GLOBAL	ENDIF21
ENDIF21:
GLOBAL	SYSFORLOOPEND8
SYSFORLOOPEND8:
;Removed at 1.14. Retained for documentation only
;Cursor_Position_SSD1306 ( 0 , 0 )
;for SSD1306_BufferLocationCalc = 0 to GLCD_HEIGHT-1 step 8
;for GLCDTemp = 0 to 127
;Write_Data_SSD1306(GLCDBackground)
;Next
;next
;Cursor_Position_SSD1306 ( 0 , 0 )
	CLRF	LOCX
	CLRF	LOCY
	FCALL	CURSOR_POSITION_SSD1306
;PrintLocX =0
	CLRF	PRINTLOCX
;PrintLocY =0
	CLRF	PRINTLOCY
	RETURN

;********************************************************************************

;SOURCE: GLCD_SSD1306.H (475)
GLOBAL	GLCDDRAWCHAR_SSD1306
GLCDDRAWCHAR_SSD1306:
;This is now in four parts
;1. Handler for GLCD LM mode
;2. Preamble
;3. GCB Font set handler
;4. OLED Font set handler
;***** Handler for GLCD LM mode
;****** Preamble
;invert colors if required
;if LineColour <> GLCDForeground  then
	MOVF	LINECOLOUR,W
	MOVWF	SYSWORDTEMPA
	MOVF	LINECOLOUR_H,W
	MOVWF	SYSWORDTEMPA_H
	MOVF	GLCDFOREGROUND,W
	MOVWF	SYSWORDTEMPB
	MOVF	GLCDFOREGROUND_H,W
	MOVWF	SYSWORDTEMPB_H
	FCALL	SYSCOMPEQUAL16
	COMF	SYSBYTETEMPX,F
	BTFSS	SYSBYTETEMPX,0
	GOTO	ENDIF24
;Inverted Colours
;GLCDBackground = 1
	MOVLW	1
	MOVWF	GLCDBACKGROUND
	CLRF	GLCDBACKGROUND_H
;GLCDForeground = 0
	CLRF	GLCDFOREGROUND
	CLRF	GLCDFOREGROUND_H
;end if
GLOBAL	ENDIF24
ENDIF24:
;dim CharCol, CharRow as word
;CharCode -= 15
	MOVLW	15
	SUBWF	CHARCODE,F
;CharCol=0
	CLRF	CHARCOL
	CLRF	CHARCOL_H
;Cursor_Position_SSD1306 ( CharLocX , CharLocY )
	MOVF	CHARLOCX,W
	MOVWF	LOCX
	MOVF	CHARLOCY,W
	MOVWF	LOCY
	FCALL	CURSOR_POSITION_SSD1306
;1.14 Added transaction
;****** GCB Font set handler
;if CharCode>=178 and CharCode<=202 then
	MOVF	CHARCODE,W
	MOVWF	SYSBYTETEMPA
	MOVLW	178
	MOVWF	SYSBYTETEMPB
	FCALL	SYSCOMPLESSTHAN
	COMF	SYSBYTETEMPX,F
	MOVF	SYSBYTETEMPX,W
	BANKSEL	SYSTEMP3
	MOVWF	SYSTEMP3
	BANKSEL	CHARCODE
	MOVF	CHARCODE,W
	MOVWF	SYSBYTETEMPB
	MOVLW	202
	MOVWF	SYSBYTETEMPA
	FCALL	SYSCOMPLESSTHAN
	COMF	SYSBYTETEMPX,F
	BANKSEL	SYSTEMP3
	MOVF	SYSTEMP3,W
	ANDWF	SYSBYTETEMPX,W
	MOVWF	SYSTEMP1
	BTFSS	SYSTEMP1,0
	GOTO	ENDIF25
;CharLocY=CharLocY-1
	MOVLW	1
	BANKSEL	CHARLOCY
	SUBWF	CHARLOCY,F
	MOVLW	0
	SUBWFB	CHARLOCY_H,F
;end if
GLOBAL	ENDIF25
ENDIF25:
;For CurrCharCol = 1 to 5
;LEGACY METHOD
	BANKSEL	CURRCHARCOL
	CLRF	CURRCHARCOL
GLOBAL	SYSFORLOOP10
SYSFORLOOP10:
	INCF	CURRCHARCOL,F
;Select Case CurrCharCol
;Case 1: ReadTable GLCDCharCol3, CharCode, CurrCharVal
GLOBAL	SYSSELECT4CASE1
SYSSELECT4CASE1:
	DECF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT4CASE2
;Case 1: ReadTable GLCDCharCol3, CharCode, CurrCharVal
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	CALL	GLCDCHARCOL3
	MOVWF	CURRCHARVAL
;Case 2: ReadTable GLCDCharCol4, CharCode, CurrCharVal
	GOTO	SYSSELECTEND4
GLOBAL	SYSSELECT4CASE2
SYSSELECT4CASE2:
	MOVLW	2
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT4CASE3
;Case 2: ReadTable GLCDCharCol4, CharCode, CurrCharVal
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	GLCDCHARCOL4
	MOVWF	CURRCHARVAL
;Case 3: ReadTable GLCDCharCol5, CharCode, CurrCharVal
	GOTO	SYSSELECTEND4
GLOBAL	SYSSELECT4CASE3
SYSSELECT4CASE3:
	MOVLW	3
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT4CASE4
;Case 3: ReadTable GLCDCharCol5, CharCode, CurrCharVal
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	GLCDCHARCOL5
	MOVWF	CURRCHARVAL
;Case 4: ReadTable GLCDCharCol6, CharCode, CurrCharVal
	GOTO	SYSSELECTEND4
GLOBAL	SYSSELECT4CASE4
SYSSELECT4CASE4:
	MOVLW	4
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT4CASE5
;Case 4: ReadTable GLCDCharCol6, CharCode, CurrCharVal
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	GLCDCHARCOL6
	MOVWF	CURRCHARVAL
;Case 5: ReadTable GLCDCharCol7, CharCode, CurrCharVal
	GOTO	SYSSELECTEND4
GLOBAL	SYSSELECT4CASE5
SYSSELECT4CASE5:
	MOVLW	5
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECTEND4
;Case 5: ReadTable GLCDCharCol7, CharCode, CurrCharVal
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	GLCDCHARCOL7
	MOVWF	CURRCHARVAL
;End Select
GLOBAL	SYSSELECTEND4
SYSSELECTEND4:
;Full Memory GLCD mode
;CharRow=0
	CLRF	CHARROW
	CLRF	CHARROW_H
;For CurrCharRow = 1 to 8
;LEGACY METHOD
	CLRF	CURRCHARROW
GLOBAL	SYSFORLOOP11
SYSFORLOOP11:
	INCF	CURRCHARROW,F
;CharColS=0
	CLRF	CHARCOLS
;For Col=1 to GLCDfntDefaultsize
	MOVLW	1
	MOVWF	COL
GLOBAL	SYSFORLOOP12
SYSFORLOOP12:
;CharRowS=0
	CLRF	CHARROWS
;For Row=1 to GLCDfntDefaultsize
	MOVLW	1
	MOVWF	ROW
GLOBAL	SYSFORLOOP13
SYSFORLOOP13:
;if CurrCharVal.0=1 then
	BTFSS	CURRCHARVAL,0
	GOTO	ELSE26_1
;PSet [word]CharLocX + CharCol + CharColS, [word]CharLocY + CharRow + CharRowS, LineColour
	MOVF	CHARCOL,W
	ADDWF	CHARLOCX,W
	BANKSEL	SYSTEMP3
	MOVWF	SYSTEMP3
	BANKSEL	CHARCOLS
	MOVF	CHARCOLS,W
	BANKSEL	SYSTEMP3
	ADDWF	SYSTEMP3,W
	BANKSEL	GLCDX
	MOVWF	GLCDX
	MOVF	CHARROW,W
	ADDWF	CHARLOCY,W
	BANKSEL	SYSTEMP3
	MOVWF	SYSTEMP3
	BANKSEL	CHARROWS
	MOVF	CHARROWS,W
	BANKSEL	SYSTEMP3
	ADDWF	SYSTEMP3,W
	BANKSEL	GLCDY
	MOVWF	GLCDY
	MOVF	LINECOLOUR,W
	MOVWF	GLCDCOLOUR
	MOVF	LINECOLOUR_H,W
	MOVWF	GLCDCOLOUR_H
	CALL	PSET_SSD1306
;Else
	GOTO	ENDIF26
GLOBAL	ELSE26_1
ELSE26_1:
;PSet [word]CharLocX + CharCol + CharColS, [word]CharLocY + CharRow + CharRowS, GLCDBackground
	MOVF	CHARCOL,W
	ADDWF	CHARLOCX,W
	BANKSEL	SYSTEMP3
	MOVWF	SYSTEMP3
	BANKSEL	CHARCOLS
	MOVF	CHARCOLS,W
	BANKSEL	SYSTEMP3
	ADDWF	SYSTEMP3,W
	BANKSEL	GLCDX
	MOVWF	GLCDX
	MOVF	CHARROW,W
	ADDWF	CHARLOCY,W
	BANKSEL	SYSTEMP3
	MOVWF	SYSTEMP3
	BANKSEL	CHARROWS
	MOVF	CHARROWS,W
	BANKSEL	SYSTEMP3
	ADDWF	SYSTEMP3,W
	BANKSEL	GLCDY
	MOVWF	GLCDY
	MOVF	GLCDBACKGROUND,W
	MOVWF	GLCDCOLOUR
	MOVF	GLCDBACKGROUND_H,W
	MOVWF	GLCDCOLOUR_H
	CALL	PSET_SSD1306
;End if
GLOBAL	ENDIF26
ENDIF26:
;Put out a white intercharacter pixel/space
;PSet [word]CharLocX + ( GLCDFontWidth * GLCDfntDefaultsize) , [word]CharLocY + CharRow + CharRowS , GLCDBackground
	MOVF	GLCDFONTWIDTH,W
	MOVWF	SYSBYTETEMPA
	MOVF	GLCDFNTDEFAULTSIZE,W
	MOVWF	SYSBYTETEMPB
	FCALL	SYSMULTSUB
	MOVF	SYSBYTETEMPX,W
	BANKSEL	SYSTEMP3
	MOVWF	SYSTEMP3
	BANKSEL	CHARLOCX
	ADDWF	CHARLOCX,W
	MOVWF	GLCDX
	MOVF	CHARROW,W
	ADDWF	CHARLOCY,W
	BANKSEL	SYSTEMP3
	MOVWF	SYSTEMP3
	BANKSEL	CHARROWS
	MOVF	CHARROWS,W
	BANKSEL	SYSTEMP3
	ADDWF	SYSTEMP3,W
	BANKSEL	GLCDY
	MOVWF	GLCDY
	MOVF	GLCDBACKGROUND,W
	MOVWF	GLCDCOLOUR
	MOVF	GLCDBACKGROUND_H,W
	MOVWF	GLCDCOLOUR_H
	CALL	PSET_SSD1306
;CharRowS +=1
	INCF	CHARROWS,F
;Next Row
;POSITIVE VALUE STEP HANDLER IN FOR-NEXT STATEMENT :#4P 
	MOVF	ROW,W
	SUBWF	GLCDFNTDEFAULTSIZE,W
	BANKSEL	SYSTEMP3
	MOVWF	SYSTEMP3
	MOVWF	SYSBYTETEMPA
	CLRF	SYSBYTETEMPB
	BANKSEL	STATUS
	FCALL	SYSCOMPEQUAL
	COMF	SYSBYTETEMPX,F
	BTFSS	SYSBYTETEMPX,0
	GOTO	ENDIF27
;SET LOOPVAR TO LOOPVAR + STEPVALUE WHERE STEPVALUE IS A POSITIVE VALUE
	INCF	ROW,F
	GOTO	SYSFORLOOP13
;END IF
GLOBAL	ENDIF27
ENDIF27:
GLOBAL	SYSFORLOOPEND13
SYSFORLOOPEND13:
;CharColS +=1
	INCF	CHARCOLS,F
;Next Col
;POSITIVE VALUE STEP HANDLER IN FOR-NEXT STATEMENT :#4P 
	MOVF	COL,W
	SUBWF	GLCDFNTDEFAULTSIZE,W
	BANKSEL	SYSTEMP3
	MOVWF	SYSTEMP3
	MOVWF	SYSBYTETEMPA
	CLRF	SYSBYTETEMPB
	BANKSEL	STATUS
	FCALL	SYSCOMPEQUAL
	COMF	SYSBYTETEMPX,F
	BTFSS	SYSBYTETEMPX,0
	GOTO	ENDIF28
;SET LOOPVAR TO LOOPVAR + STEPVALUE WHERE STEPVALUE IS A POSITIVE VALUE
	INCF	COL,F
	GOTO	SYSFORLOOP12
;END IF
GLOBAL	ENDIF28
ENDIF28:
GLOBAL	SYSFORLOOPEND12
SYSFORLOOPEND12:
;Rotate CurrCharVal Right
	RRF	CURRCHARVAL,F
;CharRow +=GLCDfntDefaultsize
	MOVF	GLCDFNTDEFAULTSIZE,W
	ADDWF	CHARROW,F
	MOVLW	0
	ADDWFC	CHARROW_H,F
;Next
	MOVLW	8
	SUBWF	CURRCHARROW,W
	BTFSS	STATUS,0
	GOTO	SYSFORLOOP11
GLOBAL	SYSFORLOOPEND11
SYSFORLOOPEND11:
;CharCol +=GLCDfntDefaultsize
	MOVF	GLCDFNTDEFAULTSIZE,W
	ADDWF	CHARCOL,F
	MOVLW	0
	ADDWFC	CHARCOL_H,F
;1.14 Low Memory GLCD mode
;1.12 Character GLCD mode
;Handles specific draw sequence. This caters for write only of a bit value. No read operation.
;Next
	MOVLW	5
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,0
	GOTO	SYSFORLOOP10
GLOBAL	SYSFORLOOPEND10
SYSFORLOOPEND10:
;****** OLED Font set handler
;1.14 Added transaction
;Restore
;GLCDBackground = 0
	CLRF	GLCDBACKGROUND
	CLRF	GLCDBACKGROUND_H
;GLCDForeground = 1
	MOVLW	1
	MOVWF	GLCDFOREGROUND
	CLRF	GLCDFOREGROUND_H
	RETURN

;********************************************************************************

;SOURCE: 220_I2C_GLCD_SPRITES_USING_SSD1306.GCB (190)
GLOBAL	GLCDDRAWSPRITE_SSD1306
GLCDDRAWSPRITE_SSD1306:
;Dim CurrCharVal, CurrCharCol, SSD1306_Page, GLCDHiChange, GLCDLoChange, GLCDRotateBits, GLCDTemp As Byte
;Calculate device row
;SSD1306_Page = GLCDY
	MOVF	GLCDY,W
	MOVWF	SSD1306_PAGE
;Repeat 3
	MOVLW	3
	BANKSEL	SYSREPEATTEMP1
	MOVWF	SYSREPEATTEMP1
GLOBAL	SYSREPEATLOOP1
SYSREPEATLOOP1:
;Set C Off
	BCF	STATUS,0
;Rotate SSD1306_Page Right
	BANKSEL	SSD1306_PAGE
	RRF	SSD1306_PAGE,F
;End Repeat
	BANKSEL	SYSREPEATTEMP1
	DECFSZ	SYSREPEATTEMP1,F
	GOTO	SYSREPEATLOOP1
GLOBAL	SYSREPEATLOOPEND1
SYSREPEATLOOPEND1:
;SSD1306_Page is now the correct ROW
;Calculate buffer element
;SSD1306_BufferLocationCalc = GLCDY AND 0xF8
	MOVLW	248
	BANKSEL	GLCDY
	ANDWF	GLCDY,W
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	MOVWF	SSD1306_BUFFERLOCATIONCALC
	CLRF	SSD1306_BUFFERLOCATIONCALC_H
;Repeat 4
	MOVLW	4
	MOVWF	SYSREPEATTEMP1
GLOBAL	SYSREPEATLOOP2
SYSREPEATLOOP2:
;Set c Off
	BCF	STATUS,0
;Rotate SSD1306_BufferLocationCalc Left
	RLF	SSD1306_BUFFERLOCATIONCALC,F
	RLF	SSD1306_BUFFERLOCATIONCALC_H,F
;End Repeat
	DECFSZ	SYSREPEATTEMP1,F
	GOTO	SYSREPEATLOOP2
GLOBAL	SYSREPEATLOOPEND2
SYSREPEATLOOPEND2:
;SSD1306_BufferLocationCalc = (SSD1306_BufferLocationCalc OR GLCDX)
	MOVF	SSD1306_BUFFERLOCATIONCALC,W
	BANKSEL	GLCDX
	IORWF	GLCDX,W
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	MOVWF	SSD1306_BUFFERLOCATIONCALC
;Increment as we do not use element 0 in the array
;SSD1306_BufferLocationCalc++
	INCF	SSD1306_BUFFERLOCATIONCALC,F
	BTFSC	STATUS,2
	INCF	SSD1306_BUFFERLOCATIONCALC_H,F
;SSD1306_BufferLocationCalc is now the correct buffer element
;is the y position of Sprite on a ROW positin 0?
;If ( GLCDY mod 8 ) = 0 Then
	BANKSEL	GLCDY
	MOVF	GLCDY,W
	MOVWF	SYSBYTETEMPA
	MOVLW	8
	MOVWF	SYSBYTETEMPB
	FCALL	SYSDIVSUB
	MOVF	SYSBYTETEMPX,W
	BANKSEL	SYSTEMP1
	MOVWF	SYSTEMP1
	MOVWF	SYSBYTETEMPA
	CLRF	SYSBYTETEMPB
	BANKSEL	STATUS
	FCALL	SYSCOMPEQUAL
	BTFSS	SYSBYTETEMPX,0
	GOTO	ELSE9_1
;uses GLDX and SS1306_Page variables
;Cursor_Position_SSD1306_Fast
;Macro Source: 220_i2c_glcd_sprites_using_ssd1306.gcb (419)
;Dim I2CByte As Byte
;HI2CStart
	FCALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x00
	CLRF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0xB0 + SSD1306_Page
	MOVLW	176
	ADDWF	SSD1306_PAGE,W
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CStop
	FCALL	HI2CSTOP
;HI2CStart
	FCALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x00
	CLRF	I2CBYTE
	FCALL	HI2CSEND
;lower nibble
;I2CByte = ( GLCDX  & 0x0f )
	MOVLW	15
	ANDWF	GLCDX,W
	MOVWF	I2CBYTE
;HI2CSend I2CByte
	FCALL	HI2CSEND
;HI2CStop
	FCALL	HI2CSTOP
;HI2CStart
	FCALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x00
	CLRF	I2CBYTE
	FCALL	HI2CSEND
;I2CByte = ( SWAP4(GLCDX) & 0x0F ) + 0x10
	MOVF	GLCDX,W
	BANKSEL	SWAP4IN
	MOVWF	SWAP4IN
	BANKSEL	STATUS
	FCALL	FN_SWAP4
	MOVLW	15
	BANKSEL	SWAP4
	ANDWF	SWAP4,W
	MOVWF	SYSTEMP1
	MOVLW	16
	ADDWF	SYSTEMP1,W
	BANKSEL	I2CBYTE
	MOVWF	I2CBYTE
;HI2CSend I2CByte
	FCALL	HI2CSEND
;HI2CStop
	FCALL	HI2CSTOP
;Read 8 pixels value into CurrCharVal then write to display
;Open_Transaction_SSD1306
;Macro Source: glcd_ssd1306.h (1218)
;4wire not supported, see Write_Transaction_Data_SSD1306
;HI2CStart
	FCALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x40
	MOVLW	64
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;For CurrCharCol = 1 To 8
;LEGACY METHOD
	CLRF	CURRCHARCOL
GLOBAL	SYSFORLOOP1
SYSFORLOOP1:
	INCF	CURRCHARCOL,F
;Select Case CurrCharCol
;Case 1: ReadTable sprite1, CharCode, CurrCharVal
GLOBAL	SYSSELECT1CASE1
SYSSELECT1CASE1:
	DECF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT1CASE2
;Case 1: ReadTable sprite1, CharCode, CurrCharVal
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE1
	MOVWF	CURRCHARVAL
;Case 2: ReadTable sprite2, CharCode, CurrCharVal
	GOTO	SYSSELECTEND1
GLOBAL	SYSSELECT1CASE2
SYSSELECT1CASE2:
	MOVLW	2
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT1CASE3
;Case 2: ReadTable sprite2, CharCode, CurrCharVal
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE2
	MOVWF	CURRCHARVAL
;Case 3: ReadTable sprite3, CharCode, CurrCharVal
	GOTO	SYSSELECTEND1
GLOBAL	SYSSELECT1CASE3
SYSSELECT1CASE3:
	MOVLW	3
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT1CASE4
;Case 3: ReadTable sprite3, CharCode, CurrCharVal
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE3
	MOVWF	CURRCHARVAL
;Case 4: ReadTable sprite4, CharCode, CurrCharVal
	GOTO	SYSSELECTEND1
GLOBAL	SYSSELECT1CASE4
SYSSELECT1CASE4:
	MOVLW	4
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT1CASE5
;Case 4: ReadTable sprite4, CharCode, CurrCharVal
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE4
	MOVWF	CURRCHARVAL
;Case 5: ReadTable sprite5, CharCode, CurrCharVal
	GOTO	SYSSELECTEND1
GLOBAL	SYSSELECT1CASE5
SYSSELECT1CASE5:
	MOVLW	5
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT1CASE6
;Case 5: ReadTable sprite5, CharCode, CurrCharVal
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE5
	MOVWF	CURRCHARVAL
;Case 6: ReadTable sprite6, CharCode, CurrCharVal
	GOTO	SYSSELECTEND1
GLOBAL	SYSSELECT1CASE6
SYSSELECT1CASE6:
	MOVLW	6
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT1CASE7
;Case 6: ReadTable sprite6, CharCode, CurrCharVal
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE6
	MOVWF	CURRCHARVAL
;Case 7: ReadTable sprite7, CharCode, CurrCharVal
	GOTO	SYSSELECTEND1
GLOBAL	SYSSELECT1CASE7
SYSSELECT1CASE7:
	MOVLW	7
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT1CASE8
;Case 7: ReadTable sprite7, CharCode, CurrCharVal
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE7
	MOVWF	CURRCHARVAL
;Case 8: ReadTable sprite8, CharCode, CurrCharVal
	GOTO	SYSSELECTEND1
GLOBAL	SYSSELECT1CASE8
SYSSELECT1CASE8:
	MOVLW	8
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECTEND1
;Case 8: ReadTable sprite8, CharCode, CurrCharVal
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE8
	MOVWF	CURRCHARVAL
;End Select
GLOBAL	SYSSELECTEND1
SYSSELECTEND1:
;Xor pixels into buffer
;GLCDTemp = SSD1306_BufferAlias(SSD1306_BufferLocationCalc) XOR CurrCharVal
	MOVLW	LOW(SSD1306_BUFFERALIAS)
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	ADDWF	SSD1306_BUFFERLOCATIONCALC,W
	MOVWF	FSR0L
	MOVLW	HIGH(SSD1306_BUFFERALIAS)
	ADDWFC	SSD1306_BUFFERLOCATIONCALC_H,W
	MOVWF	FSR0H
	MOVF	INDF0,W
	BANKSEL	CURRCHARVAL
	XORWF	CURRCHARVAL,W
	MOVWF	GLCDTEMP
;SSD1306_BufferAlias(SSD1306_BufferLocationCalc) = GLCDTemp
	MOVLW	LOW(SSD1306_BUFFERALIAS)
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	ADDWF	SSD1306_BUFFERLOCATIONCALC,W
	MOVWF	FSR0L
	MOVLW	HIGH(SSD1306_BUFFERALIAS)
	ADDWFC	SSD1306_BUFFERLOCATIONCALC_H,W
	MOVWF	FSR0H
	BANKSEL	GLCDTEMP
	MOVF	GLCDTEMP,W
	MOVWF	INDF0
;Write buffer this will Increment the device point as part of the write operation
;Write_Transaction_Data_SSD1306(GLCDTemp)
;Macro Source: glcd_ssd1306.h (1249)
;HI2CSend SSD1306SendByte
	MOVF	GLCDTEMP,W
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;Increment buffer by 1 to match device Increment
;SSD1306_BufferLocationCalc++
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	INCF	SSD1306_BUFFERLOCATIONCALC,F
	BTFSC	STATUS,2
	INCF	SSD1306_BUFFERLOCATIONCALC_H,F
;Next
	MOVLW	8
	BANKSEL	CURRCHARCOL
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,0
	GOTO	SYSFORLOOP1
GLOBAL	SYSFORLOOPEND1
SYSFORLOOPEND1:
;Close_Transaction_SSD1306
;Macro Source: glcd_ssd1306.h (1282)
;4wire not supported, see Write_Transaction_Data_SSD1306
;HI2CStop
	FCALL	HI2CSTOP
;Else
	GOTO	ENDIF9
GLOBAL	ELSE9_1
ELSE9_1:
;handle TOP portion of the sprite as we are NOT at 0 pixel of a ROW
;send the TOP pixels
;Cursor_Position_SSD1306_Fast
;Macro Source: 220_i2c_glcd_sprites_using_ssd1306.gcb (419)
;Dim I2CByte As Byte
;HI2CStart
	FCALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x00
	CLRF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0xB0 + SSD1306_Page
	MOVLW	176
	ADDWF	SSD1306_PAGE,W
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CStop
	FCALL	HI2CSTOP
;HI2CStart
	FCALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x00
	CLRF	I2CBYTE
	FCALL	HI2CSEND
;lower nibble
;I2CByte = ( GLCDX  & 0x0f )
	MOVLW	15
	ANDWF	GLCDX,W
	MOVWF	I2CBYTE
;HI2CSend I2CByte
	FCALL	HI2CSEND
;HI2CStop
	FCALL	HI2CSTOP
;HI2CStart
	FCALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x00
	CLRF	I2CBYTE
	FCALL	HI2CSEND
;I2CByte = ( SWAP4(GLCDX) & 0x0F ) + 0x10
	MOVF	GLCDX,W
	BANKSEL	SWAP4IN
	MOVWF	SWAP4IN
	BANKSEL	STATUS
	FCALL	FN_SWAP4
	MOVLW	15
	BANKSEL	SWAP4
	ANDWF	SWAP4,W
	MOVWF	SYSTEMP2
	MOVLW	16
	ADDWF	SYSTEMP2,W
	BANKSEL	I2CBYTE
	MOVWF	I2CBYTE
;HI2CSend I2CByte
	FCALL	HI2CSEND
;HI2CStop
	FCALL	HI2CSTOP
;Open_Transaction_SSD1306
;Macro Source: glcd_ssd1306.h (1218)
;4wire not supported, see Write_Transaction_Data_SSD1306
;HI2CStart
	FCALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x40
	MOVLW	64
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;For CurrCharCol = 1 To 8
;LEGACY METHOD
	CLRF	CURRCHARCOL
GLOBAL	SYSFORLOOP2
SYSFORLOOP2:
	INCF	CURRCHARCOL,F
;Select Case CurrCharCol
;Case 1: ReadTable sprite1, CharCode, GLCDHiChange
GLOBAL	SYSSELECT2CASE1
SYSSELECT2CASE1:
	DECF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT2CASE2
;Case 1: ReadTable sprite1, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE1
	MOVWF	GLCDHICHANGE
;Case 2: ReadTable sprite2, CharCode, GLCDHiChange
	GOTO	SYSSELECTEND2
GLOBAL	SYSSELECT2CASE2
SYSSELECT2CASE2:
	MOVLW	2
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT2CASE3
;Case 2: ReadTable sprite2, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE2
	MOVWF	GLCDHICHANGE
;Case 3: ReadTable sprite3, CharCode, GLCDHiChange
	GOTO	SYSSELECTEND2
GLOBAL	SYSSELECT2CASE3
SYSSELECT2CASE3:
	MOVLW	3
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT2CASE4
;Case 3: ReadTable sprite3, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE3
	MOVWF	GLCDHICHANGE
;Case 4: ReadTable sprite4, CharCode, GLCDHiChange
	GOTO	SYSSELECTEND2
GLOBAL	SYSSELECT2CASE4
SYSSELECT2CASE4:
	MOVLW	4
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT2CASE5
;Case 4: ReadTable sprite4, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE4
	MOVWF	GLCDHICHANGE
;Case 5: ReadTable sprite5, CharCode, GLCDHiChange
	GOTO	SYSSELECTEND2
GLOBAL	SYSSELECT2CASE5
SYSSELECT2CASE5:
	MOVLW	5
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT2CASE6
;Case 5: ReadTable sprite5, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE5
	MOVWF	GLCDHICHANGE
;Case 6: ReadTable sprite6, CharCode, GLCDHiChange
	GOTO	SYSSELECTEND2
GLOBAL	SYSSELECT2CASE6
SYSSELECT2CASE6:
	MOVLW	6
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT2CASE7
;Case 6: ReadTable sprite6, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE6
	MOVWF	GLCDHICHANGE
;Case 7: ReadTable sprite7, CharCode, GLCDHiChange
	GOTO	SYSSELECTEND2
GLOBAL	SYSSELECT2CASE7
SYSSELECT2CASE7:
	MOVLW	7
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT2CASE8
;Case 7: ReadTable sprite7, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE7
	MOVWF	GLCDHICHANGE
;Case 8: ReadTable sprite8, CharCode, GLCDHiChange
	GOTO	SYSSELECTEND2
GLOBAL	SYSSELECT2CASE8
SYSSELECT2CASE8:
	MOVLW	8
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECTEND2
;Case 8: ReadTable sprite8, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE8
	MOVWF	GLCDHICHANGE
;End Select
GLOBAL	SYSSELECTEND2
SYSSELECTEND2:
;handle top row
;GLCDRotateBits = GLCDY AND 7
	MOVLW	7
	ANDWF	GLCDY,W
	MOVWF	GLCDROTATEBITS
;Repeat GLCDRotateBits
	BANKSEL	SYSREPEATTEMP1
	MOVWF	SYSREPEATTEMP1
	BTFSC	STATUS,2
	GOTO	SYSREPEATLOOPEND3
GLOBAL	SYSREPEATLOOP3
SYSREPEATLOOP3:
;Set c Off
	BCF	STATUS,0
;Rotate GLCDHiChange Left
	BANKSEL	GLCDHICHANGE
	RLF	GLCDHICHANGE,F
;End Repeat
	BANKSEL	SYSREPEATTEMP1
	DECFSZ	SYSREPEATTEMP1,F
	GOTO	SYSREPEATLOOP3
GLOBAL	SYSREPEATLOOPEND3
SYSREPEATLOOPEND3:
;GLCDTemp = SSD1306_BufferAlias(SSD1306_BufferLocationCalc) XOR GLCDHiChange
	MOVLW	LOW(SSD1306_BUFFERALIAS)
	ADDWF	SSD1306_BUFFERLOCATIONCALC,W
	MOVWF	FSR0L
	MOVLW	HIGH(SSD1306_BUFFERALIAS)
	ADDWFC	SSD1306_BUFFERLOCATIONCALC_H,W
	MOVWF	FSR0H
	MOVF	INDF0,W
	BANKSEL	GLCDHICHANGE
	XORWF	GLCDHICHANGE,W
	MOVWF	GLCDTEMP
;SSD1306_BufferAlias(SSD1306_BufferLocationCalc) = GLCDTemp
	MOVLW	LOW(SSD1306_BUFFERALIAS)
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	ADDWF	SSD1306_BUFFERLOCATIONCALC,W
	MOVWF	FSR0L
	MOVLW	HIGH(SSD1306_BUFFERALIAS)
	ADDWFC	SSD1306_BUFFERLOCATIONCALC_H,W
	MOVWF	FSR0H
	BANKSEL	GLCDTEMP
	MOVF	GLCDTEMP,W
	MOVWF	INDF0
;Write_Transaction_Data_SSD1306(GLCDTemp)
;Macro Source: glcd_ssd1306.h (1249)
;HI2CSend SSD1306SendByte
	MOVF	GLCDTEMP,W
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;SSD1306_BufferLocationCalc++
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	INCF	SSD1306_BUFFERLOCATIONCALC,F
	BTFSC	STATUS,2
	INCF	SSD1306_BUFFERLOCATIONCALC_H,F
;Next
	MOVLW	8
	BANKSEL	CURRCHARCOL
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,0
	GOTO	SYSFORLOOP2
GLOBAL	SYSFORLOOPEND2
SYSFORLOOPEND2:
;Close_Transaction_SSD1306
;Macro Source: glcd_ssd1306.h (1282)
;4wire not supported, see Write_Transaction_Data_SSD1306
;HI2CStop
	FCALL	HI2CSTOP
;handle BOTTOM pixels of the sprite
;Increment to the next ROW
;SSD1306_Page++
	INCF	SSD1306_PAGE,F
;Cursor_Position_SSD1306_Fast
;Macro Source: 220_i2c_glcd_sprites_using_ssd1306.gcb (419)
;Dim I2CByte As Byte
;HI2CStart
	FCALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x00
	CLRF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0xB0 + SSD1306_Page
	MOVLW	176
	ADDWF	SSD1306_PAGE,W
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CStop
	FCALL	HI2CSTOP
;HI2CStart
	FCALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x00
	CLRF	I2CBYTE
	FCALL	HI2CSEND
;lower nibble
;I2CByte = ( GLCDX  & 0x0f )
	MOVLW	15
	ANDWF	GLCDX,W
	MOVWF	I2CBYTE
;HI2CSend I2CByte
	FCALL	HI2CSEND
;HI2CStop
	FCALL	HI2CSTOP
;HI2CStart
	FCALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x00
	CLRF	I2CBYTE
	FCALL	HI2CSEND
;I2CByte = ( SWAP4(GLCDX) & 0x0F ) + 0x10
	MOVF	GLCDX,W
	BANKSEL	SWAP4IN
	MOVWF	SWAP4IN
	BANKSEL	STATUS
	FCALL	FN_SWAP4
	MOVLW	15
	BANKSEL	SWAP4
	ANDWF	SWAP4,W
	MOVWF	SYSTEMP2
	MOVLW	16
	ADDWF	SYSTEMP2,W
	BANKSEL	I2CBYTE
	MOVWF	I2CBYTE
;HI2CSend I2CByte
	FCALL	HI2CSEND
;HI2CStop
	FCALL	HI2CSTOP
;Move buffer pointet to the next row/buffer which is 128 bytes, but, the top half of the buffer has been write... 8 bytes.
;So 128-8 = 120
;SSD1306_BufferLocationCalc = SSD1306_BufferLocationCalc  + 120
	MOVLW	120
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	ADDWF	SSD1306_BUFFERLOCATIONCALC,F
	MOVLW	0
	ADDWFC	SSD1306_BUFFERLOCATIONCALC_H,F
;Open_Transaction_SSD1306
;Macro Source: glcd_ssd1306.h (1218)
;4wire not supported, see Write_Transaction_Data_SSD1306
;HI2CStart
	BANKSEL	STATUS
	FCALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x40
	MOVLW	64
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;For CurrCharCol = 1 To 8
;LEGACY METHOD
	CLRF	CURRCHARCOL
GLOBAL	SYSFORLOOP3
SYSFORLOOP3:
	INCF	CURRCHARCOL,F
;Select Case CurrCharCol
;Case 1: ReadTable sprite1, CharCode, GLCDHiChange
GLOBAL	SYSSELECT3CASE1
SYSSELECT3CASE1:
	DECF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT3CASE2
;Case 1: ReadTable sprite1, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE1
	MOVWF	GLCDHICHANGE
;Case 2: ReadTable sprite2, CharCode, GLCDHiChange
	GOTO	SYSSELECTEND3
GLOBAL	SYSSELECT3CASE2
SYSSELECT3CASE2:
	MOVLW	2
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT3CASE3
;Case 2: ReadTable sprite2, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE2
	MOVWF	GLCDHICHANGE
;Case 3: ReadTable sprite3, CharCode, GLCDHiChange
	GOTO	SYSSELECTEND3
GLOBAL	SYSSELECT3CASE3
SYSSELECT3CASE3:
	MOVLW	3
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT3CASE4
;Case 3: ReadTable sprite3, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE3
	MOVWF	GLCDHICHANGE
;Case 4: ReadTable sprite4, CharCode, GLCDHiChange
	GOTO	SYSSELECTEND3
GLOBAL	SYSSELECT3CASE4
SYSSELECT3CASE4:
	MOVLW	4
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT3CASE5
;Case 4: ReadTable sprite4, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE4
	MOVWF	GLCDHICHANGE
;Case 5: ReadTable sprite5, CharCode, GLCDHiChange
	GOTO	SYSSELECTEND3
GLOBAL	SYSSELECT3CASE5
SYSSELECT3CASE5:
	MOVLW	5
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT3CASE6
;Case 5: ReadTable sprite5, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE5
	MOVWF	GLCDHICHANGE
;Case 6: ReadTable sprite6, CharCode, GLCDHiChange
	GOTO	SYSSELECTEND3
GLOBAL	SYSSELECT3CASE6
SYSSELECT3CASE6:
	MOVLW	6
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT3CASE7
;Case 6: ReadTable sprite6, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE6
	MOVWF	GLCDHICHANGE
;Case 7: ReadTable sprite7, CharCode, GLCDHiChange
	GOTO	SYSSELECTEND3
GLOBAL	SYSSELECT3CASE7
SYSSELECT3CASE7:
	MOVLW	7
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECT3CASE8
;Case 7: ReadTable sprite7, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE7
	MOVWF	GLCDHICHANGE
;Case 8: ReadTable sprite8, CharCode, GLCDHiChange
	GOTO	SYSSELECTEND3
GLOBAL	SYSSELECT3CASE8
SYSSELECT3CASE8:
	MOVLW	8
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,2
	GOTO	SYSSELECTEND3
;Case 8: ReadTable sprite8, CharCode, GLCDHiChange
	MOVF	CHARCODE,W
	MOVWF	SYSSTRINGA
	FCALL	SPRITE8
	MOVWF	GLCDHICHANGE
;End Select
GLOBAL	SYSSELECTEND3
SYSSELECTEND3:
;GLCDLoChange = 0
	CLRF	GLCDLOCHANGE
;Repeat GLCDRotateBits
	MOVF	GLCDROTATEBITS,W
	BANKSEL	SYSREPEATTEMP1
	MOVWF	SYSREPEATTEMP1
	BTFSC	STATUS,2
	GOTO	SYSREPEATLOOPEND4
GLOBAL	SYSREPEATLOOP4
SYSREPEATLOOP4:
;Set c Off
	BCF	STATUS,0
;as bits move to left C is set... moving in GLCDLoChange in the next command
;Rotate GLCDHiChange Left
	BANKSEL	GLCDHICHANGE
	RLF	GLCDHICHANGE,F
;Rotate GLCDLoChange Left
	RLF	GLCDLOCHANGE,F
;End Repeat
	BANKSEL	SYSREPEATTEMP1
	DECFSZ	SYSREPEATTEMP1,F
	GOTO	SYSREPEATLOOP4
GLOBAL	SYSREPEATLOOPEND4
SYSREPEATLOOPEND4:
;GLCDTemp = SSD1306_BufferAlias(SSD1306_BufferLocationCalc) XOR GLCDLoChange
	MOVLW	LOW(SSD1306_BUFFERALIAS)
	ADDWF	SSD1306_BUFFERLOCATIONCALC,W
	MOVWF	FSR0L
	MOVLW	HIGH(SSD1306_BUFFERALIAS)
	ADDWFC	SSD1306_BUFFERLOCATIONCALC_H,W
	MOVWF	FSR0H
	MOVF	INDF0,W
	BANKSEL	GLCDLOCHANGE
	XORWF	GLCDLOCHANGE,W
	MOVWF	GLCDTEMP
;SSD1306_BufferAlias(SSD1306_BufferLocationCalc) = GLCDTemp
	MOVLW	LOW(SSD1306_BUFFERALIAS)
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	ADDWF	SSD1306_BUFFERLOCATIONCALC,W
	MOVWF	FSR0L
	MOVLW	HIGH(SSD1306_BUFFERALIAS)
	ADDWFC	SSD1306_BUFFERLOCATIONCALC_H,W
	MOVWF	FSR0H
	BANKSEL	GLCDTEMP
	MOVF	GLCDTEMP,W
	MOVWF	INDF0
;Write_Transaction_Data_SSD1306(GLCDTemp)
;Macro Source: glcd_ssd1306.h (1249)
;HI2CSend SSD1306SendByte
	MOVF	GLCDTEMP,W
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;SSD1306_BufferLocationCalc++
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	INCF	SSD1306_BUFFERLOCATIONCALC,F
	BTFSC	STATUS,2
	INCF	SSD1306_BUFFERLOCATIONCALC_H,F
;Next
	MOVLW	8
	BANKSEL	CURRCHARCOL
	SUBWF	CURRCHARCOL,W
	BTFSS	STATUS,0
	GOTO	SYSFORLOOP3
GLOBAL	SYSFORLOOPEND3
SYSFORLOOPEND3:
;Close_Transaction_SSD1306
;Macro Source: glcd_ssd1306.h (1282)
;4wire not supported, see Write_Transaction_Data_SSD1306
;HI2CStop
	FCALL	HI2CSTOP
;End If
GLOBAL	ENDIF9
ENDIF9:
	RETURN

;********************************************************************************

;SOURCE: HWI2C.H (709)
GLOBAL	HI2CINIT
HI2CINIT:
;asm showdebug  This method sets the variable `HI2CCurrentMode`, and, if required calls the method `SI2CInit` to set up new MSSP modules - aka K42s family chips
;HI2CCurrentMode = 0
	CLRF	HI2CCURRENTMODE
;Initialise the I2C module
	RETURN

;********************************************************************************

;SOURCE: GLCD_SSD1306.H (317)
GLOBAL	INITGLCD_SSD1306
INITGLCD_SSD1306:
;Colours //Set these first
;GLCDBackground = 0
	CLRF	GLCDBACKGROUND
	CLRF	GLCDBACKGROUND_H
;GLCDForeground = 1
	MOVLW	1
	MOVWF	GLCDFOREGROUND
	CLRF	GLCDFOREGROUND_H
;GLCDFontWidth = 5
	MOVLW	5
	MOVWF	GLCDFONTWIDTH
;GLCDfntDefaultHeight = 7  'used by GLCDPrintString and GLCDPrintStringLn
	MOVLW	7
	MOVWF	GLCDFNTDEFAULTHEIGHT
;dim PrintLocX, PrintLocY as word
;GLCDfntDefault = 0
	CLRF	GLCDFNTDEFAULT
;GLCDfntDefaultsize = 1
	MOVLW	1
	MOVWF	GLCDFNTDEFAULTSIZE
;wait 255 ms             'added to ensure the charge pump and power is operational.
	MOVLW	255
	MOVWF	SYSWAITTEMPMS
	CLRF	SYSWAITTEMPMS_H
	FCALL	DELAY_MS
;HI2CMode Master
	MOVLW	12
	MOVWF	HI2CCURRENTMODE
	FCALL	HI2CMODE
;Wait 15 ms  'wait for power-up and reset
	MOVLW	15
	MOVWF	SYSWAITTEMPMS
	CLRF	SYSWAITTEMPMS_H
	FCALL	DELAY_MS
;Setup code for SSD1306 controllers
;Init sequence for 128x64 OLED module
;Write_Command_SSD1306(SSD1306_DISPLAYOFF)                    ' 0xAE
	MOVLW	174
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(SSD1306_DEACTIVATE_SCROLL)
	MOVLW	46
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(SSD1306_SETDISPLAYCLOCKDIV)            ' 0xD5
	MOVLW	213
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(0x80)                                  ' the suggested ratio 0x80
	MOVLW	128
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(SSD1306_SETMULTIPLEX)                  ' 0xA8
	MOVLW	168
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(0x3f)                                 '64 pixels
	MOVLW	63
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(SSD1306_SETDISPLAYOFFSET)              ' 0xD3
	MOVLW	211
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(0x00)                                   ' no offset
	CLRF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(SSD1306_SETSTARTLINE | 0x00)            ' line #0
	MOVLW	64
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(SSD1306_CHARGEPUMP)                    ' 0x8D
	MOVLW	141
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;if (SSD1306_vccstate = SSD1306_EXTERNALVCC) then
;Write_Command_SSD1306(0x14)
	MOVLW	20
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;end if
;Write_Command_SSD1306(SSD1306_MEMORYMODE)                    ' 0x20
	MOVLW	32
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(0x00)                                  ' 0x00 act like ks0108 - DO NOT SELECT!!
;Write_Command_SSD1306(0x10)                                  ' 0x01 act like PCD8544
	MOVLW	16
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(SSD1306_SEGREMAP | 0x1)
	MOVLW	161
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(SSD1306_COMSCANDEC)
	MOVLW	200
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(SSD1306_SETCOMPINS)                    ' 0xDA
	MOVLW	218
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(0x12)                                 '64 pixels
	MOVLW	18
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(SSD1306_SETCONTRAST)                   ' 0x81
	MOVLW	129
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;if SSD1306_vccstate = SSD1306_EXTERNALVCC then
;Write_Command_SSD1306(0xCF)
	MOVLW	207
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;end if
;Write_Command_SSD1306(SSD1306_SETPRECHARGE)                  ' 0xd9
	MOVLW	217
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;if SSD1306_vccstate = SSD1306_EXTERNALVCC then
;Write_Command_SSD1306(0xF1)
	MOVLW	241
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;end if
;Write_Command_SSD1306(SSD1306_SETVCOMDETECT)                 ' 0xDB
	MOVLW	219
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(0x40)
	MOVLW	64
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(SSD1306_DISPLAYALLON_RESUME)           ' 0xA4
	MOVLW	164
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Write_Command_SSD1306(SSD1306_NORMALDISPLAY)                 ' 0xA6
	MOVLW	166
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_COMMAND_SSD1306
;Clear screen Here
;GLCDCLS_SSD1306
	CALL	GLCDCLS_SSD1306
;Write_Command_SSD1306(SSD1306_DISPLAYON)                     '--turn on oled panel
	MOVLW	175
	MOVWF	SSD1306SENDBYTE
	LJMP	WRITE_COMMAND_SSD1306

;********************************************************************************

;SOURCE: 220_I2C_GLCD_SPRITES_USING_SSD1306.GCB (28)
GLOBAL	INITPPS
INITPPS:
;SSP1CLKPPS = 0x1;   'RA1->MSSP1:SCL1;
	MOVLW	1
	BANKSEL	SSP1CLKPPS
	MOVWF	SSP1CLKPPS
;RA1PPS = 0x1B;      'RA1->MSSP1:SCL1;
	MOVLW	27
	BANKSEL	RA1PPS
	MOVWF	RA1PPS
;SSP1DATPPS = 0x4;   'RA4->MSSP1:SDA1;
	MOVLW	4
	BANKSEL	SSP1DATPPS
	MOVWF	SSP1DATPPS
;RA4PPS = 0x1C;      'RA4->MSSP1:SDA1;
	MOVLW	28
	BANKSEL	RA4PPS
	MOVWF	RA4PPS
	BANKSEL	STATUS
	RETURN

;********************************************************************************

;SOURCE: RANDOM.H (35)
GLOBAL	INITRANDOM
INITRANDOM:
;Dim RandomSeed As Word
;RandomSeed = RandStart
	MOVLW	110
	MOVWF	RANDOMSEED
	MOVLW	220
	MOVWF	RANDOMSEED_H
	RETURN

;********************************************************************************

;SOURCE: SYSTEM.H (159)
GLOBAL	INITSYS
INITSYS:
;asm showdebug This code block sets the internal oscillator to ChipMHz
;asm showdebug Default settings for microcontrollers with _OSCCON1_
;Default OSCCON1 typically, NOSC HFINTOSC; NDIV 1 - Common as this simply sets the HFINTOSC
;OSCCON1 = 0x60
	MOVLW	96
	BANKSEL	OSCCON1
	MOVWF	OSCCON1
;Default value typically, CSWHOLD may proceed; SOSCPWR Low power
;OSCCON3 = 0x00
	CLRF	OSCCON3
;Default value typically, MFOEN disabled; LFOEN disabled; ADOEN disabled; SOSCEN disabled; EXTOEN disabled; HFOEN disabled
;OSCEN = 0x00
	CLRF	OSCEN
;Default value
;OSCTUNE = 0x00
	CLRF	OSCTUNE
;asm showdebug The MCU is a chip family ChipFamily
;asm showdebug OSCCON type is 102
;OSCFRQ = 0b00000101
	MOVLW	5
	MOVWF	OSCFRQ
;asm showdebug _Complete_the_chip_setup_of_BSR,ADCs,ANSEL_and_other_key_setup_registers_or_register_bits
;Ensure all ports are set for digital I/O and, turn off A/D
;SET ADFM OFF
	BANKSEL	ADCON0
	BCF	ADCON0,2
;Switch off A/D Var(ADCON0)
;SET ADCON0.ADON OFF
	BCF	ADCON0,7
;ANSELA = 0
	BANKSEL	ANSELA
	CLRF	ANSELA
;ANSELC = 0
	CLRF	ANSELC
;Set comparator register bits for many MCUs with register CM2CON0
;C2EN = 0
	BANKSEL	CM2CON0
	BCF	CM2CON0,7
;C1EN = 0
	BCF	CM1CON0,7
;
;'Turn off all ports
;PORTA = 0
	BANKSEL	PORTA
	CLRF	PORTA
;PORTC = 0
	CLRF	PORTC
	RETURN

;********************************************************************************

;SOURCE: GLCD_SSD1306.H (883)
GLOBAL	PSET_SSD1306
PSET_SSD1306:
;Set pixel at X, Y on LCD to State
;X is 0 to 127
;Y is 0 to 63
;Origin in top left
;anything off screen with be rejected
;if GLCDX => GLCD_WIDTH OR GLCDY => GLCD_HEIGHT Then
	MOVF	GLCDX,W
	MOVWF	SYSBYTETEMPA
	MOVLW	128
	MOVWF	SYSBYTETEMPB
	FCALL	SYSCOMPLESSTHAN
	COMF	SYSBYTETEMPX,F
	MOVF	SYSBYTETEMPX,W
	BANKSEL	SYSTEMP3
	MOVWF	SYSTEMP3
	BANKSEL	GLCDY
	MOVF	GLCDY,W
	MOVWF	SYSBYTETEMPA
	MOVLW	64
	MOVWF	SYSBYTETEMPB
	FCALL	SYSCOMPLESSTHAN
	COMF	SYSBYTETEMPX,F
	BANKSEL	SYSTEMP3
	MOVF	SYSTEMP3,W
	IORWF	SYSBYTETEMPX,W
	MOVWF	SYSTEMP1
	BTFSS	SYSTEMP1,0
	GOTO	ENDIF31
;exit sub
	BANKSEL	STATUS
	RETURN
;end if
GLOBAL	ENDIF31
ENDIF31:
;1.14 Addresses correct device horizonal page
;don't need to do these calculations for in LOWMEMORY_GLCD_MODE
;SSD1306_BufferLocationCalc = ( GLCDY / 8 )* GLCD_WIDTH
;faster than /8
;SSD1306_BufferLocationCalc = GLCDY
	BANKSEL	GLCDY
	MOVF	GLCDY,W
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	MOVWF	SSD1306_BUFFERLOCATIONCALC
	CLRF	SSD1306_BUFFERLOCATIONCALC_H
;Repeat 3
	MOVLW	3
	MOVWF	SYSREPEATTEMP5
GLOBAL	SYSREPEATLOOP5
SYSREPEATLOOP5:
;Set C Off
	BCF	STATUS,0
;Rotate SSD1306_BufferLocationCalc Right
	RRF	SSD1306_BUFFERLOCATIONCALC_H,F
	RRF	SSD1306_BUFFERLOCATIONCALC,F
;End Repeat
	DECFSZ	SYSREPEATTEMP5,F
	GOTO	SYSREPEATLOOP5
GLOBAL	SYSREPEATLOOPEND5
SYSREPEATLOOPEND5:
;faster than * 128
;Set C Off
	BCF	STATUS,0
;Repeat 7
	MOVLW	7
	MOVWF	SYSREPEATTEMP5
GLOBAL	SYSREPEATLOOP6
SYSREPEATLOOP6:
;Rotate SSD1306_BufferLocationCalc Left
	RLF	SSD1306_BUFFERLOCATIONCALC,F
	RLF	SSD1306_BUFFERLOCATIONCALC_H,F
;End Repeat
	DECFSZ	SYSREPEATTEMP5,F
	GOTO	SYSREPEATLOOP6
GLOBAL	SYSREPEATLOOPEND6
SYSREPEATLOOPEND6:
;SSD1306_BufferLocationCalc = GLCDX + SSD1306_BufferLocationCalc + 1
	MOVF	SSD1306_BUFFERLOCATIONCALC,W
	BANKSEL	GLCDX
	ADDWF	GLCDX,W
	BANKSEL	SYSTEMP1
	MOVWF	SYSTEMP1
	CLRF	SYSTEMP3
	MOVF	SSD1306_BUFFERLOCATIONCALC_H,W
	ADDWFC	SYSTEMP3,W
	MOVWF	SYSTEMP1_H
	MOVLW	1
	ADDWF	SYSTEMP1,W
	MOVWF	SSD1306_BUFFERLOCATIONCALC
	MOVLW	0
	ADDWFC	SYSTEMP1_H,W
	MOVWF	SSD1306_BUFFERLOCATIONCALC_H
;anything beyond buffer boundary?
;why? X = 127 and Y = 64 (Y is over 63!) will have passed first check....
;if SSD1306_BufferLocationCalc > GLCD_HEIGHT * GLCD_WIDTH Then
	MOVF	SSD1306_BUFFERLOCATIONCALC,W
	MOVWF	SYSWORDTEMPB
	MOVF	SSD1306_BUFFERLOCATIONCALC_H,W
	MOVWF	SYSWORDTEMPB_H
	CLRF	SYSWORDTEMPA
	MOVLW	32
	MOVWF	SYSWORDTEMPA_H
	BANKSEL	STATUS
	FCALL	SYSCOMPLESSTHAN16
	BTFSC	SYSBYTETEMPX,0
;exit sub
	RETURN
;end if
;GLCDDataTemp = SSD1306_BufferAlias(SSD1306_BufferLocationCalc)
	MOVLW	LOW(SSD1306_BUFFERALIAS)
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	ADDWF	SSD1306_BUFFERLOCATIONCALC,W
	MOVWF	FSR0L
	MOVLW	HIGH(SSD1306_BUFFERALIAS)
	ADDWFC	SSD1306_BUFFERLOCATIONCALC_H,W
	MOVWF	FSR0H
	MOVF	INDF0,W
	BANKSEL	GLCDDATATEMP
	MOVWF	GLCDDATATEMP
;Change data to set/clear pixel
;GLCDBitNo = GLCDY And 7
	MOVLW	7
	ANDWF	GLCDY,W
	MOVWF	GLCDBITNO
;If GLCDColour.0 = 0 Then
	BTFSC	GLCDCOLOUR,0
	GOTO	ELSE33_1
;GLCDChange = 254
	MOVLW	254
	MOVWF	GLCDCHANGE
;Set C On
	BSF	STATUS,0
;Else
	GOTO	ENDIF33
GLOBAL	ELSE33_1
ELSE33_1:
;GLCDChange = 1
	MOVLW	1
	MOVWF	GLCDCHANGE
;Set C Off
	BCF	STATUS,0
;End If
GLOBAL	ENDIF33
ENDIF33:
;Repeat GLCDBitNo
	MOVF	GLCDBITNO,W
	BANKSEL	SYSREPEATTEMP5
	MOVWF	SYSREPEATTEMP5
	BTFSC	STATUS,2
	GOTO	SYSREPEATLOOPEND7
GLOBAL	SYSREPEATLOOP7
SYSREPEATLOOP7:
;Rotate GLCDChange Left
	BANKSEL	GLCDCHANGE
	RLF	GLCDCHANGE,F
;End Repeat
	BANKSEL	SYSREPEATTEMP5
	DECFSZ	SYSREPEATTEMP5,F
	GOTO	SYSREPEATLOOP7
GLOBAL	SYSREPEATLOOPEND7
SYSREPEATLOOPEND7:
;If GLCDColour.0 = 0 Then
	BANKSEL	GLCDCOLOUR
	BTFSC	GLCDCOLOUR,0
	GOTO	ELSE34_1
;GLCDDataTemp = GLCDDataTemp And GLCDChange
	MOVF	GLCDDATATEMP,W
	ANDWF	GLCDCHANGE,W
	MOVWF	GLCDDATATEMP
;Else
	GOTO	ENDIF34
GLOBAL	ELSE34_1
ELSE34_1:
;GLCDDataTemp = GLCDDataTemp Or GLCDChange
	MOVF	GLCDDATATEMP,W
	IORWF	GLCDCHANGE,W
	MOVWF	GLCDDATATEMP
;End If
GLOBAL	ENDIF34
ENDIF34:
;added 1.14 to isolate from full glcd mode
;revised 1.14 to isolate from low memory mode
;if SSD1306_BufferAlias(SSD1306_BufferLocationCalc) <> GLCDDataTemp then
	MOVLW	LOW(SSD1306_BUFFERALIAS)
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	ADDWF	SSD1306_BUFFERLOCATIONCALC,W
	MOVWF	FSR0L
	MOVLW	HIGH(SSD1306_BUFFERALIAS)
	ADDWFC	SSD1306_BUFFERLOCATIONCALC_H,W
	MOVWF	FSR0H
	BANKSEL	GLCDDATATEMP
	MOVF	GLCDDATATEMP,W
	SUBWF	INDF0,W
	BTFSC	STATUS,2
	GOTO	ENDIF35
;SSD1306_BufferAlias(SSD1306_BufferLocationCalc) = GLCDDataTemp
	MOVLW	LOW(SSD1306_BUFFERALIAS)
	BANKSEL	SSD1306_BUFFERLOCATIONCALC
	ADDWF	SSD1306_BUFFERLOCATIONCALC,W
	MOVWF	FSR0L
	MOVLW	HIGH(SSD1306_BUFFERALIAS)
	ADDWFC	SSD1306_BUFFERLOCATIONCALC_H,W
	MOVWF	FSR0H
	BANKSEL	GLCDDATATEMP
	MOVF	GLCDDATATEMP,W
	MOVWF	INDF0
;Cursor_Position_SSD1306 ( GLCDX, GLCDY )
	MOVF	GLCDX,W
	MOVWF	LOCX
	MOVF	GLCDY,W
	MOVWF	LOCY
	FCALL	CURSOR_POSITION_SSD1306
;Write_Data_SSD1306 ( GLCDDataTemp )
	MOVF	GLCDDATATEMP,W
	MOVWF	SSD1306SENDBYTE
	FCALL	WRITE_DATA_SSD1306
;end if
GLOBAL	ENDIF35
ENDIF35:
	RETURN

;********************************************************************************

;SOURCE: SYSTEM.H (3383)
GLOBAL	SYSCOMPLESSTHAN
SYSCOMPLESSTHAN:
;Dim SysByteTempA, SysByteTempB, SysByteTempX as byte
;clrf SysByteTempX
	CLRF	SYSBYTETEMPX
;bsf STATUS, C
	BSF	STATUS,0
;movf SysByteTempB, W
	MOVF	SYSBYTETEMPB, W
;subwf SysByteTempA, W
	SUBWF	SYSBYTETEMPA, W
;btfss STATUS, C
	BTFSS	STATUS,0
;comf SysByteTempX,F
	COMF	SYSBYTETEMPX,F
	RETURN

;********************************************************************************

;START OF PROGRAM MEMORY PAGE 1
	PSECT	PROGMEM1,CLASS=CODE,SPACE=SPACE_CODE,DELTA=2, ABS, OVRLD 
	ORG	2048
;SOURCE: GLCD_SSD1306.H (1040)
GLOBAL	CURSOR_POSITION_SSD1306
CURSOR_POSITION_SSD1306:
;dim  PosCharX, PosCharX as Word
;PosCharY = LocY / 8
;faster than /8
;PosCharY = LocY
	MOVF	LOCY,W
	MOVWF	POSCHARY
;Repeat 3
	MOVLW	3
	BANKSEL	SYSREPEATTEMP8
	MOVWF	SYSREPEATTEMP8
GLOBAL	SYSREPEATLOOP8
SYSREPEATLOOP8:
;Set C Off
	BCF	STATUS,0
;Rotate PosCharY Right
	BANKSEL	POSCHARY
	RRF	POSCHARY,F
;End Repeat
	BANKSEL	SYSREPEATTEMP8
	DECFSZ	SYSREPEATTEMP8,F
	GOTO	SYSREPEATLOOP8
GLOBAL	SYSREPEATLOOPEND8
SYSREPEATLOOPEND8:
;Write_Command_SSD1306( 0xB0 + PosCharY )   ' set page address
	MOVLW	176
	BANKSEL	POSCHARY
	ADDWF	POSCHARY,W
	MOVWF	SSD1306SENDBYTE
	CALL	WRITE_COMMAND_SSD1306
;PosCharX = ( LocX  & 0x0f )  ' lower nibble
	MOVLW	15
	ANDWF	LOCX,W
	MOVWF	POSCHARX
	CLRF	POSCHARX_H
;Write_Command_SSD1306( PosCharX )
	MOVF	POSCHARX,W
	MOVWF	SSD1306SENDBYTE
	CALL	WRITE_COMMAND_SSD1306
;PosCharX = LocX
	MOVF	LOCX,W
	MOVWF	POSCHARX
	CLRF	POSCHARX_H
;Repeat 4
	MOVLW	4
	BANKSEL	SYSREPEATTEMP8
	MOVWF	SYSREPEATTEMP8
GLOBAL	SYSREPEATLOOP9
SYSREPEATLOOP9:
;Set C off
	BCF	STATUS,0
;Rotate PosCharX Right
	BANKSEL	POSCHARX_H
	RRF	POSCHARX_H,F
	RRF	POSCHARX,F
;End Repeat
	BANKSEL	SYSREPEATTEMP8
	DECFSZ	SYSREPEATTEMP8,F
	GOTO	SYSREPEATLOOP9
GLOBAL	SYSREPEATLOOPEND9
SYSREPEATLOOPEND9:
;PosCharX = ( PosCharX & 0x0F ) + 0x10
	MOVLW	15
	BANKSEL	POSCHARX
	ANDWF	POSCHARX,W
	BANKSEL	SYSTEMP1
	MOVWF	SYSTEMP1
	CLRF	SYSTEMP1_H
	MOVLW	16
	ADDWF	SYSTEMP1,W
	BANKSEL	POSCHARX
	MOVWF	POSCHARX
	MOVLW	0
	BANKSEL	SYSTEMP1_H
	ADDWFC	SYSTEMP1_H,W
	BANKSEL	POSCHARX_H
	MOVWF	POSCHARX_H
;Write_Command_SSD1306 ( PosCharX )
	MOVF	POSCHARX,W
	MOVWF	SSD1306SENDBYTE
	GOTO	WRITE_COMMAND_SSD1306

;********************************************************************************

GLOBAL	DELAY_MS
DELAY_MS:
	INCF	SYSWAITTEMPMS_H, F
GLOBAL	DMS_START
DMS_START:
	MOVLW	14
	MOVWF	DELAYTEMP2
GLOBAL	DMS_OUTER
DMS_OUTER:
	MOVLW	189
	MOVWF	DELAYTEMP
GLOBAL	DMS_INNER
DMS_INNER:
	DECFSZ	DELAYTEMP, F
	GOTO	DMS_INNER
	DECFSZ	DELAYTEMP2, F
	GOTO	DMS_OUTER
	DECFSZ	SYSWAITTEMPMS, F
	GOTO	DMS_START
	DECFSZ	SYSWAITTEMPMS_H, F
	GOTO	DMS_START
	RETURN

;********************************************************************************

GLOBAL	DELAY_S
DELAY_S:
GLOBAL	DS_START
DS_START:
	MOVLW	232
	MOVWF	SYSWAITTEMPMS
	MOVLW	3
	MOVWF	SYSWAITTEMPMS_H
	CALL	DELAY_MS
	DECFSZ	SYSWAITTEMPS, F
	GOTO	DS_START
	RETURN

;********************************************************************************

GLOBAL	GLCDCHARCOL4
GLCDCHARCOL4:
	MOVLW	113
	SUBWF	SYSSTRINGA, W
	BTFSC	STATUS,0
	RETLW	0
	MOVF	SYSSTRINGA, W
	ADDLW	LOW TABLEGLCDCHARCOL4
	MOVWF	SYSSTRINGA
	MOVLW	(HIGH TABLEGLCDCHARCOL4) & 127
	BTFSC	STATUS,0
	ADDLW	1
	MOVWF	PCLATH
	MOVF	SYSSTRINGA, W
	MOVWF	PCL
GLOBAL	TABLEGLCDCHARCOL4
TABLEGLCDCHARCOL4:
	RETLW	112
	RETLW	254
	RETLW	56
	RETLW	10
	RETLW	6
	RETLW	204
	RETLW	102
	RETLW	124
	RETLW	112
	RETLW	4
	RETLW	64
	RETLW	16
	RETLW	56
	RETLW	136
	RETLW	162
	RETLW	112
	RETLW	28
	RETLW	0
	RETLW	0
	RETLW	14
	RETLW	254
	RETLW	84
	RETLW	38
	RETLW	146
	RETLW	10
	RETLW	56
	RETLW	130
	RETLW	16
	RETLW	16
	RETLW	160
	RETLW	16
	RETLW	192
	RETLW	32
	RETLW	162
	RETLW	132
	RETLW	194
	RETLW	130
	RETLW	40
	RETLW	138
	RETLW	148
	RETLW	2
	RETLW	146
	RETLW	146
	RETLW	108
	RETLW	172
	RETLW	40
	RETLW	40
	RETLW	130
	RETLW	2
	RETLW	146
	RETLW	36
	RETLW	146
	RETLW	130
	RETLW	130
	RETLW	146
	RETLW	18
	RETLW	130
	RETLW	16
	RETLW	130
	RETLW	128
	RETLW	16
	RETLW	128
	RETLW	4
	RETLW	8
	RETLW	130
	RETLW	18
	RETLW	130
	RETLW	18
	RETLW	146
	RETLW	2
	RETLW	128
	RETLW	64
	RETLW	128
	RETLW	40
	RETLW	16
	RETLW	162
	RETLW	254
	RETLW	8
	RETLW	130
	RETLW	4
	RETLW	128
	RETLW	2
	RETLW	168
	RETLW	144
	RETLW	136
	RETLW	136
	RETLW	168
	RETLW	252
	RETLW	168
	RETLW	16
	RETLW	144
	RETLW	128
	RETLW	32
	RETLW	130
	RETLW	8
	RETLW	16
	RETLW	136
	RETLW	40
	RETLW	40
	RETLW	16
	RETLW	168
	RETLW	124
	RETLW	128
	RETLW	64
	RETLW	128
	RETLW	80
	RETLW	160
	RETLW	200
	RETLW	16
	RETLW	0
	RETLW	130
	RETLW	16
	RETLW	68

;********************************************************************************

GLOBAL	GLCDCHARCOL5
GLCDCHARCOL5:
	MOVLW	113
	SUBWF	SYSSTRINGA, W
	BTFSC	STATUS,0
	RETLW	0
	MOVF	SYSSTRINGA, W
	ADDLW	LOW TABLEGLCDCHARCOL5
	MOVWF	SYSSTRINGA
	MOVLW	(HIGH TABLEGLCDCHARCOL5) & 127
	BTFSC	STATUS,0
	ADDLW	1
	MOVWF	PCLATH
	MOVF	SYSSTRINGA, W
	MOVWF	PCL
GLOBAL	TABLEGLCDCHARCOL5
TABLEGLCDCHARCOL5:
	RETLW	112
	RETLW	124
	RETLW	124
	RETLW	0
	RETLW	0
	RETLW	238
	RETLW	238
	RETLW	124
	RETLW	168
	RETLW	254
	RETLW	254
	RETLW	84
	RETLW	84
	RETLW	148
	RETLW	148
	RETLW	124
	RETLW	124
	RETLW	0
	RETLW	158
	RETLW	0
	RETLW	40
	RETLW	254
	RETLW	16
	RETLW	170
	RETLW	6
	RETLW	68
	RETLW	68
	RETLW	124
	RETLW	124
	RETLW	96
	RETLW	16
	RETLW	192
	RETLW	16
	RETLW	146
	RETLW	254
	RETLW	162
	RETLW	138
	RETLW	36
	RETLW	138
	RETLW	146
	RETLW	226
	RETLW	146
	RETLW	146
	RETLW	108
	RETLW	108
	RETLW	68
	RETLW	40
	RETLW	68
	RETLW	162
	RETLW	242
	RETLW	34
	RETLW	146
	RETLW	130
	RETLW	130
	RETLW	146
	RETLW	18
	RETLW	146
	RETLW	16
	RETLW	254
	RETLW	130
	RETLW	40
	RETLW	128
	RETLW	24
	RETLW	16
	RETLW	130
	RETLW	18
	RETLW	162
	RETLW	50
	RETLW	146
	RETLW	254
	RETLW	128
	RETLW	128
	RETLW	112
	RETLW	16
	RETLW	224
	RETLW	146
	RETLW	130
	RETLW	16
	RETLW	130
	RETLW	2
	RETLW	128
	RETLW	4
	RETLW	168
	RETLW	136
	RETLW	136
	RETLW	136
	RETLW	168
	RETLW	18
	RETLW	168
	RETLW	8
	RETLW	250
	RETLW	136
	RETLW	80
	RETLW	254
	RETLW	240
	RETLW	8
	RETLW	136
	RETLW	40
	RETLW	40
	RETLW	8
	RETLW	168
	RETLW	144
	RETLW	128
	RETLW	128
	RETLW	96
	RETLW	32
	RETLW	160
	RETLW	168
	RETLW	108
	RETLW	254
	RETLW	108
	RETLW	16
	RETLW	66

;********************************************************************************

GLOBAL	GLCDCHARCOL6
GLCDCHARCOL6:
	MOVLW	113
	SUBWF	SYSSTRINGA, W
	BTFSC	STATUS,0
	RETLW	0
	MOVF	SYSSTRINGA, W
	ADDLW	LOW TABLEGLCDCHARCOL6
	MOVWF	SYSSTRINGA
	MOVLW	(HIGH TABLEGLCDCHARCOL6) & 127
	BTFSC	STATUS,0
	ADDLW	1
	MOVWF	PCLATH
	MOVF	SYSSTRINGA, W
	MOVWF	PCL
GLOBAL	TABLEGLCDCHARCOL6
TABLEGLCDCHARCOL6:
	RETLW	112
	RETLW	56
	RETLW	254
	RETLW	12
	RETLW	10
	RETLW	204
	RETLW	102
	RETLW	124
	RETLW	32
	RETLW	4
	RETLW	64
	RETLW	56
	RETLW	16
	RETLW	162
	RETLW	136
	RETLW	112
	RETLW	28
	RETLW	0
	RETLW	0
	RETLW	14
	RETLW	254
	RETLW	84
	RETLW	200
	RETLW	68
	RETLW	0
	RETLW	130
	RETLW	56
	RETLW	16
	RETLW	16
	RETLW	0
	RETLW	16
	RETLW	0
	RETLW	8
	RETLW	138
	RETLW	128
	RETLW	146
	RETLW	150
	RETLW	254
	RETLW	138
	RETLW	146
	RETLW	18
	RETLW	146
	RETLW	82
	RETLW	0
	RETLW	0
	RETLW	130
	RETLW	40
	RETLW	40
	RETLW	18
	RETLW	130
	RETLW	36
	RETLW	146
	RETLW	130
	RETLW	68
	RETLW	146
	RETLW	18
	RETLW	146
	RETLW	16
	RETLW	130
	RETLW	126
	RETLW	68
	RETLW	128
	RETLW	4
	RETLW	32
	RETLW	130
	RETLW	18
	RETLW	66
	RETLW	82
	RETLW	146
	RETLW	2
	RETLW	128
	RETLW	64
	RETLW	128
	RETLW	40
	RETLW	16
	RETLW	138
	RETLW	130
	RETLW	32
	RETLW	254
	RETLW	4
	RETLW	128
	RETLW	8
	RETLW	168
	RETLW	136
	RETLW	136
	RETLW	144
	RETLW	168
	RETLW	2
	RETLW	168
	RETLW	8
	RETLW	128
	RETLW	122
	RETLW	136
	RETLW	128
	RETLW	8
	RETLW	8
	RETLW	136
	RETLW	40
	RETLW	48
	RETLW	8
	RETLW	168
	RETLW	128
	RETLW	64
	RETLW	64
	RETLW	128
	RETLW	80
	RETLW	160
	RETLW	152
	RETLW	130
	RETLW	0
	RETLW	16
	RETLW	32
	RETLW	68

;********************************************************************************

GLOBAL	GLCDCHARCOL7
GLCDCHARCOL7:
	MOVLW	113
	SUBWF	SYSSTRINGA, W
	BTFSC	STATUS,0
	RETLW	0
	MOVF	SYSSTRINGA, W
	ADDLW	LOW TABLEGLCDCHARCOL7
	MOVWF	SYSSTRINGA
	MOVLW	(HIGH TABLEGLCDCHARCOL7) & 127
	BTFSC	STATUS,0
	ADDLW	1
	MOVWF	PCLATH
	MOVF	SYSSTRINGA, W
	MOVWF	PCL
GLOBAL	TABLEGLCDCHARCOL7
TABLEGLCDCHARCOL7:
	RETLW	112
	RETLW	16
	RETLW	0
	RETLW	10
	RETLW	6
	RETLW	136
	RETLW	34
	RETLW	56
	RETLW	62
	RETLW	8
	RETLW	32
	RETLW	16
	RETLW	16
	RETLW	128
	RETLW	128
	RETLW	64
	RETLW	4
	RETLW	0
	RETLW	0
	RETLW	0
	RETLW	40
	RETLW	36
	RETLW	196
	RETLW	160
	RETLW	0
	RETLW	0
	RETLW	0
	RETLW	40
	RETLW	16
	RETLW	0
	RETLW	16
	RETLW	0
	RETLW	4
	RETLW	124
	RETLW	0
	RETLW	140
	RETLW	98
	RETLW	32
	RETLW	114
	RETLW	96
	RETLW	14
	RETLW	108
	RETLW	60
	RETLW	0
	RETLW	0
	RETLW	0
	RETLW	40
	RETLW	16
	RETLW	12
	RETLW	124
	RETLW	248
	RETLW	108
	RETLW	68
	RETLW	56
	RETLW	130
	RETLW	2
	RETLW	244
	RETLW	254
	RETLW	0
	RETLW	2
	RETLW	130
	RETLW	128
	RETLW	254
	RETLW	254
	RETLW	124
	RETLW	12
	RETLW	188
	RETLW	140
	RETLW	100
	RETLW	2
	RETLW	126
	RETLW	62
	RETLW	126
	RETLW	198
	RETLW	14
	RETLW	134
	RETLW	0
	RETLW	64
	RETLW	0
	RETLW	8
	RETLW	128
	RETLW	0
	RETLW	240
	RETLW	112
	RETLW	64
	RETLW	254
	RETLW	48
	RETLW	4
	RETLW	120
	RETLW	240
	RETLW	0
	RETLW	0
	RETLW	0
	RETLW	0
	RETLW	240
	RETLW	240
	RETLW	112
	RETLW	16
	RETLW	248
	RETLW	16
	RETLW	64
	RETLW	64
	RETLW	248
	RETLW	56
	RETLW	120
	RETLW	136
	RETLW	120
	RETLW	136
	RETLW	0
	RETLW	0
	RETLW	0
	RETLW	16
	RETLW	120

;********************************************************************************

;OVERLOADED SIGNATURE: WORD:WORD:STRING:, SOURCE: GLCD.H (981)
GLOBAL	GLCDPRINT6
GLCDPRINT6:
;GLCD.h Sub GLCDPrint
;Dim GLCDPrintLoc  as word
;Dim GLCDPrint_String_Counter, GLCDPrintLen as byte
;GLCDPrintLen = LCDPrintData(0)
	BANKSEL	SYSLCDPRINTDATAHANDLER
	MOVF	SYSLCDPRINTDATAHANDLER,W
	MOVWF	FSR0L
	MOVF	SYSLCDPRINTDATAHANDLER_H,W
	MOVWF	FSR0H
	MOVF	INDF0,W
	BANKSEL	GLCDPRINTLEN
	MOVWF	GLCDPRINTLEN
;If GLCDPrintLen = 0 Then Exit Sub
	MOVF	GLCDPRINTLEN,F
	BTFSC	STATUS,2
;If GLCDPrintLen = 0 Then Exit Sub
	RETURN
;If GLCDPrintLen = 0 Then Exit Sub
;GLCDPrintLoc = PrintLocX
	MOVF	PRINTLOCX,W
	MOVWF	GLCDPRINTLOC
	MOVF	PRINTLOCX_H,W
	MOVWF	GLCDPRINTLOC_H
;Write Data
;For GLCDPrint_String_Counter = 1 To GLCDPrintLen
	MOVLW	1
	MOVWF	GLCDPRINT_STRING_COUNTER
GLOBAL	SYSFORLOOP4
SYSFORLOOP4:
;GLCDDrawChar  GLCDPrintLoc, PrintLocY, LCDPrintData(GLCDPrint_String_Counter)
	MOVF	GLCDPRINTLOC,W
	MOVWF	CHARLOCX
	MOVF	GLCDPRINTLOC_H,W
	MOVWF	CHARLOCX_H
	MOVF	PRINTLOCY,W
	MOVWF	CHARLOCY
	MOVF	PRINTLOCY_H,W
	MOVWF	CHARLOCY_H
	MOVF	GLCDPRINT_STRING_COUNTER,W
	BANKSEL	SYSLCDPRINTDATAHANDLER
	ADDWF	SYSLCDPRINTDATAHANDLER,W
	MOVWF	FSR0L
	MOVLW	0
	ADDWFC	SYSLCDPRINTDATAHANDLER_H,W
	MOVWF	FSR0H
	MOVF	INDF0,W
	BANKSEL	CHARCODE
	MOVWF	CHARCODE
	MOVF	GLCDFOREGROUND,W
	MOVWF	LINECOLOUR
	MOVF	GLCDFOREGROUND_H,W
	MOVWF	LINECOLOUR_H
	FCALL	GLCDDRAWCHAR_SSD1306
;GLCDPrintIncrementPixelPositionMacro
;Macro Source: glcd.h (1219)
;GLCDPrintLoc = GLCDPrintLoc + ( GLCDFontWidth * GLCDfntDefaultsize )+1
	MOVF	GLCDFONTWIDTH,W
	MOVWF	SYSBYTETEMPA
	MOVF	GLCDFNTDEFAULTSIZE,W
	MOVWF	SYSBYTETEMPB
	CALL	SYSMULTSUB
	MOVF	SYSBYTETEMPX,W
	BANKSEL	SYSTEMP2
	MOVWF	SYSTEMP2
	BANKSEL	GLCDPRINTLOC
	ADDWF	GLCDPRINTLOC,W
	BANKSEL	SYSTEMP1
	MOVWF	SYSTEMP1
	MOVLW	0
	BANKSEL	GLCDPRINTLOC_H
	ADDWFC	GLCDPRINTLOC_H,W
	BANKSEL	SYSTEMP1_H
	MOVWF	SYSTEMP1_H
	MOVLW	1
	ADDWF	SYSTEMP1,W
	BANKSEL	GLCDPRINTLOC
	MOVWF	GLCDPRINTLOC
	MOVLW	0
	BANKSEL	SYSTEMP1_H
	ADDWFC	SYSTEMP1_H,W
	BANKSEL	GLCDPRINTLOC_H
	MOVWF	GLCDPRINTLOC_H
;Next
;POSITIVE VALUE STEP HANDLER IN FOR-NEXT STATEMENT :#4P 
	MOVF	GLCDPRINT_STRING_COUNTER,W
	SUBWF	GLCDPRINTLEN,W
	BANKSEL	SYSTEMP2
	MOVWF	SYSTEMP2
	MOVWF	SYSBYTETEMPA
	CLRF	SYSBYTETEMPB
	BANKSEL	STATUS
	CALL	SYSCOMPEQUAL
	COMF	SYSBYTETEMPX,F
	BTFSS	SYSBYTETEMPX,0
	GOTO	ENDIF14
;SET LOOPVAR TO LOOPVAR + STEPVALUE WHERE STEPVALUE IS A POSITIVE VALUE
	INCF	GLCDPRINT_STRING_COUNTER,F
	GOTO	SYSFORLOOP4
;END IF
GLOBAL	ENDIF14
ENDIF14:
GLOBAL	SYSFORLOOPEND4
SYSFORLOOPEND4:
;Update the current X position for GLCDPrintString
;PrintLocX = GLCDPrintLoc
	MOVF	GLCDPRINTLOC,W
	MOVWF	PRINTLOCX
	MOVF	GLCDPRINTLOC_H,W
	MOVWF	PRINTLOCX_H
	RETURN

;********************************************************************************

;SOURCE: HWI2C.H (257)
GLOBAL	HI2CMODE
HI2CMODE:
;asm showdebug  This method sets the variable `HI2CCurrentMode`, and, if required, sets the SSPCON1.bits
;#ifdef var(SSPCON1) added to separate from newer i2C module which does not have an SSPCON1
;set SSPSTAT.SMP on
	BANKSEL	SSP1STAT
	BSF	SSP1STAT,7
;set SSPCON1.CKP on
	BSF	SSP1CON1,4
;set SSPCON1.WCOL Off
	BCF	SSP1CON1,7
;Select mode and clock
;If HI2CCurrentMode = Master Then
	MOVLW	12
	BANKSEL	HI2CCURRENTMODE
	SUBWF	HI2CCURRENTMODE,W
	BTFSS	STATUS,2
	GOTO	ENDIF47
;set SSPCON1.SSPM3 on
	BANKSEL	SSP1CON1
	BSF	SSP1CON1,3
;set SSPCON1.SSPM2 off
	BCF	SSP1CON1,2
;set SSPCON1.SSPM1 off
	BCF	SSP1CON1,1
;set SSPCON1.SSPM0 off
	BCF	SSP1CON1,0
;SSPADD = HI2C_BAUD_TEMP and 127
	MOVLW	19
	MOVWF	SSP1ADD
;end if
GLOBAL	ENDIF47
ENDIF47:
;if HI2CCurrentMode = Slave then
	BANKSEL	HI2CCURRENTMODE
	MOVF	HI2CCURRENTMODE,F
	BTFSS	STATUS,2
	GOTO	ENDIF48
;set SSPCON1.SSPM3 off
	BANKSEL	SSP1CON1
	BCF	SSP1CON1,3
;set SSPCON1.SSPM2 on
	BSF	SSP1CON1,2
;set SSPCON1.SSPM1 on
	BSF	SSP1CON1,1
;set SSPCON1.SSPM0 off
	BCF	SSP1CON1,0
;end if
GLOBAL	ENDIF48
ENDIF48:
;if HI2CCurrentMode = Slave10 then
	MOVLW	3
	BANKSEL	HI2CCURRENTMODE
	SUBWF	HI2CCURRENTMODE,W
	BTFSS	STATUS,2
	GOTO	ENDIF49
;set SSPCON1.SSPM3 off
	BANKSEL	SSP1CON1
	BCF	SSP1CON1,3
;set SSPCON1.SSPM2 on
	BSF	SSP1CON1,2
;set SSPCON1.SSPM1 on
	BSF	SSP1CON1,1
;set SSPCON1.SSPM0 on
	BSF	SSP1CON1,0
;end if
GLOBAL	ENDIF49
ENDIF49:
;Enable I2C
;set SSPCON1.SSPEN on
	BANKSEL	SSP1CON1
	BSF	SSP1CON1,5
	BANKSEL	STATUS
	RETURN

;********************************************************************************

;SOURCE: HWI2C.H (428)
GLOBAL	HI2CSEND
HI2CSEND:
;asm showdebug  This method sets the registers and register bits to send I2C data
GLOBAL	RETRYHI2CSEND
RETRYHI2CSEND:
;Clear WCOL
;SET SSPCON1.WCOL OFF
	BANKSEL	SSP1CON1
	BCF	SSP1CON1,7
;Load data to send
;SSPBUF = I2CByte
	BANKSEL	I2CBYTE
	MOVF	I2CBYTE,W
	BANKSEL	SSP1BUF
	MOVWF	SSP1BUF
;HI2CWaitMSSP
	BANKSEL	STATUS
	FCALL	HI2CWAITMSSP
;if ACKSTAT =  1 then
	BANKSEL	SSP1CON2
	BTFSS	SSP1CON2,6
	GOTO	ELSE38_1
;HI2CAckPollState = true
	MOVLW	255
	BANKSEL	HI2CACKPOLLSTATE
	MOVWF	HI2CACKPOLLSTATE
;else
	GOTO	ENDIF38
GLOBAL	ELSE38_1
ELSE38_1:
;HI2CAckPollState = false
	BANKSEL	HI2CACKPOLLSTATE
	CLRF	HI2CACKPOLLSTATE
;end if
GLOBAL	ENDIF38
ENDIF38:
;If SSPCON1.WCOL = On Then
	BANKSEL	SSP1CON1
	BTFSS	SSP1CON1,7
	GOTO	ENDIF39
;If HI2CCurrentMode <= 10 Then Goto RetryHI2CSend
	BANKSEL	HI2CCURRENTMODE
	MOVF	HI2CCURRENTMODE,W
	SUBLW	10
	BTFSC	STATUS,0
;If HI2CCurrentMode <= 10 Then Goto RetryHI2CSend
	GOTO	RETRYHI2CSEND
;If HI2CCurrentMode <= 10 Then Goto RetryHI2CSend
;End If
GLOBAL	ENDIF39
ENDIF39:
;Release clock (only needed by slave)
;If HI2CCurrentMode <= 10 Then Set SSPCON1.CKP On
	BANKSEL	HI2CCURRENTMODE
	MOVF	HI2CCURRENTMODE,W
	SUBLW	10
	BTFSS	STATUS,0
	GOTO	ENDIF40
;If HI2CCurrentMode <= 10 Then Set SSPCON1.CKP On
	BANKSEL	SSP1CON1
	BSF	SSP1CON1,4
;If HI2CCurrentMode <= 10 Then Set SSPCON1.CKP On
GLOBAL	ENDIF40
ENDIF40:
	BANKSEL	STATUS
	RETURN

;********************************************************************************

;SOURCE: HWI2C.H (312)
GLOBAL	HI2CSTART
HI2CSTART:
;asm showdebug  This method sets the registers and register bits to generate the I2C  START signal
;If HI2CCurrentMode > 10 Then
	MOVF	HI2CCURRENTMODE,W
	SUBLW	10
	BTFSC	STATUS,0
	GOTO	ELSE36_1
;Master_mode operational
;Set SEN On
	BANKSEL	SSP1CON2
	BSF	SSP1CON2,0
;HI2CWaitMSSP
	BANKSEL	STATUS
	CALL	HI2CWAITMSSP
;Else
	GOTO	ENDIF36
GLOBAL	ELSE36_1
ELSE36_1:
;Slave mode operational
;Wait Until SSPSTAT.S = On
GLOBAL	SYSWAITLOOP1
SYSWAITLOOP1:
	BANKSEL	SSP1STAT
	BTFSS	SSP1STAT,3
	GOTO	SYSWAITLOOP1
;End If
GLOBAL	ENDIF36
ENDIF36:
	BANKSEL	STATUS
	RETURN

;********************************************************************************

;SOURCE: HWI2C.H (362)
GLOBAL	HI2CSTOP
HI2CSTOP:
;Master_mode
;If HI2CCurrentMode > 10 Then
	MOVF	HI2CCURRENTMODE,W
	SUBLW	10
	BTFSC	STATUS,0
	GOTO	ELSE37_1
;set SSPIE OFF; disable SSP interrupt, tested by Anobium but not implemented.
;wait while R_NOT_W = 1   'wait for completion of activities
GLOBAL	SYSWAITLOOP2
SYSWAITLOOP2:
	BANKSEL	SSP1STAT
	BTFSC	SSP1STAT,2
	GOTO	SYSWAITLOOP2
;Set SSPCON2.PEN On
	BSF	SSP1CON2,2
;Set SSPCON2.PEN On
	BSF	SSP1CON2,2
;HI2CWaitMSSP
	BANKSEL	STATUS
	FCALL	HI2CWAITMSSP
;Slave mode
;Else
	GOTO	ENDIF37
GLOBAL	ELSE37_1
ELSE37_1:
;Wait Until SSPSTAT.P = On
GLOBAL	SYSWAITLOOP3
SYSWAITLOOP3:
	BANKSEL	SSP1STAT
	BTFSS	SSP1STAT,4
	GOTO	SYSWAITLOOP3
;End If
GLOBAL	ENDIF37
ENDIF37:
	BANKSEL	STATUS
	RETURN

;********************************************************************************

;SOURCE: HWI2C.H (515)
GLOBAL	HI2CWAITMSSP
HI2CWAITMSSP:
;HI2CWaitMSSPTimeout = 0
	CLRF	HI2CWAITMSSPTIMEOUT
GLOBAL	HI2CWAITMSSPWAIT
HI2CWAITMSSPWAIT:
;HI2CWaitMSSPTimeout++
	BANKSEL	HI2CWAITMSSPTIMEOUT
	INCF	HI2CWAITMSSPTIMEOUT,F
;if HI2CWaitMSSPTimeout < 255 then
	MOVLW	255
	SUBWF	HI2CWAITMSSPTIMEOUT,W
	BTFSC	STATUS,0
	GOTO	ENDIF42
;'Support for SSP1IF
;if SSP1IF = 0 then goto HI2CWaitMSSPWait
	BANKSEL	PIR5
	BTFSS	PIR5,2
;if SSP1IF = 0 then goto HI2CWaitMSSPWait
	GOTO	HI2CWAITMSSPWAIT
;if SSP1IF = 0 then goto HI2CWaitMSSPWait
;SSP1IF = 0
	BCF	PIR5,2
;end if
GLOBAL	ENDIF42
ENDIF42:
	BANKSEL	STATUS
	RETURN

;********************************************************************************

;SOURCE: RANDOM.H (41)
GLOBAL	FN_RANDOM
FN_RANDOM:
;Repeat 7
	MOVLW	7
	BANKSEL	SYSREPEATTEMP10
	MOVWF	SYSREPEATTEMP10
GLOBAL	SYSREPEATLOOP10
SYSREPEATLOOP10:
;Dim RandomTemp As Word
;Dim RandomSeed As Word
;RandomTemp = RandomSeed
	BANKSEL	RANDOMSEED
	MOVF	RANDOMSEED,W
	MOVWF	RANDOMTEMP
	MOVF	RANDOMSEED_H,W
	MOVWF	RANDOMTEMP_H
;Rotate RandomTemp Left Simple
	RLF	RANDOMTEMP_H,W
	RLF	RANDOMTEMP,F
	RLF	RANDOMTEMP_H,F
;Taps at 16, 15, 13, 11, And with b'1101 0100 0000 0000' = D800
;Expanded below calculation to reduce complexity of calc
;RandomSeed = RandomTemp XOR (Not (RandomSeed And 1) + 1 And 0xB400)
	MOVLW	1
	ANDWF	RANDOMSEED,W
	BANKSEL	SYSTEMP1
	MOVWF	SYSTEMP1
	CLRF	SYSTEMP1_H
	COMF	SYSTEMP1,W
	MOVWF	SYSTEMP2
	COMF	SYSTEMP1_H,W
	MOVWF	SYSTEMP2_H
	MOVLW	1
	ADDWF	SYSTEMP2,W
	MOVWF	SYSTEMP1
	MOVLW	0
	ADDWFC	SYSTEMP2_H,W
	MOVWF	SYSTEMP1_H
	CLRF	SYSTEMP2
	MOVLW	180
	ANDWF	SYSTEMP1_H,W
	MOVWF	SYSTEMP2_H
	BANKSEL	RANDOMTEMP
	MOVF	RANDOMTEMP,W
	BANKSEL	SYSTEMP2
	XORWF	SYSTEMP2,W
	BANKSEL	RANDOMSEED
	MOVWF	RANDOMSEED
	MOVF	RANDOMTEMP_H,W
	BANKSEL	SYSTEMP2_H
	XORWF	SYSTEMP2_H,W
	BANKSEL	RANDOMSEED_H
	MOVWF	RANDOMSEED_H
;Expanded below calculation to reduce complexity of calc
;RandomSeed = Not (RandomSeed And 1) + 1
;RandomSeed = RandomSeed And 0xB400
;RandomSeed = RandomTemp XOR RandomSeed
;Random = Random Xor RandomSeed_H
	MOVF	RANDOM,W
	XORWF	RANDOMSEED_H,W
	MOVWF	RANDOM
;End Repeat
	BANKSEL	SYSREPEATTEMP10
	DECFSZ	SYSREPEATTEMP10,F
	GOTO	SYSREPEATLOOP10
GLOBAL	SYSREPEATLOOPEND10
SYSREPEATLOOPEND10:
	BANKSEL	STATUS
	RETURN

;********************************************************************************

GLOBAL	SPRITE1
SPRITE1:
	MOVLW	9
	SUBWF	SYSSTRINGA, W
	BTFSC	STATUS,0
	RETLW	0
	MOVF	SYSSTRINGA, W
	ADDLW	LOW TABLESPRITE1
	MOVWF	SYSSTRINGA
	MOVLW	(HIGH TABLESPRITE1) & 127
	BTFSC	STATUS,0
	ADDLW	1
	MOVWF	PCLATH
	MOVF	SYSSTRINGA, W
	MOVWF	PCL
GLOBAL	TABLESPRITE1
TABLESPRITE1:
	RETLW	8
	RETLW	0
	RETLW	0
	RETLW	128
	RETLW	255
	RETLW	56
	RETLW	0
	RETLW	0
	RETLW	255

;********************************************************************************

GLOBAL	SPRITE2
SPRITE2:
	MOVLW	9
	SUBWF	SYSSTRINGA, W
	BTFSC	STATUS,0
	RETLW	0
	MOVF	SYSSTRINGA, W
	ADDLW	LOW TABLESPRITE2
	MOVWF	SYSSTRINGA
	MOVLW	(HIGH TABLESPRITE2) & 127
	BTFSC	STATUS,0
	ADDLW	1
	MOVWF	PCLATH
	MOVF	SYSSTRINGA, W
	MOVWF	PCL
GLOBAL	TABLESPRITE2
TABLESPRITE2:
	RETLW	8
	RETLW	0
	RETLW	60
	RETLW	64
	RETLW	255
	RETLW	68
	RETLW	0
	RETLW	60
	RETLW	195

;********************************************************************************

GLOBAL	SPRITE3
SPRITE3:
	MOVLW	9
	SUBWF	SYSSTRINGA, W
	BTFSC	STATUS,0
	RETLW	0
	MOVF	SYSSTRINGA, W
	ADDLW	LOW TABLESPRITE3
	MOVWF	SYSSTRINGA
	MOVLW	(HIGH TABLESPRITE3) & 127
	BTFSC	STATUS,0
	ADDLW	1
	MOVWF	PCLATH
	MOVF	SYSSTRINGA, W
	MOVWF	PCL
GLOBAL	TABLESPRITE3
TABLESPRITE3:
	RETLW	8
	RETLW	0
	RETLW	90
	RETLW	32
	RETLW	255
	RETLW	130
	RETLW	60
	RETLW	102
	RETLW	165

;********************************************************************************

GLOBAL	SPRITE4
SPRITE4:
	MOVLW	9
	SUBWF	SYSSTRINGA, W
	BTFSC	STATUS,0
	RETLW	0
	MOVF	SYSSTRINGA, W
	ADDLW	LOW TABLESPRITE4
	MOVWF	SYSSTRINGA
	MOVLW	(HIGH TABLESPRITE4) & 127
	BTFSC	STATUS,0
	ADDLW	1
	MOVWF	PCLATH
	MOVF	SYSSTRINGA, W
	MOVWF	PCL
GLOBAL	TABLESPRITE4
TABLESPRITE4:
	RETLW	8
	RETLW	0
	RETLW	90
	RETLW	16
	RETLW	255
	RETLW	24
	RETLW	60
	RETLW	90
	RETLW	165

;********************************************************************************

GLOBAL	SPRITE5
SPRITE5:
	MOVLW	9
	SUBWF	SYSSTRINGA, W
	BTFSC	STATUS,0
	RETLW	0
	MOVF	SYSSTRINGA, W
	ADDLW	LOW TABLESPRITE5
	MOVWF	SYSSTRINGA
	MOVLW	(HIGH TABLESPRITE5) & 127
	BTFSC	STATUS,0
	ADDLW	1
	MOVWF	PCLATH
	MOVF	SYSSTRINGA, W
	MOVWF	PCL
GLOBAL	TABLESPRITE5
TABLESPRITE5:
	RETLW	8
	RETLW	0
	RETLW	90
	RETLW	8
	RETLW	255
	RETLW	130
	RETLW	60
	RETLW	90
	RETLW	165

;********************************************************************************

GLOBAL	SPRITE6
SPRITE6:
	MOVLW	9
	SUBWF	SYSSTRINGA, W
	BTFSC	STATUS,0
	RETLW	0
	MOVF	SYSSTRINGA, W
	ADDLW	LOW TABLESPRITE6
	MOVWF	SYSSTRINGA
	MOVLW	(HIGH TABLESPRITE6) & 127
	BTFSC	STATUS,0
	ADDLW	1
	MOVWF	PCLATH
	MOVF	SYSSTRINGA, W
	MOVWF	PCL
GLOBAL	TABLESPRITE6
TABLESPRITE6:
	RETLW	8
	RETLW	0
	RETLW	90
	RETLW	4
	RETLW	255
	RETLW	68
	RETLW	60
	RETLW	102
	RETLW	165

;********************************************************************************

GLOBAL	SPRITE7
SPRITE7:
	MOVLW	9
	SUBWF	SYSSTRINGA, W
	BTFSC	STATUS,0
	RETLW	0
	MOVF	SYSSTRINGA, W
	ADDLW	LOW TABLESPRITE7
	MOVWF	SYSSTRINGA
	MOVLW	(HIGH TABLESPRITE7) & 127
	BTFSC	STATUS,0
	ADDLW	1
	MOVWF	PCLATH
	MOVF	SYSSTRINGA, W
	MOVWF	PCL
GLOBAL	TABLESPRITE7
TABLESPRITE7:
	RETLW	8
	RETLW	0
	RETLW	60
	RETLW	2
	RETLW	255
	RETLW	56
	RETLW	0
	RETLW	60
	RETLW	195

;********************************************************************************

GLOBAL	SPRITE8
SPRITE8:
	MOVLW	9
	SUBWF	SYSSTRINGA, W
	BTFSC	STATUS,0
	RETLW	0
	MOVF	SYSSTRINGA, W
	ADDLW	LOW TABLESPRITE8
	MOVWF	SYSSTRINGA
	MOVLW	(HIGH TABLESPRITE8) & 127
	BTFSC	STATUS,0
	ADDLW	1
	MOVWF	PCLATH
	MOVF	SYSSTRINGA, W
	MOVWF	PCL
GLOBAL	TABLESPRITE8
TABLESPRITE8:
	RETLW	8
	RETLW	0
	RETLW	0
	RETLW	1
	RETLW	255
	RETLW	0
	RETLW	0
	RETLW	0
	RETLW	255

;********************************************************************************

;SOURCE: STDBASIC.H (301)
GLOBAL	FN_SWAP4
FN_SWAP4:
;swapf Swap4In, W
	BANKSEL	SWAP4IN
	SWAPF	SWAP4IN, W
;movwf swap4
	MOVWF	SWAP4
	BANKSEL	STATUS
	RETURN

;********************************************************************************

;SOURCE: SYSTEM.H (3078)
GLOBAL	SYSCOMPEQUAL
SYSCOMPEQUAL:
;Dim SysByteTempA, SysByteTempB, SysByteTempX as byte
;clrf SysByteTempX
	CLRF	SYSBYTETEMPX
;movf SysByteTempA, W
	MOVF	SYSBYTETEMPA, W
;subwf SysByteTempB, W
	SUBWF	SYSBYTETEMPB, W
;btfsc STATUS, Z
	BTFSC	STATUS,2
;comf SysByteTempX,F
	COMF	SYSBYTETEMPX,F
	RETURN

;********************************************************************************

;SOURCE: SYSTEM.H (3104)
GLOBAL	SYSCOMPEQUAL16
SYSCOMPEQUAL16:
;dim SysWordTempA as word
;dim SysWordTempB as word
;dim SysByteTempX as byte
;clrf SysByteTempX
	CLRF	SYSBYTETEMPX
;Test low, exit if false
;movf SysWordTempA, W
	MOVF	SYSWORDTEMPA, W
;subwf SysWordTempB, W
	SUBWF	SYSWORDTEMPB, W
;btfss STATUS, Z
	BTFSS	STATUS,2
;return
	RETURN
;Test high, exit if false
;movf SysWordTempA_H, W
	MOVF	SYSWORDTEMPA_H, W
;subwf SysWordTempB_H, W
	SUBWF	SYSWORDTEMPB_H, W
;btfss STATUS, Z
	BTFSS	STATUS,2
;return
	RETURN
;comf SysByteTempX,F
	COMF	SYSBYTETEMPX,F
	RETURN

;********************************************************************************

;SOURCE: SYSTEM.H (3413)
GLOBAL	SYSCOMPLESSTHAN16
SYSCOMPLESSTHAN16:
;dim SysWordTempA as word
;dim SysWordTempB as word
;dim SysByteTempX as byte
;clrf SysByteTempX
	CLRF	SYSBYTETEMPX
;Test High, exit if more
;movf SysWordTempA_H,W
	MOVF	SYSWORDTEMPA_H,W
;subwf SysWordTempB_H,W
	SUBWF	SYSWORDTEMPB_H,W
;btfss STATUS,C
	BTFSS	STATUS,0
;return
	RETURN
;Test high, exit true if less
;movf SysWordTempB_H,W
	MOVF	SYSWORDTEMPB_H,W
;subwf SysWordTempA_H,W
	SUBWF	SYSWORDTEMPA_H,W
;btfss STATUS,C
	BTFSS	STATUS,0
;goto SCLT16True
	GOTO	SCLT16TRUE
;Test Low, exit if more or equal
;movf SysWordTempB,W
	MOVF	SYSWORDTEMPB,W
;subwf SysWordTempA,W
	SUBWF	SYSWORDTEMPA,W
;btfsc STATUS,C
	BTFSC	STATUS,0
;return
	RETURN
GLOBAL	SCLT16TRUE
SCLT16TRUE:
;comf SysByteTempX,F
	COMF	SYSBYTETEMPX,F
	RETURN

;********************************************************************************

;SOURCE: SYSTEM.H (2793)
GLOBAL	SYSDIVSUB
SYSDIVSUB:
;dim SysByteTempA as byte
;dim SysByteTempB as byte
;dim SysByteTempX as byte
;Check for div/0
;movf SysByteTempB, F
	MOVF	SYSBYTETEMPB, F
;btfsc STATUS, Z
	BTFSC	STATUS,2
;return
	RETURN
;Main calc routine
;SysByteTempX = 0
	CLRF	SYSBYTETEMPX
;SysDivLoop = 8
	MOVLW	8
	MOVWF	SYSDIVLOOP
GLOBAL	SYSDIV8START
SYSDIV8START:
;bcf STATUS, C
	BCF	STATUS,0
;rlf SysByteTempA, F
	RLF	SYSBYTETEMPA, F
;rlf SysByteTempX, F
	RLF	SYSBYTETEMPX, F
;movf SysByteTempB, W
	MOVF	SYSBYTETEMPB, W
;subwf SysByteTempX, F
	SUBWF	SYSBYTETEMPX, F
;bsf SysByteTempA, 0
	BSF	SYSBYTETEMPA, 0
;btfsc STATUS, C
	BTFSC	STATUS,0
;goto Div8NotNeg
	GOTO	DIV8NOTNEG
;bcf SysByteTempA, 0
	BCF	SYSBYTETEMPA, 0
;movf SysByteTempB, W
	MOVF	SYSBYTETEMPB, W
;addwf SysByteTempX, F
	ADDWF	SYSBYTETEMPX, F
GLOBAL	DIV8NOTNEG
DIV8NOTNEG:
;decfsz SysDivLoop, F
	DECFSZ	SYSDIVLOOP, F
;goto SysDiv8Start
	GOTO	SYSDIV8START
	RETURN

;********************************************************************************

;SOURCE: SYSTEM.H (2518)
GLOBAL	SYSMULTSUB
SYSMULTSUB:
;dim SysByteTempA as byte
;dim SysByteTempB as byte
;dim SysByteTempX as byte
;clrf SysByteTempX
	CLRF	SYSBYTETEMPX
GLOBAL	MUL8LOOP
MUL8LOOP:
;movf SysByteTempA, W
	MOVF	SYSBYTETEMPA, W
;btfsc SysByteTempB, 0
	BTFSC	SYSBYTETEMPB, 0
;addwf SysByteTempX, F
	ADDWF	SYSBYTETEMPX, F
;bcf STATUS, C
	BCF	STATUS,0
;rrf SysByteTempB, F
	RRF	SYSBYTETEMPB, F
;bcf STATUS, C
	BCF	STATUS,0
;rlf SysByteTempA, F
	RLF	SYSBYTETEMPA, F
;movf SysByteTempB, F
	MOVF	SYSBYTETEMPB, F
;btfss STATUS, Z
	BTFSS	STATUS,2
;goto MUL8LOOP
	GOTO	MUL8LOOP
	RETURN

;********************************************************************************

GLOBAL	SYSSTRINGTABLES
SYSSTRINGTABLES:
	MOVF	SYSSTRINGA_H,W
	MOVWF	PCLATH
	MOVF	SYSSTRINGA,W
	INCF	SYSSTRINGA,F
	BTFSC	STATUS,2
	INCF	SYSSTRINGA_H,F
	MOVWF	PCL

GLOBAL	STRINGTABLE1
STRINGTABLE1:
	RETLW	15
	RETLW	71	;G
	RETLW	114	;R
	RETLW	101	;E
	RETLW	97	;A
	RETLW	116	;T
	RETLW	32	; 
	RETLW	67	;C
	RETLW	111	;O
	RETLW	119	;W
	RETLW	32	; 
	RETLW	66	;B
	RETLW	65	;A
	RETLW	83	;S
	RETLW	73	;I
	RETLW	67	;C


GLOBAL	STRINGTABLE2
STRINGTABLE2:
	RETLW	17
	RETLW	71	;G
	RETLW	76	;L
	RETLW	67	;C
	RETLW	68	;D
	RETLW	32	; 
	RETLW	76	;L
	RETLW	105	;I
	RETLW	98	;B
	RETLW	114	;R
	RETLW	97	;A
	RETLW	114	;R
	RETLW	121	;Y
	RETLW	32	; 
	RETLW	50	;2
	RETLW	48	;0
	RETLW	50	;2
	RETLW	50	;2


GLOBAL	STRINGTABLE3
STRINGTABLE3:
	RETLW	14
	RETLW	83	;S
	RETLW	112	;P
	RETLW	114	;R
	RETLW	105	;I
	RETLW	116	;T
	RETLW	101	;E
	RETLW	32	; 
	RETLW	83	;S
	RETLW	117	;U
	RETLW	112	;P
	RETLW	112	;P
	RETLW	111	;O
	RETLW	114	;R
	RETLW	116	;T


;********************************************************************************

;SOURCE: GLCD_SSD1306.H (224)
GLOBAL	WRITE_COMMAND_SSD1306
WRITE_COMMAND_SSD1306:
;HI2CStart
	CALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x00
	CLRF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend SSD1306SendByte
	MOVF	SSD1306SENDBYTE,W
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CStop
	LJMP	HI2CSTOP

;********************************************************************************

;SOURCE: GLCD_SSD1306.H (270)
GLOBAL	WRITE_DATA_SSD1306
WRITE_DATA_SSD1306:
;HI2CStart
	CALL	HI2CSTART
;HI2CSend GLCD_I2C_Address
	MOVLW	120
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend 0x40
	MOVLW	64
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CSend SSD1306SendByte
	MOVF	SSD1306SENDBYTE,W
	MOVWF	I2CBYTE
	FCALL	HI2CSEND
;HI2CStop
	LJMP	HI2CSTOP

;********************************************************************************

;START OF PROGRAM MEMORY PAGE 2
	PSECT	PROGMEM2,CLASS=CODE,SPACE=SPACE_CODE,DELTA=2, ABS, OVRLD 
	ORG	4096
;START OF PROGRAM MEMORY PAGE 3
	PSECT	PROGMEM3,CLASS=CODE,SPACE=SPACE_CODE,DELTA=2, ABS, OVRLD 
	ORG	6144
;START OF PROGRAM MEMORY PAGE 4
	PSECT	PROGMEM4,CLASS=CODE,SPACE=SPACE_CODE,DELTA=2, ABS, OVRLD 
	ORG	8192
;START OF PROGRAM MEMORY PAGE 5
	PSECT	PROGMEM5,CLASS=CODE,SPACE=SPACE_CODE,DELTA=2, ABS, OVRLD 
	ORG	10240
;START OF PROGRAM MEMORY PAGE 6
	PSECT	PROGMEM6,CLASS=CODE,SPACE=SPACE_CODE,DELTA=2, ABS, OVRLD 
	ORG	12288
;START OF PROGRAM MEMORY PAGE 7
	PSECT	PROGMEM7,CLASS=CODE,SPACE=SPACE_CODE,DELTA=2, ABS, OVRLD 
	ORG	14336
;
; Declare Power-On-Reset entry point
;
 END     RESETVEC
