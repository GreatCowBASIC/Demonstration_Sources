'''
'''This demonstration program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.
'''
'''This program shows how to draw sprites on an SSD1306 I2C device.
'''Only support I2C and Full GLCD Mode - supported from v1.xx onwards
'''
'''The #define 'spritechoice' defines the sprite to be managed.
'''You can define your own in the sprite tables. Each table is 8 pixles vertical - col1 to col8 in each table.
'''
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.01
'''@date    31.12.2020
' ----- Configuration

'Chip Settings.
#CHIP 18F16Q41
#OPTION Explicit

'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.2
    'PinManager data: v1.81.0
    'Generated for 18f16q41
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18f16q41

    Sub InitPPS

            'Module: I2C1
            I2C1SDAPPS = 0x0C;   //RB4->I2C1:SDA1;
            RB6PPS = 0x21;   //RB6->I2C1:SCL1;
            RB4PPS = 0x22;   //RB4->I2C1:SDA1;
            I2C1SCLPPS = 0x0E;   //RB6->I2C1:SCL1;

            'Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            'Module: UART1
            RC6PPS = 0x0010    'TX1 > RC6

    End Sub
    'Template comment at the end of the config file

'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   ---------------------SW------ADC--
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX---------LED--LED-LED LED--
''-----------------------------------------



'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATC

Dir     RC0         Out
Dir     RC1         Out
Dir     RC2         Out
Dir     RC3         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTA.2
Dir     SWITCHIN      In

'Setup Serial port
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING


' Define I2C settings
#DEFINE HI2C_BAUD_RATE 125
#DEFINE HI2C_DATA PORTB.4
#DEFINE HI2C_CLOCK PORTB.6
'Initialise I2C - note for the I2C module the ports need to be set to IN
Dir HI2C_DATA Out
Dir HI2C_CLOCK Out

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.
#INCLUDE <glcd.h>
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address 0x78
'These constants allow you to change the GLCD memory usage.
#DEFINE GLCD_PROTECTOVERRUN


'*******************************************************************************************
'Select the sprite and the user delay
#DEFINE spritechoice 2
'3ms is limit of user visual perception
#DEFINE spritedelay 2 ms

'*******************************************************************************************
'Draw initial screen
Box 0,0,127,63
GLCDPrint ( 2, 36, "GCBASIC")
GLCDPrint ( 2, 46, "GLCD Library 2023")
GLCDPrint ( 2, 54, "Sprite Support")
Wait 1 s
GLCDCLS
Box 0,0,127,63


'dimension and initialise variables
Dim oldx, oldy As Byte
Dim curx, cury As Byte
Dim dirx, diry As Byte

curx = 63
cury = 31
oldx = curx
oldy = cury

'Draw initial sprite
GLCDDrawSprite_SSD1306 curx,cury, spritechoice, GLCDForeground

'Set initial direction
If Random > 127 Then
    dirx=1
Else
    dirx=255
End If

If Random > 127 Then
    diry=1
Else
    diry=255
End If


Dir portc.0 Out

Do

    ' handle bounce
    If  curx>0 AND curx<119  Then
        oldx = curx
        curx=curx+dirx

    Else

        If dirx = 1 Then
            dirx=255
        Else
            dirx=1
        End If
        oldx = curx
        curx=curx+dirx

    End If


    If cury >1 AND cury<55 Then
        oldy = cury
        cury=cury+diry

    Else

        If diry = 1 Then
            diry=255
        Else
            diry=1
        End If
        oldy = cury
        cury=cury+diry

    End If
    ' end of handle bounce


    'draw sprite
    GLCDDrawSprite_SSD1306 oldx,oldy, spritechoice
    GLCDDrawSprite_SSD1306 curx,cury, spritechoice
    'pulse output for scope
    RC1 = !RC1
    'user delay
    'so you can see it!
    Wait spritedelay

Loop



End


Sub GLCDDrawSprite_SSD1306(In GLCDX As Byte, In GLCDY As Byte, In CharCode )

    Dim CurrCharVal, CurrCharCol, SSD1306_Page, GLCDHiChange, GLCDLoChange, GLCDRotateBits, GLCDTemp As Byte

    'Calculate device row
    SSD1306_Page = GLCDY
    Repeat 3
        Set C Off
        Rotate SSD1306_Page Right
    End Repeat
    ' SSD1306_Page is now the correct ROW

    'Calculate buffer element
    SSD1306_BufferLocationCalc = GLCDY AND 0xF8
    Repeat 4
        Set c Off
        Rotate SSD1306_BufferLocationCalc Left
    End Repeat
    SSD1306_BufferLocationCalc = (SSD1306_BufferLocationCalc OR GLCDX)
    'Increment as we do not use element 0 in the array
    SSD1306_BufferLocationCalc++
    'SSD1306_BufferLocationCalc is now the correct buffer element

    'is the y position of Sprite on a ROW positin 0?
    If ( GLCDY mod 8 ) = 0 Then

        'uses GLDX and SS1306_Page variables
        Cursor_Position_SSD1306_Fast

        'Read 8 pixels value into CurrCharVal then write to display
        Open_Transaction_SSD1306
        For CurrCharCol = 1 To 8
            Select Case CurrCharCol
            Case 1: ReadTable sprite1, CharCode, CurrCharVal
            Case 2: ReadTable sprite2, CharCode, CurrCharVal
            Case 3: ReadTable sprite3, CharCode, CurrCharVal
            Case 4: ReadTable sprite4, CharCode, CurrCharVal
            Case 5: ReadTable sprite5, CharCode, CurrCharVal
            Case 6: ReadTable sprite6, CharCode, CurrCharVal
            Case 7: ReadTable sprite7, CharCode, CurrCharVal
            Case 8: ReadTable sprite8, CharCode, CurrCharVal
            End Select

            'Xor pixels into buffer
            GLCDTemp = SSD1306_BufferAlias(SSD1306_BufferLocationCalc) XOR CurrCharVal
            SSD1306_BufferAlias(SSD1306_BufferLocationCalc) = GLCDTemp
            'Write buffer this will Increment the device point as part of the write operation
            Write_Transaction_Data_SSD1306(GLCDTemp)
            'Increment buffer by 1 to match device Increment
            SSD1306_BufferLocationCalc++
        Next
        Close_Transaction_SSD1306

    Else
        'handle TOP portion of the sprite as we are NOT at 0 pixel of a ROW
        'send the TOP pixels
        Cursor_Position_SSD1306_Fast

        Open_Transaction_SSD1306
        For CurrCharCol = 1 To 8
            Select Case CurrCharCol
            Case 1: ReadTable sprite1, CharCode, GLCDHiChange
            Case 2: ReadTable sprite2, CharCode, GLCDHiChange
            Case 3: ReadTable sprite3, CharCode, GLCDHiChange
            Case 4: ReadTable sprite4, CharCode, GLCDHiChange
            Case 5: ReadTable sprite5, CharCode, GLCDHiChange
            Case 6: ReadTable sprite6, CharCode, GLCDHiChange
            Case 7: ReadTable sprite7, CharCode, GLCDHiChange
            Case 8: ReadTable sprite8, CharCode, GLCDHiChange
            End Select

            'handle top row
            GLCDRotateBits = GLCDY AND 7
            Repeat GLCDRotateBits
                Set c Off
                Rotate GLCDHiChange Left
            End Repeat

            GLCDTemp = SSD1306_BufferAlias(SSD1306_BufferLocationCalc) XOR GLCDHiChange
            SSD1306_BufferAlias(SSD1306_BufferLocationCalc) = GLCDTemp
            Write_Transaction_Data_SSD1306(GLCDTemp)

            SSD1306_BufferLocationCalc++

        Next
        Close_Transaction_SSD1306

        'handle BOTTOM pixels of the sprite

        'Increment to the next ROW
        SSD1306_Page++
        Cursor_Position_SSD1306_Fast

        'Move buffer pointet to the next row/buffer which is 128 bytes, but, the top half of the buffer has been write... 8 bytes.
        'So 128-8 = 120
        SSD1306_BufferLocationCalc = SSD1306_BufferLocationCalc  + 120

        Open_Transaction_SSD1306
        For CurrCharCol = 1 To 8
            Select Case CurrCharCol
            Case 1: ReadTable sprite1, CharCode, GLCDHiChange
            Case 2: ReadTable sprite2, CharCode, GLCDHiChange
            Case 3: ReadTable sprite3, CharCode, GLCDHiChange
            Case 4: ReadTable sprite4, CharCode, GLCDHiChange
            Case 5: ReadTable sprite5, CharCode, GLCDHiChange
            Case 6: ReadTable sprite6, CharCode, GLCDHiChange
            Case 7: ReadTable sprite7, CharCode, GLCDHiChange
            Case 8: ReadTable sprite8, CharCode, GLCDHiChange
            End Select

            GLCDLoChange = 0
            Repeat GLCDRotateBits
                Set c Off
                'as bits move to left C is set... moving in GLCDLoChange in the next command
                Rotate GLCDHiChange Left
                Rotate GLCDLoChange Left
            End Repeat

            GLCDTemp = SSD1306_BufferAlias(SSD1306_BufferLocationCalc) XOR GLCDLoChange
            SSD1306_BufferAlias(SSD1306_BufferLocationCalc) = GLCDTemp
            Write_Transaction_Data_SSD1306(GLCDTemp)
            SSD1306_BufferLocationCalc++
        Next
        Close_Transaction_SSD1306

    End If

End Sub


'sprite shape data
Table sprite1
    b'00000000'
    b'00000000'
    b'10000000'
    b'11111111'
    b'00111000'
    b'00000000'
    b'00000000'
    b'11111111'


End Table

'sprite shape data
Table sprite2
    b'00000000'
    b'00111100'
    b'01000000'
    b'11111111'
    b'01000100'
    b'00000000'
    b'00111100'
    b'11000011'
End Table

'sprite shape data
Table sprite3
    b'00000000'
    b'01011010'
    b'00100000'
    b'11111111'
    b'10000010'
    b'00111100'
    b'01100110'
    b'10100101'
End Table

'sprite shape data
Table sprite4
    b'00000000'
    b'01011010'
    b'00010000'
    b'11111111'
    b'00011000'
    b'00111100'
    b'01011010'
    b'10100101'
End Table

'sprite shape data
Table sprite5
    b'00000000'
    b'01011010'
    b'00001000'
    b'11111111'
    b'10000010'
    b'00111100'
    b'01011010'
    b'10100101'
End Table

'sprite shape data
Table sprite6
    b'00000000'
    b'01011010'
    b'00000100'
    b'11111111'
    b'01000100'
    b'00111100'
    b'01100110'
    b'10100101'
End Table

'sprite shape data
Table sprite7
    b'00000000'
    b'00111100'
    b'00000010'
    b'11111111'
    b'00111000'
    b'00000000'
    b'00111100'
    b'11000011'
End Table

'sprite shape data
Table sprite8
    b'00000000'
    b'00000000'
    b'00000001'
    b'11111111'
    b'00000000'
    b'00000000'
    b'00000000'
    b'11111111'
End Table


Macro Cursor_Position_SSD1306_Fast

    Dim I2CByte As Byte

    HI2CStart
    HI2CSend GLCD_I2C_Address
    HI2CSend 0x00
    HI2CSend 0xB0 + SSD1306_Page

    HI2CStop
    HI2CStart
    HI2CSend GLCD_I2C_Address
    HI2CSend 0x00
    ' lower nibble
    I2CByte = ( GLCDX  & 0x0f )
    HI2CSend I2CByte
    HI2CStop

    HI2CStart
    HI2CSend GLCD_I2C_Address
    HI2CSend 0x00
    I2CByte = ( SWAP4(GLCDX) & 0x0F ) + 0x10
    HI2CSend I2CByte
    HI2CStop

End Macro



' ----- Support methods.  Subroutines and Functions
'
'    Dim HI2C1StateMachine as byte
'    Dim HI2CACKPOLLSTATE  as Byte
'    Dim HI2C1lastError as Byte
'
'    #define I2C1_GOOD             0
'    #define I2C1_FAIL_TIMEOUT     1
'    #define I2C1_TXBE_TIMEOUT     2
'    #define I2C1_START_TIMEOUT    4
'    #define I2C1_RESTART_TIMEOUT  8
'    #define I2C1_RXBF_TIMEOUT     16
'    #define I2C1_ACK_TIMEOUT      32
'    #define I2C1_MDR_TIMEOUT      64
'    #define I2C1_STOP_TIMEOUT     128
'
'Sub SI2CInit
'
'    Dir HI2C_DATA out
'    Dir HI2C_CLOCK out
'
'    I2C1CON1 = 0x80
'    I2C1CON2 = 0x21
'    I2C1CLK =  0x03
'    I2C1CON0 = 0x04
'
'    I2C1PIR = 0    ;Clear all the error flags
'    I2C1ERR = 0
'    I2C1CON0.EN=1
'
'
'    I2C1CON2.ACNT = 0
'    I2C1CON2.ABD=0
'    I2C1CON0.MDR=1
'
'    'Initialise correct state
'    SI2CStart
'    SI2CSend ( 0xff )
'    SI2CStop
'
'    #define HI2CIStopWaitPeriod 70
'
'End sub
'
'Sub SI2CStart
'
'        HI2C1StateMachine = 1
'        HI2CWaitMSSPTimeout = false
'        HI2C1lastError = I2C1_GOOD
'
'End Sub
'
'Sub SI2CReStart
'
'        HI2C1StateMachine = 3
'        HI2CWaitMSSPTimeout = false
'
'End Sub
'
'Sub SI2CStop
'
'    HI2C1StateMachine = 0
'    HI2CWaitMSSPTimeout = 0
'
'    do while HI2CWaitMSSPTimeout < 255
'
'        HI2CWaitMSSPTimeout++
'
'        if I2C1PIR.PCIF = 1 then
'            SI2Cwait4Stop
'            wait HI2CIStopWaitPeriod us
'            exit sub
'
'        else
'            wait 1 us
'
'        end if
'    loop
'    if HI2CWaitMSSPTimeout = 255 then HI2C1lastError = HI2C1lastError or I2C1_STOP_TIMEOUT
'
'End Sub
'
'
'Sub SI2CSend ( in I2Cbyte )
'    'This is now a state Machine to cater for the new approach with the I2C module
'
'    Select Case HI2C1StateMachine
'
'
'      case 2  'send data
'
'        HI2CWaitMSSPTimeout = 0
'
'        do while HI2CWaitMSSPTimeout < 255
'
'            HI2CWaitMSSPTimeout++
'
'            if I2C1STAT1.TXBE = 1 then
'
'                I2C1CNT = 1
'                I2C1TXB = I2Cbyte
'                SI2CWait4Ack
'                SI2Cwait4MDR
'
'                exit Sub
'
'            else
'
'                wait 1 us
'
'            end if
'        loop
'
'        if HI2CWaitMSSPTimeout = 255 then HI2C1lastError = HI2C1lastError or I2C1_TXBE_TIMEOUT
'
'
'      case 1  'A start
'
'        I2C1STAT1.CLRBF = 1
'        I2C1CNT = 0
'        I2C1PIR.SCIF = 0
'        I2C1ADB1 = I2Cbyte
'
'        HI2CWaitMSSPTimeout = 0
'
'        do while HI2CWaitMSSPTimeout < 255
'
'            HI2CWaitMSSPTimeout++
'
'            if I2C1PIR.SCIF = 1 then
'                HI2C1StateMachine = 2  'Set state Machine to send data
'                HI2CAckPollState = I2C1CON1.5
'                exit Sub
'
'            else
'                I2C1CON0.S = 1
'                wait 1 us
'
'            end if
'        loop
'
'        if HI2CWaitMSSPTimeout = 255 then HI2C1lastError = HI2C1lastError or I2C1_START_TIMEOUT
'
'      case 3  'A restart
'
'        'wait for hardware machine to settle
'        wait while I2C1STAT0.MMA = 1
'
'        I2C1CNT = 0
'        I2C1ADB1 = I2Cbyte
'        I2C1PIR.SCIF = 0
'
'        HI2CWaitMSSPTimeout = 0
'
'        do while HI2CWaitMSSPTimeout < 255
'
'            HI2CWaitMSSPTimeout++
'
'            if I2C1PIR.SCIF = 1 then
'                HI2C1StateMachine = 2  'Set state Machine to send data
'                HI2CAckPollState = I2C1CON1.5
'                exit Sub
'
'            else
'                I2C1CON0.S = 1
'                I2C1CON0.RSEN=0
'                wait 1 us
'
'            end if
'        loop
'
'        if HI2CWaitMSSPTimeout = 255 then HI2C1lastError = HI2C1lastError or I2C1_RESTART_TIMEOUT
'
'    end select
'
'End Sub
'
'
'Sub SI2CReceive (Out I2CByte, Optional In HI2CGetAck = 1 )
'
'      I2C1CNT = 255
'      HI2CWaitMSSPTimeout = 0
'
'      do while HI2CWaitMSSPTimeout < 255
'
'          HI2CWaitMSSPTimeout++
'
'          if I2C1STAT1.RXBF = 1 then
'
'              I2CByte = I2C1RXB
'              exit Sub
'
'          else
'
'              wait 1 us
'
'          end if
'      loop
'
'      if HI2CWaitMSSPTimeout = 255 then HI2C1lastError = HI2C1lastError or I2C1_RXBF_TIMEOUT
'
'
'
'End Sub
'
'Sub SI2CWait4Ack
'
'    HI2CWaitMSSPTimeout = 0
'
'    do while HI2CWaitMSSPTimeout < 255
'
'        HI2CWaitMSSPTimeout++
'
'        if I2C1CON1.ACKSTAT = 0 then
'
'            HI2CAckPollState = I2C1CON1.ACKSTAT
'            exit sub
'
'        else
'
'            wait 1 us
'
'        end if
'    loop
'    if HI2CWaitMSSPTimeout = 255 then HI2C1lastError = HI2C1lastError or I2C1_ACK_TIMEOUT
'    ' HI2CWaitMSSPTimeout is now TRUE = 255
'End Sub
'
'
'
'Sub SI2Cwait4MDR
'
'    HI2CWaitMSSPTimeout = 0
'
'    do while HI2CWaitMSSPTimeout < 255
'
'        HI2CWaitMSSPTimeout++
'
'        if I2C1CON0.MDR = 0 then
'
'            exit sub
'
'        else
'
'            wait 1 us
'
'        end if
'    loop
'    if HI2CWaitMSSPTimeout = 255 then HI2C1lastError = HI2C1lastError or I2C1_MDR_TIMEOUT
'    ' HI2CWaitMSSPTimeout is now TRUE = 255
'End Sub
'
'
'Sub SI2Cwait4Stop
'
'    HI2CWaitMSSPTimeout = 0
'
'    do while HI2CWaitMSSPTimeout < 255
'
'        HI2CWaitMSSPTimeout++
'
'        if I2C1PIR.PCIF = 1 then
'
'            exit sub
'
'        else
'
'            wait 1 us
'
'        end if
'    loop
'    if HI2CWaitMSSPTimeout = 255 then HI2C1lastError = HI2C1lastError or I2C1_STOP_TIMEOUT
'    ' HI2CWaitMSSPTimeout is now TRUE = 255
'End Sub
