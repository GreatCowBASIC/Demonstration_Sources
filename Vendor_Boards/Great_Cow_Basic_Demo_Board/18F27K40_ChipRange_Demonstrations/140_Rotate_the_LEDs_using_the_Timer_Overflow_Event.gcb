'''
'''******************************************************************
'''
'''  Timer0 is a counter implemented in the processor. It may be used to count instruction
'''  cycles or external events, that occur at or below the instruction cycle rate.
'''  In 16F pic, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
'''  enhanced mid-range core implements only an 8-bit counter.
'''  This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
'''  over. This frees up the processor to do meaningful work rather than wasting instruction
'''  cycles in a timing loop of 1s.
'''  Using a counter provides a convenient method of measuring time or delay loops as it
'''  allows the processor to work on other tasks rather than counting instruction cycles.
'''
'''
'''GCBASIC Header block
'''
'''@author  Evan R. Venn
'''@licence GPL
'''@version 1.00
'''@date    03/05/2018
'''****
' ----- Configuration
'Chip Settings.
#CHIP 18F27K40, 32
#OPTION Explicit

'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -----------| A |-----------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -------| O | ----------| O | I |-
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---|TX1|-------|CCP|-------------
''----------------------------------------

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT PORTB
#DEFINE LEDD1   LEDPORT.0
#DEFINE LEDD2   LEDPORT.1
#DEFINE LEDD3   LEDPORT.2
#DEFINE LEDD4   LEDPORT.3


Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     LEDD3         Out
Dir     LEDD4         Out

#DEFINE SWITCHPORT    PORTA
#DEFINE SwitchIn      SWITCHPORT.2
Dir     SwitchIn      In

#DEFINE RSTButton     PORTE.3

#DEFINE PWMCCP1       PORTC.2

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.


Dim TimeOutHasOcurred As BIT


'   Initialise the timer.
'   Firstly tell the compiler to use a 16bit timer for this demonstration
#DEFINE TMR0_16BIT

'     For this we need the following:
'       Prescaler
'           1:256
'            HF int Osc, and
'            NOT to sync Timer
'       Post scaler
'           1:2
InitTimer0 Osc, PRE0_256 + TMR0_HFINTOSC ,  POST0_2

On Interrupt Timer0Overflow Call blink

'Set timer to 1 second`
SetTimer ( 0, 0x0bdc )

'     Start the Timer - you need to start this Timer0!
StartTimer 0

'Set the LED states
LEDD1 = 1
LEDD2 = 0
LEDD3 = 0
LEDD4 = 0


Dim     LEDState As Byte
'We are only interested in the lower four bits, so, use a mask to extract the state of these bits.
LEDState = LEDPORT AND 0B00001111

Do Forever

    If TimeOutHasOcurred = 1 Then

        'Rotate the LEDs.  We are only interested in the four LEDs so we mask the other bits.
        'Clear the C register bit, rotate the LEDState variable, check if the C register bit is set and set the LEDState variable.
        ' Clear the carry flag
        Set C Off
        ' and shift the contents of LEDState
        Rotate LEDState Right
        ' If the Carry is equal to 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
        If C = 1 Then
            'Set the initial LED states
            LEDD1 = 0
            LEDD2 = 0
            LEDD3 = 0
            LEDD4 = 1
            LEDState = LEDPORT AND 0B00001111
        Else
            'Set the port
            LEDPORT = LEDState
        End If

        TimeOutHasOcurred= 0
        ' Set timer to 1 second`
        SetTimer ( 0, 0x0bdc )

    End If




Loop


Sub blink
    TimeOutHasOcurred = 1
    'Clear the Timer0 overflow event
    TMR0IF = 0
End Sub
