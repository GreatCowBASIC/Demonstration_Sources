'''
'''  This demonstration shows the PORGMEM on the Serial Terminal.
'''
''' This shows code for writing and reading values onto the PROGMEM or PFM.
'''
'''
''' If you read the chip and look at the memory locations 0xFFC0 to 0xFFFE - you will see the correct values.
''' :10ffc000c011c211c411c611c811ca11cc11ce1171
''' :10ffd000d011d211d411d611d811da11dc11de11e1
''' :10ffe000e011e211e411e611e811ea11ec11ee1151
''' :10fff000f011f211f411f611f811fa11fc11fe11c1

'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.01
'''@date    09.07.2020
' ----- Configuration

'Chip Settings.
#CHIP 18f26q43
#OPTION Explicit
#config  LVP=ON

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.1
    'PinManager data: v1.79.0
    'Generated for 18f26q43
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18f26q43

    Sub InitPPS

            'Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            'Module: UART1
            RC6PPS = 0x0020    'TX1 > RC6

    End Sub
    'Template comment at the end of the config file

'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    --------IN-LED--LED-LED LED -----
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX---------------------------
''-----------------------------------------
''

'' ------------------PORTE-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------RST--------------
''-----------------------------------------
''

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.2
#DEFINE LEDD3 PORTB.3
#DEFINE LEDD4 PORTB.4
#DEFINE LEDPORT LATB


Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     LEDD3         Out
Dir     LEDD4         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTB.5
Dir     SWITCHIN      In

'Setup Serial port
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING


'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.
' Now assumes Serial Terminal is operational

Dim  PFMAddress, DataWord as Word

wait 1 s
HSerPrintCRLF 2

HSerPrint "Send"
HSerSend 9
HSerPrint "Received"
HSerPrintCRLF

'We are sending words, so we send the PFMAddress address every two bytes (a word).
for PFMAddress = 0xFFC0 to 0xFFFE step 2
    'Write the value of the PFMAddress to the PFM - this just masks off the high byte (0xFF00) and replaces with (0x11nn) - this way we KNOW that PROGMEM is being updated for this demonstration.
    DataWord = (PFMAddress and 0x00FF) OR 0x1100

    'Display the value
    HSerPrint "0x"
    HSerPrint hex(DataWord_h)
    HSerPrint hex(DataWord)
    HSerSend 9

    'Write the value of the PFMAddress to the PFM
    ProgramWrite ( PFMAddress, DataWord )

    'Reset to 0
    DataWord = 0x0000

    'Read the value of the PFMAddress to the PFM
    ProgramRead  ( PFMAddress, DataWord )

    'Display the received value
    HSerPrint "0x"
    HSerPrint hex(DataWord_h)
    HSerPrint hex(DataWord)
    HSerPrintCRLF

Next
HSerPrintCRLF

do
loop
