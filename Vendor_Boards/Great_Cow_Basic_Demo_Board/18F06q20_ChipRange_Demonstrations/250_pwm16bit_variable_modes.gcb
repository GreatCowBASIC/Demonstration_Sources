'''
'''This program shows how to use PWM to provide 1KHz at 50% for 64Khz chip frequency
'''
'''The chip has multiple PWM has channels.  
'''Each PLWM channel has two outputs.  
'''In the PPS these are called PWMxy. Where x is the PWM module and y is the PWM channel.  As it PWM11 and PWM12 for PWM1_16bit module address ouput channels 1 and 2.
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.01
'''@date       31.11.2022
'''********************************************************************************
#CHIP 18F16Q20
#OPTION Explicit


    #startup InitPPS, 85
    #define PPSToolPart 18F16Q20

    Sub InitPPS

      RC0PPS = 0x0B;  //RC0->PWM1_16BIT:PWM11
      RC1PPS = 0x0B;  //RC1->PWM1_16BIT:PWM11
      RC2PPS = 0x0B;  //RC2->PWM1_16BIT:PWM11
      RC3PPS = 0x0B;  //RC3->PWM1_16BIT:PWM11

    End Sub
    'Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   -----------------SW---------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX---------LED--LED-LED LED--
''-----------------------------------------




'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATC

Dir     RC0         Out
Dir     RC1         Out
Dir     RC2         Out
Dir     RC3         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTA.3
Dir     SWITCHIN      In

'analogue port selection
#DEFINE ADCChannelSelected ANA0
#DEFINE ADSpeed LowSpeed



' ------ Start of main Program to provide 2kHz frequency at 100% for 16Khz chip frequency, it cycles from 0% to 100% Duty

    //PWMERS External Reset Disabled 

    PWM1ERS = 0x00

    //PWMCLK HFINTOSC 

    PWM1CLK = 0x03

    //PWMLDS Autoload disabled 

    PWM1LDS = 0x00

    //PWMPRL 231 

    PWM1PRL = 0xE7

    //PWMPRH 3 

    PWM1PRH = 0x03

    //PWMCPRE Prescale by 32 

    PWM1CPRE = 0x1F

    //PWMPIPOS No postscale 

    PWM1PIPOS = 0x00

    //PWMS1P1IF PWM1 output match did not occur; PWMS1P2IF PWM2 output match did not occur 

    PWM1GIR = 0x00

    //PWMS1P1IE disabled; PWMS1P2IE disabled 

    PWM1GIE = 0x00

    //PWMPOL1 disabled; PWMPOL2 disabled; PWMPPEN disabled; PWMMODE Left aligned mode 

    PWM1S1CFG = 0x00

    //PWMS1P1L 232 

    PWM1S1P1L = 0xE8

    //PWMS1P1H 3 

    PWM1S1P1H = 0x03

    //PWMS1P2L 244 

    PWM1S1P2L = 0xF4

    //PWMS1P2H 1 

    PWM1S1P2H = 0x01

    //Clear PWM1_16BIT period interrupt flag
    PWM1PIF = 0
    
    //Clear PWM1_16BIT interrupt flag
    PWM1IF = 0
    
    //Clear PWM1_16BIT slice 1, output 1 interrupt flag
    S1P1IF = 0
    
    //Clear PWM1_16BIT slice 1, output 2 interrupt flag
    S1P2IF = 0
    
    //PWM1_16BIT interrupt enable bit
    PWM1IE = 0
    
    //PWM1_16BIT period interrupt enable bit
    PWM1PIE = 0
  
    //PWMEN enabled; PWMLD disabled; PWMERSPOL disabled; PWMERSNOW disabled 
    PWM1CON = 0x80



    // Create an alias to the PWM1 duty register
    Dim PWMval as word alias PWM1S1P1H, PWM1S1P1L

    Do
          for PWMval = 0x00 to 0x3E8
            wait 1 ms
            PWM1CON = 0x00
            PWM1CON = 0x80
          Next
          wait 2  s

          for PWMval = 0x3E8 to 0x00 Step -1
            wait 1 ms
            PWM1CON = 0x00
            PWM1CON = 0x80
          Next
          wait 2 s

    Loop

    End
