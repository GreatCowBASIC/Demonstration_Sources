/*
 This shows how to read the ADC converter and display the
 a proportional delay value by changing/inverting the LEDs state.
 The pot on the board varies the voltage coming in from the ADC.

 The ADC is referenced to the same Vdd as the device, which
 is nominally is 5V.  The ADC returns the ratio of the voltage
 on Pin RA0 to 5V.  The ADC has a resolution of 12 bits, with 4095
 representing 5V and 0 representing 0V.

 Rotate the potentiometer to change the LEDs displayed.

  ************************************************************************
  @author  EvanV
  @licence GPL
  @version 1.00
  @date    31.11.2022
  */

  // ----- Configuration

//Chip Settings.
#CHIP 18F16Q20
#OPTION Explicit

  // -------------------PORTA----------------
  // Bit#:  -7---6---5---4---3---2---1---0---
  // IO:   -----------------------------ADC--
  //-----------------------------------------
  //

  // -------------------PORTB----------------
  // Bit#:  -7---6---5---4---3---2---1---0---
  // IO:    ---------------------------------
  //-----------------------------------------
  //

  // ------------------PORTC-----------------
  // Bit#:  -7---6---5---4---3---2---1---0---
  // IO:    ---------------LED--LED-LED-LED--
  //-----------------------------------------
  //


  //Define constants to make things easier. We can reuse these at any time.
  #DEFINE LEDPORT LATC

  Dir     RC0         Out
  Dir     RC1         Out
  Dir     RC2         Out
  Dir     RC3         Out

  #DEFINE POTENTIOMETER PORTA.0
  Dir     POTENTIOMETER In

  '*****************************************************************************************************
  //Main program commences here.. everything before this is setup for the board.

  //Set the initial LED states - change to suit your configuration
  #DEFINE LEDSTATEMACRO RC0 = 0: RC1 = 0: RC2 = 0: RC3 = 1
  //You may need change to the LEDMASK to suit your port/configuration.  We use a macro as re reuse this statement more that once.
  #DEFINE LEDMASK 0B00001111

  LEDSTATEMACRO
  Wait 1 s

  //A word variable has the  range of 0 to 65355
  Dim ADCVal As Word


Do

    //ReadAD12 can return values of 0 to 4095 (max)
    ADCVal = ReadAD12 ( ANA0 )  

    ////ADCVal = Scale ( ADCVal, 0, 4095, 100, 500 )

    //Wait for the number of milliseconds
    Wait ADCVal ms
    //Rotate the LEDs.  We are only interested in the four LEDs so we mask the other bits.
    Set C Off
    //and, shift the contents of LEDState
    Rotate LEDPORT Right
    // If the C = 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
    If C = 1 Then
        //Set the initial LED states
        LEDSTATEMACRO
        //Mask off the other bits
        LEDPORT = LEDPORT AND LEDMASK
    End If


Loop















/* GCODE Optimisation file - this will optimise ADC operations by disabling the ADC operations on the AD channel that is set to FALSE
                          to enable ADC operations on a specific AD channel set to TRUE

    Legacy chip Constants for ADC
*/
          #DEFINE USE_AD0 FALSE
          #DEFINE USE_AD1 FALSE
          #DEFINE USE_AD2 FALSE
          #DEFINE USE_AD2 FALSE
          #DEFINE USE_AD3 FALSE
          #DEFINE USE_AD4 FALSE
          #DEFINE USE_AD5 FALSE
          #DEFINE USE_AD6 FALSE
          #DEFINE USE_AD7 FALSE
          #DEFINE USE_AD8 FALSE
          #DEFINE USE_AD9 FALSE
          #DEFINE USE_AD10 FALSE
          #DEFINE USE_AD11 FALSE
          #DEFINE USE_AD12 FALSE
          #DEFINE USE_AD13 FALSE
          #DEFINE USE_AD14 FALSE
          #DEFINE USE_AD15 FALSE
          #DEFINE USE_AD16 FALSE
          #DEFINE USE_AD17 FALSE
          #DEFINE USE_AD18 FALSE
          #DEFINE USE_AD19 FALSE
          #DEFINE USE_AD20 FALSE
          #DEFINE USE_AD21 FALSE
          #DEFINE USE_AD22 FALSE
          #DEFINE USE_AD23 FALSE
          #DEFINE USE_AD24 FALSE
          #DEFINE USE_AD25 FALSE
          #DEFINE USE_AD26 FALSE
          #DEFINE USE_AD27 FALSE
          #DEFINE USE_AD28 FALSE
          #DEFINE USE_AD29 FALSE
          #DEFINE USE_AD30 FALSE
          #DEFINE USE_AD31 FALSE
          #DEFINE USE_AD32 FALSE
          #DEFINE USE_AD33 FALSE
          #DEFINE USE_AD34 FALSE
//		  Recent chip Constants for ADC 
          #DEFINE USE_ADA0 TRUE
          #DEFINE USE_ADA1 FALSE
          #DEFINE USE_ADA2 FALSE
          #DEFINE USE_ADA3 FALSE
          #DEFINE USE_ADA4 FALSE
          #DEFINE USE_ADA5 FALSE
          #DEFINE USE_ADA6 FALSE
          #DEFINE USE_ADA7 FALSE
          #DEFINE USE_ADB0 FALSE
          #DEFINE USE_ADB1 FALSE
          #DEFINE USE_ADB2 FALSE
          #DEFINE USE_ADB3 FALSE
          #DEFINE USE_ADB4 FALSE
          #DEFINE USE_ADB5 FALSE
          #DEFINE USE_ADB6 FALSE
          #DEFINE USE_ADB7 FALSE
          #DEFINE USE_ADC0 FALSE
          #DEFINE USE_ADC1 FALSE
          #DEFINE USE_ADC2 FALSE
          #DEFINE USE_ADC3 FALSE
          #DEFINE USE_ADC4 FALSE
          #DEFINE USE_ADC5 FALSE
          #DEFINE USE_ADC6 FALSE
          #DEFINE USE_ADC7 FALSE
          #DEFINE USE_ADD0 FALSE
          #DEFINE USE_ADD1 FALSE
          #DEFINE USE_ADD2 FALSE
          #DEFINE USE_ADD3 FALSE
          #DEFINE USE_ADD4 FALSE
          #DEFINE USE_ADD5 FALSE
          #DEFINE USE_ADD6 FALSE
          #DEFINE USE_ADD7 FALSE
          #DEFINE USE_ADE0 FALSE
          #DEFINE USE_ADE1 FALSE
          #DEFINE USE_ADE2 FALSE
