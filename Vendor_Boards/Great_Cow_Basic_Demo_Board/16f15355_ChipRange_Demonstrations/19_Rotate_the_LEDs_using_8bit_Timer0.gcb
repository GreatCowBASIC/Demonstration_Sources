''' A demonstration program for GCBASIC.
'''
'''******************************************************************
'''
'''  Timer0 is a counter implemented in the processor. It may be used to count instruction
'''  cycles or external events, that occur at or below the instruction cycle rate.
'''  In the PIC16, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
'''  enhanced mid-range core implements only an 8-bit counter.
'''  This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
'''  over. This frees up the processor to do meaningful work rather than wasting instruction
'''  cycles in a timing loop.
'''  Using a counter provides a convenient method of measuring time or delay loops as it
'''  allows the processor to work on other tasks rather than counting instruction cycles.
'''
'''
'''  LEDs rotate from right to left, similar to Lesson 3, at a rate of ~.5 seconds.
'''
'''
'''   You need four LEDs connnect to PORTC.0, PORTC.1, PORTC.2 and PORTC.3 connected via suitable resistors.
'''  ************************************************************************************************************************************************************************************
'''
'''
'''  PIC: 16f15355
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''@author   EvanV
'''@licence  GPL
'''@version  1.0
'''@date     04.12.2016



    'Chip Settings.
    #chip 16f15355, 32
    #option explicit




   '' -------------------LATC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' LED:   ---------------|D5 |D4 |D3 |D2 |-
    ''-----------------------------------------
    ''
    #define LEDD2  PORTC.0
    #define LEDD3  PORTC.1
    #define LEDD4  PORTC.2
    #define LEDD5  PORTC.3
    #define LEDBANK PORTC
    #define SWITCH      PORTA.1

    Dir     LEDD2 OUT
    Dir     LEDD3 OUT
    Dir     LEDD4 OUT
    Dir     LEDD5 OUT
    Dir      SWITCH IN

'    Set LEDS off
    LEDBANK = 0
'    Set the first LED on
    Set LEDD5 on



    'Setup the timer.
    'params     Source, Prescaler                , Postscaler
    InitTimer0 Osc, PRE0_16384 + TMR0_HFINTOSC   , POST0_11

    ' Start the Timer by writing to TMR0ON bit
    StartTimer 0

    ' Set the Timer start value
    SetTimer ( 0, 0xB1 )
    ClearTimer 0


    Dim CURRENTSTATE as Byte

    do
        wait while TMR0IF = 0

        ' Clearing IF flag.
        TMR0IF = 0

        'get current status of the four bits
        currentstate = LEDBANK & 0x0F

        'Just rotate the bottom four bits
        'Set the carry flag
        C = 0
        Rotate  currentstate right
        'Test the Carry flag
        if C = 1 then currentstate.3 = 1  'set the BIT on

        'Set the four bits
        LEDBANK = ( LEDBANK & 0xF0 ) OR currentstate

        'Clear the timer to Zero.
        ClearTimer 0

    loop
