''' A demonstration program for GCBASIC.
'''
'''
'''  Timer0 is a counter implemented in the processor. It may be used to count instruction
'''  cycles or external events, that occur at or below the instruction cycle rate.
'''  In the PIC16, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
'''  enhanced mid-range core implements only an 8-bit counter.
'''  This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
'''  over. This frees up the processor to do meaningful work rather than wasting instruction
'''  cycles in a timing loop.
'''  Using a counter provides a convenient method of measuring time or delay loops as it
'''  allows the processor to work on other tasks rather than counting instruction cycles.
'''
'''
'''  LEDs rotate from right to left, similar to a previous demonstration, at a rate of ~1 second.
'''
'''
'''   You need four LEDs connnect to PORTC.0, PORTC.1, PORTC.2 and PORTC.3 connected via suitable resistors.
'''  You will to connect a pot to porta.0.  The needs to be connected the supply voltage and 0v using an appropiate method.
'''   You will also need to connect a serial Terminal to PORTC.4.  Using PUTTY.EXE for an excellent terminal program.  Also, you msy need to connect the microcontroller via a TTL converter.
'''  ************************************************************************************************************************************************************************************
'''
'''
'''  PIC: 16f15355
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''
'''@author   EvanV
'''@licence  GPL
'''@version  1.0
'''@date     04.12.2016





    'Chip Settings.
    #chip 16f15355,32
    #option explicit




    'Set the PPS for this solution.
  #startup InitPPS, 85

  Sub InitPPS
    UNLOCKPPS
      RX1DTPPS = 0x15     'RC5->EUSART1:RX1;
      RC4PPS = 0x0F     'RC4->EUSART1:TX1;
      LOCKPPS
  End sub


    '' -------------------LATC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' LED:   ---------------|D5 |D4 |D3 |D2 |-
    ''-----------------------------------------
    ''
    #define LEDD2  PORTC.0
    #define LEDD3  PORTC.1
    #define LEDD4  PORTC.2
    #define LEDD5  PORTC.3
    #define LEDBANK PORTC

    Dir     LEDD2 OUT
    Dir     LEDD3 OUT
    Dir     LEDD4 OUT
    Dir     LEDD5 OUT

    #define USART_BAUD_RATE 19200
    #define USART_TX_BLOCKING

    Dim TIMEOUT, CURRENTSTATE as Byte


    Repeat 10
        LEDBANK = !LEDBANK
        WAIT 100 ms
    End Repeat


'    Set LEDS off
    LEDBANK = 0
'    Set the first LED on
    Set LEDD5 on


'    Initialise the timer.
'    Firstly tell the compiler to use a 16bit timer for this demonstration
    #define TMR0_16BIT

'     For this timer we need the following:
'        Prescaler
'            1:256
'            HF int Osc, and
'            NOT to sync Timer
'       Post scaler
'            1:2
    InitTimer0 Osc, PRE0_256 + TMR0_HFINTOSC ,  POST0_2   'Event will be raised every 1.04s
'   Set the type of event
    On Interrupt Timer0Overflow call blink
    SetTimer ( 0, 0x0bdc )
'     Start the Timer - you need to start this Timer0!
    StartTimer 0

    Do Forever

          if TimeOut = 1 then

            'get current status of the four bits
            currentstate = LEDBANK & 0x0F

            'Just rotate the bottom four bits
            'Set the carry flag
            C = 0
            Rotate  currentstate right
            'Test the Carry flag
            if C = 1 then currentstate.3 = 1  'set the BIT on

            'Set the four bits
            LEDBANK = ( LEDBANK & 0xF0 ) OR currentstate


            TimeOut= 0
            SetTimer ( 0, 0x0bdc ) ' Set timer to 1 second`

          end if




    Loop


    Sub blink
          TimeOut = 1
          'Clear the Timer0 overflow event
          TMR0IF = 0
    End Sub
