'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a GLCD demonstration multifunctional capabilities.
'''This program reads the Sony Remote, reads DS18B20 and reads the DHT22 device.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''@author  EvanV
'''@licence GPL
'''@version 1.2c
'''@date    31.1.16
'''********************************************************************************

#CHIP 16f1939,32
#OPTION Explicit

#INCLUDE <glcd.h>
#INCLUDE <ds18b20.h>
' include the header file
#INCLUDE <sonyremote.h>
#INCLUDE <dht.h>
' This is the Default value, not required.
#DEFINE GLCD_TYPE GLCD_TYPE_KS0108

'Comment out if you do not have DHT22 attached
#DEFINE DHT22
#DEFINE DHT_type    22

#DEFINE GLCDDirection 1

'D12 to actually since CS1, CS2 can be reversed on some devices
#DEFINE GLCD_CS1 PORTC.1
#DEFINE GLCD_CS2 PORTC.0
'D0 to pin 7 on LCD
#DEFINE GLCD_DB0 PORTD.0
'D1 to pin 8 on LCD
#DEFINE GLCD_DB1 PORTD.1
'D2 to pin 9 on LCD
#DEFINE GLCD_DB2 PORTD.2
'D3 to pin 10 on LCD
#DEFINE GLCD_DB3 PORTD.3
'D4 to pin 11 on LCD
#DEFINE GLCD_DB4 PORTD.4
'D5 to pin 12 on LCD
#DEFINE GLCD_DB5 PORTD.5
'D6 to pin 13 on LCD
#DEFINE GLCD_DB6 PORTD.6
'D7 to pin 14 on LCD
#DEFINE GLCD_DB7 PORTD.7

#DEFINE GLCD_RS PORTe.0
#DEFINE GLCD_Enable PORTe.2
#DEFINE GLCD_RW PORTe.1
#DEFINE GLCD_RESET PORTC.2

' Timing for 32 mhz
#DEFINE KS0108ReadDelay    3
#DEFINE KS0108WriteDelay   0
#DEFINE KS0108ClockDelay   0



' ----- Constants
' DS18B20 port settings
#DEFINE DQ Portc.7
#DEFINE LED1 portb.3
Dir LED1 Out

' IRR specific configuration
'sensor on pin 17
#DEFINE IR_DATA_PIN PortB.0
' IR input
Dir IR_DATA_PIN In

'DHT22 specific configuration
#DEFINE DHT_PIN PORTC.6

' ----- Variables
' a variabler to handle the temperature calculations
Dim TempC_100 As Word
Dim CCOUNT, OLDINTVALUE, SIGNBIT, FRACT, DIG, R8, R13, CLEARIRR, TEMPWD As Byte


' IRR specific variables
Dim device, button As Byte
device = 255

'DHT22 specific variables
Dim msg, whole, tenths As Byte
Dim rh, cels, fahr As Integer

' ----- Main body of program commences here.

ccount = 0
GLCDCLS
GLCDPrint 0,   0, "GCBasic 2019"
GLCDPrint 0,   8, "Multifunctional Demo"
GLCDPrint 0,   24,"DS18B20, Sony Remote,"
GLCDPrint 0,   32,"DHT22, Pots and GLCD "
Wait 2 s



If NOT_TO = 0 Then
    Pset 1, 0, 1
    GLCDPrint 0,24, "Check the DS18B20"
    GLCDPrint 0,32, "connectivity!!"
    Wait 2 s
    Pset 1, 0, 1
Else
    Wait 2 s
End If




GLCDCLS

GLCDPrint 0,  44,"Device "
GLCDPrint 52, 44,"*"
GLCDPrint 0,  52, "Button "
GLCDPrint 52, 52, "*"

oldIntValue = 0xff
Dim oldRealValue As Word: oldRealValue = 0xfff
#IFDEF DHT22
    Dim OldCels, OldRh As Integer
    OldCels = 0xfff
    OldRh = 0xfff
#ENDIF

IOCBN0 = 1
On Interrupt PortBChange Call readIRR
On Interrupt Timer1Overflow Call ReadthePots
StartTimer 1

InitTimer2 PS2_1/64 , PS2_1/1
On Interrupt Timer2Match Call IRRTimerOut
SetTimer 2, 1
StopTimer 2
ClearIRR = 0


Do Forever

    ' The function readtemp returns the integer value of the sensor
    Pset 0, 0, 1
    DSdata = ReadTemp

    Pset 0, 0, 0
    If DSdata <> oldIntValue Then
        ' Display the integer value of the sensor on the LCD

        GLCDPrint 0,0,Hex(ccount)
        GLCDPrint 20,0,"Ceil"
        Dim outstring As String

        outstring = Str(DSdata)+"C "
        GLCDPrint 52,0, outString
        oldIntValue = DSdata

        #IFDEF DHT22
            'get DHT22 current values
            IntOff
            readDHT(rh, cels, fahr, msg)
            IntOn
        #ENDIF


    End If

    #IFDEF DHT22

        'Check for error state of DHT22
        '0 = no error
        '1 = no response from the sensor
        '2 = bad checksum from the sensor
        If msg = 0 Then

            If Cels <> OldCels Then

                'print temperature in Celsius
                outstring = Str(cels / 10)+"C  "
                GLCDPrint 80, 0, outstring

                'print temperature in Fahrenheit
                outstring = Trim(Str(fahr / 10),2)+"F"
                GLCDPrint 104, 0, outstring

                OldCels = cels
            End If

            If rh <> OldRh Then
                'print relative humidity
                outstring = Trim(Str(rh / 10,3))+"%Rh"
                GLCDPrint 96, 30, outstring

                OldRh = Rh
            End If

        Else

            GLCDPrint 80, 0, Fill(3)
            GLCDPrint 104, 0, Fill(3)
            GLCDPrint 96, 30, Fill(5)

        End If

    #ENDIF

    ' Display the integer and decimal value of the sensor on the LCD

    ' The function readtemp12 returns the raw value of the sensor.
    ' The sensor is read as a 12 bit value therefore each unit equates to 0.0625 of a degree
    Pset 0, 0, 1
    DSdata = ReadTemp12
    Pset 0, 0, 0

    If DSdata <> oldRealValue Then
        oldRealValue = DSdata
        SignBit = DSdata / 256 / 128
        If SignBit = 0 Then Goto Positive
        ' its negative!
        ' take twos comp
        DSdata = ( DSdata # 0xffff ) + 1

Positive:

        ' Convert value * 0.0625. Mulitple value by 6 then add result to multiplication of the value with 25 then divide result by 100.
        TempC_100 =  DSdata * 6
        DSdata = ( DSdata * 25 ) / 100
        TempC_100 = TempC_100 + DSdata

        Whole = TempC_100 / 100
        Fract = TempC_100 % 100
        outstring = ""
        If SignBit = 0 Then Goto DisplayTemp
        outstring = "-"

DisplayTemp:

        GLCDPrint 0,  8, Hex(ccount)
        GLCDPrint 20, 8, "Real"
        outstring = outstring + Str(whole)
        outstring = outstring + "."

        ' To ensure the decimal part is two digits
        Dig = Fract / 10
        outstring = outstring +Str(Dig)
        Dig = Fract % 10
        outstring = outstring +Str(Dig)
        outstring = outstring+"C  "
        GLCDPrint 52, 8,outstring
    End If


    outString = Pad( Str( R8 ),3)
    GLCDPrint 0, 22, "An8"
    GLCDPrint 52, 22, outstring

    outString = Pad( Str( R13 ),3)
    GLCDPrint 0, 30, "An13"
    GLCDPrint 52, 30, outString

    'Handle IRR
    If  device <> 255 Then

        'show device code on glcd
        GLCDPrint 0, 44, "Device "
        GLCDPrint 52, 44, Pad( Str(device), 3 )

        'show button code on glcd
        GLCDPrint 0, 52, "Button "
        GLCDPrint 52, 52, Pad( Str(button), 3 )

        'Set these variables to ensure GLCD is only updated on change
        device = 255

        SetTimer 2, 1
        StartTimer 2

        'Restore our Interrupt
        IOCBN0 = 1

    End If

    If  ClearIRR = 1 Then

        GLCDPrint 52, 44, "* "
        GLCDPrint 52, 52, "* "
        ClearIRR =  0

    End If

'      if IR_DATA_PIN = 0 then
'
'      readIR_Remote(device, button)   ;wait for button press
'      wait 10 mS                      ;ignore any repeats
'
'      end if

    ccount++

Loop


End


Sub ReadthePots

    IntOff
    TMR1IF = 0
    R8 = ReadAD( AN8 )
    R13 = ReadAD( AN13 )
    SetWith ( LED1, FnNotBit ( LED1 ) )
    IntOn


End Sub


Sub readIRR
    'Handle Interrupt

    'Clear the Interrupt On Change Event
    IOCIF = 0

    'Is this event the one we are lookinf for?
    If IOCBF0 = 1 Then

        'Stop recursion by ceasing Interrupt
        IOCBN0 = 0

        'Save the current state of the WDT
        tempWD  = SWDTEN
        If SWDTEN = 1 Then
            SWDTEN = 0
        End If

        'Read the IRR
        'wait for button press
        readIR_Remote(device, button)

        'Restore WDT
        If tempWD = 1 Then
            Set SWDTEN On
        Else
            Set SWDTEN Off
        End If

        'Clear flag
        IOCBF0 = 0

        'We restore the Interrupt after the value has been dislayed

    End If

End Sub

Sub IRRTimerOut

    StopTimer 2
    TMR2IF = 0
    ClearIRR = 1



End Sub
