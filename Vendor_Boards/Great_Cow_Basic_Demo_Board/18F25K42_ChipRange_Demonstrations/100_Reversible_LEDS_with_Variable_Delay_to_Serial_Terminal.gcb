'''
'''  This demonstration produces a variable speed rotating LED display that is proportional to the ADC value.
'''  The ADC value and LED brighteness are  proportional to each other.
'''
'''  The demonstration also introduces the PERIPHERAL PIN SELECT (PPS) MODULE.  We have created the Serial PPS settings for you on Port C.6 and C.7
'''
'''  Rotate the POT to see the LEDs dim and brighten
'''
'''  Press the switch to select the LED.
'''
'''  The Serial port shows the value of the ADC and the direction!
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.02
'''@date    22.10.2017
' ----- Configuration

'Chip Settings.
#CHIP 18f25k42, 16
#OPTION Explicit
'This Configuration change is needed to enable programming in Low Voltage Programming Mode


'Generated by PIC PPS Tool for GCBASIC
'PPS Tool version: 0.0.5.11
'PinManager data: v1.55
'
'Template comment at the start of the config file
'
#STARTUP InitPPS, 85

Sub InitPPS

    'Module: CCP1
    'CCP1 > RB1
    RB1PPS = 0x0009
    'RB1 > CCP1 (bi-directional)
    CCP1PPS = 0x0009
    'Module: CCP2
    'CCP2 > RB5
    RB5PPS = 0x000A
    'RB5 > CCP2 (bi-directional)
    CCP2PPS = 0x000D


    'Module: UART1
    'TX1 > RC6
    RC6PPS = 0x0013
    'RC7 > RX1
    U1RXPPS = 0x0017

End Sub
'Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -------| O | ----------| O | I |-
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -S---S-------------| X |---------
''-----------------------------------------
''


#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.5
#DEFINE Potentiometer   PORTC.5
#DEFINE SwitchIn        PORTB.0

Dir     LEDD1         Out
Dir     LEDD2         Out
'this is the ANC5 port
Dir     Potentiometer In
Dir     SwitchIn      In

'USART settings - setup the serial port - connects to PortC.6 via PPS
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING


'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

#DEFINE DOWN        0
#DEFINE UP          1


Dim DIRECTION As Byte
Dim mydelay, leds  As Byte
#DEFINE LED_RIGHT 0
#DEFINE LED_LEFT  1

'start from the right to left
direction = LED_RIGHT

'Initialise the value
leds = 8

Do

    'Turn the LEDS off so we can see them Flash
    LEDD1 = 0
    LEDD2 = 0

    'Get a value for the ADC port
    mydelay = ReadAD( ANC5 )

    'Show state
    If direction = LED_RIGHT Then
        HSerPrint ">> "
    Else
        HSerPrint "<< "
    End If

    HSerPrint mydelay
    HSerPrintCRLF

    'Set the LEDs
    If  direction = LED_RIGHT  Then

        'HPWM CCPchannel, frequency, duty cycle
        HPWM 1, 40, mydelay
        HPWMOff 2

    Else

        'HPWM CCPchannel, frequency, duty cycle
        HPWM 2, 40, mydelay
        HPWMOff 1

    End If

    'wait, and then check the switch is DOWN
    If mydelay > 0 Then
        Wait mydelay ms
        If check_switch = TRUE Then
            ' toggle the direction
            direction = !direction
        End If
    End If


Loop



'global variable - if button is held down, we don't want to keep on switching directions
#DEFINE SWITCH_UP   1
#DEFINE SWITCH_DOWN 0

Dim previous_state As BIT
previous_state = SWITCH_UP

Function  check_switch
    'switch is normally open to 5V ...when pressed, RA3 is connected to GND
    If (SwitchIn = SWITCH_DOWN) Then
        'debounce by delaying and checking if switch is still pressed
        Wait 1 ms
        If ( (previous_state =  SWITCH_DOWN) & (SwitchIn = SWITCH_DOWN) ) Then
            ' don't toggle
            check_switch = FALSE
            Exit Function
        Else
            ' check if still down
            If (SwitchIn = SWITCH_DOWN) Then
                previous_state = SWITCH_DOWN
                ' reverse the LEDs
                check_switch = TRUE
                Exit Function
            Else
                'switch not properly held down
                previous_state = SWITCH_UP
                ' don't reverse
                check_switch = FALSE
                Exit Function
            End If
        End If
    Else
        'switch not pressed
        previous_state = SWITCH_UP
        'don't reverse
        check_switch = FALSE
        Exit Function
    End If

End Function
