''' A demonstration program for GCBASIC.
'''
'''******************************************************************
''' Lesson "EEPROM"
'''
''' This lesson will provide code for writing and reading a single byte onto
''' the on-board EEPROM. EEPROM is non-volatile memory, meaning that it does
''' not lose its value when power is shut off. This is unlike RAM, which will
''' lose its value when no power is applied. The EEPROM is useful for storing
''' variables that must still be present during no power.
''' It is also convenient to use if the entire RAM space is used up.
''' Writes and reads to the EEPROM are practically instant and are much faster
''' than program memory operations.

''' This will show the value of the EEPROM on the serial Terminal.
''' You can experiment by changing the variable 'Outdata' from Random function to a specific range.  Enjoy.
'''
'''   You need four LEDs connnect to PORTD.0, PORTD.1, PORTD.2 and PORTD.3 connected via suitable resistors.
'''   You will also need to connect a serial Terminal to PORTD.4.  Using PUTTY.EXE for an excellent terminal program.  Also, you msy need to connect the microcontroller via a TTL converter.
'''  You will a switch connect to porta.1.  The needs to be connected the supply voltage via a 1-k pullup resistor.
'''  ************************************************************************************************************************************************************************************
'''  PIC: 16f18877
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''
'''@author   EvanV
'''@licence  GPL
'''@version  1.1
'''@date     04.12.2016


'Chip Settings.
#CHIP 16f18877,32
#OPTION Explicit



'Set the RS232 ports.
'Set the PPS for this solution.
#STARTUP InitPPS, 85

Sub InitPPS
    UNLOCKPPS
    'Pin RC5 source is an input for RX
    RXPPS  = 0x15
    'Pin RC4 source is TX/CK
    RC4PPS = 0x10
    LOCKPPS
End Sub


#DEFINE USART_BAUD_RATE 19200
#DEFINE USART_TX_BLOCKING

'' -------------------LATD-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' LED:   ---------------|D5 |D4 |D3 |D2 |-
''-----------------------------------------
''
#DEFINE LEDD2  PORTD.0
#DEFINE LEDD3  PORTD.1
#DEFINE LEDD4  PORTD.2
#DEFINE LEDD5  PORTD.3
#DEFINE LEDBANK PORTD
#DEFINE SWITCH      PORTA.1

Dir     LEDD2 Out
Dir     LEDD3 Out
Dir     LEDD4 Out
Dir     LEDD5 Out
Dir      SWITCH In

'    Set LEDS off
LEDBANK = 0
'    Set the first LED on
Set LEDD5 On


#DEFINE SWITCH_DOWN         1
#DEFINE SWITCH_UP           0


' Now assumes Serial Terminal is operational
Dim EEPromAddress As Byte
Dim EEPROMArray(255)


Dim OUTDATA, DISPLAYNEWLINE As Byte


HSerPrintCRLF
HSerPrint "EEPROM Test and Show EEProm Results"
HSerPrintCRLF 2

HSerPrint "Initial Values"
HSerPrintCRLF
ShowEEprom
HSerPrintCRLF 2


Do Forever
    Set LEDD2 Off
    Set LEDD3 Off
    Set LEDD4 Off
    Set LEDD5 Off
    Outdata = Random

    For EEPromAddress = 0 To 255
        Outdata++
        EPWrite ( EEPromAddress, Outdata )
        EPRead  ( EEPromAddress, EEPROMArray(EEPromAddress) )
    Next

    ShowEEprom

    HSerPrint   "End of EEProm Program and Display"
    HSerPrintCRLF 2
    HSerPrint   "Press the button!"
    HSerPrintCRLF 2
    Set LEDD2 On
    Set LEDD3 On
    Set LEDD4 On
    Set LEDD5 On

    Wait While SWITCH = Off
Loop
End


Sub ShowEEprom

    HSerPrint "     "
    For EEPromAddress = 0 To 15
        HSerPrint Hex(EEPromAddress)
        HSerPrint " "
    Next

    For EEPromAddress = 0 To 255
        DisplayNewLine = EEPromAddress % 16
        If DisplayNewLine = 0 Then
            HSerPrintCRLF
            HSerPrint Hex(EEPromAddress)
            HSerPrint ": "
        End If
        HSerPrint " "
        HSerPrint  Hex(EEPROMArray(EEPromAddress))
    Next

    HSerPrintCRLF 2

End Sub
