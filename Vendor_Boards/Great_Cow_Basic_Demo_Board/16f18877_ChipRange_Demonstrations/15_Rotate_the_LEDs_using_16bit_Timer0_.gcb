''' A demonstration program for GCBASIC.
'''
'''******************************************************************
'''
'''  Timer0 is a counter implemented in the processor. It may be used to count instruction
'''  cycles or external events, that occur at or below the instruction cycle rate.
'''  In the PIC16, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
'''  enhanced mid-range core implements only an 8-bit counter.
'''  This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
'''  over. This frees up the processor to do meaningful work rather than wasting instruction
'''  cycles in a timing loop.
'''  Using a counter provides a convenient method of measuring time or delay loops as it
'''  allows the processor to work on other tasks rather than counting instruction cycles.
'''
'''
'''  LEDs rotate from right to left, similar to a previous demonstration, at a rate of ~1 second.
'''
'''
'''   You need four LEDs connnect to PORTD.0, PORTD.1, PORTD.2 and PORTD.3 connected via suitable resistors.
'''  ************************************************************************************************************************************************************************************
'''
'''
'''  PIC: 16f18877
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''
'''@author   EvanV
'''@licence  GPL
'''@version  1.0
'''@date     04.12.2016


'Chip Settings.
#CHIP 16f18877,32
#OPTION Explicit




'Set the PPS for this solution.
#STARTUP InitPPS, 85

Sub InitPPS
    UNLOCKPPS
    '----------------------------------------------------------------------
    'Pin RC5 source is an input for RX
    RXPPS  = 0x15
    'Pin RC4 source is TX/CK
    RC4PPS = 0x10
    '----------------------------------------------------------------------
    LOCKPPS
End Sub


'' -------------------LATD-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' LED:   ---------------|D5 |D4 |D3 |D2 |-
''-----------------------------------------
''
#DEFINE LEDD2  PORTD.0
#DEFINE LEDD3  PORTD.1
#DEFINE LEDD4  PORTD.2
#DEFINE LEDD5  PORTD.3
#DEFINE LEDBANK PORTD

Dir     LEDD2 Out
Dir     LEDD3 Out
Dir     LEDD4 Out
Dir     LEDD5 Out

#DEFINE USART_BAUD_RATE 19200
#DEFINE USART_TX_BLOCKING

Dim CURRENTSTATE As Byte


'    Set LEDS off
LEDBANK = 0
'    Set the first LED on
Set LEDD5 On

'    Initialise the timer.
'    Firstly tell the compiler to use a 16bit timer for this demonstration
#DEFINE TMR0_16BIT

'     For this we need the following:
'        Prescaler
'            1:256
'            HF int Osc, and
'            NOT to sync Timer
'       Post scaler
'            1:2
InitTimer0 Osc, PRE0_256 + TMR0_HFINTOSC ,  POST0_2
'     Start the Timer
StartTimer 0

'Every 1 sec
SetTimer ( 0 , 0x0bdc  )

Do

    'wait for the event
    Wait While TMR0IF = 0

    ' Clearing Timer flag will reset event
    TMR0IF = 0

    'get current status of the four bits
    currentstate = LEDBANK & 0x0F

    'Just rotate the bottom four bits
    'Set the carry flag
    C = 0
    Rotate  currentstate Right
    'Test the Carry flag
    If C = 1 Then currentstate.3 = 1
    'set the BIT on

    'Set the four bits
    LEDBANK = ( LEDBANK & 0xF0 ) OR currentstate

    'Set timer to 1s before the next event occurs.  This as close as you can get to 1s
    SetTimer ( 0 , 0x0bdc )

Loop
