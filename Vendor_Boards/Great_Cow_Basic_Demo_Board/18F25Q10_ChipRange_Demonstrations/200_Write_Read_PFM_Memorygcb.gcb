'''
'''  This demonstration shows the PORGMEM on the Serial Terminal.
'''
''' This shows code for writing and reading values onto the PROGMEM or PFM.
'''
'''
''' If you read the chip and look at the memory locations 0xFFC0 to 0xFFFE - you will see the correct values.
''' :10ffc000c011c211c411c611c811ca11cc11ce1171
''' :10ffd000d011d211d411d611d811da11dc11de11e1
''' :10ffe000e011e211e411e611e811ea11ec11ee1151
''' :10fff000f011f211f411f611f811fa11fc11fe11c1

'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.01
'''@date    09.07.2020
' ----- Configuration

#Chip 18F25Q10
#Option Explicit


'Generated by PIC PPS Tool for GCBASIC
'Generated for 18F25Q10
'
'Template comment at the start of the config file
'
#STARTUP InitPPS, 85
#DEFINE PPSToolPart 18F25Q10

Sub InitPPS

    'Module: EUSART1
    'TX1 > RC6
    RC6PPS = 0x0009

End Sub
'Template comment at the end of the config file


#define USART_BAUD_RATE 9600
#define USART_BLOCKING
#define USART_TX_BLOCKING

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.
' Now assumes Serial Terminal is operational

Dim  PFMAddress, DataWord as Word

wait 1 s
HSerPrintCRLF 2

HSerPrint "Send"
HSerSend 9
HSerPrint "Received"
HSerPrintCRLF

'We are sending words, so we send the PFMAddress address every two bytes (a word).
for PFMAddress = 0xFFC0 to 0xFFFE step 2
    'Write the value of the PFMAddress to the PFM - this just masks off the high byte (0xFF00) and replaces with (0x11nn) - this way we KNOW that PROGMEM is being updated for this demonstration.
    DataWord = (PFMAddress and 0x00FF) OR 0x1100

    'Display the value
    HSerPrint "0x"
    HSerPrint hex(DataWord_h)
    HSerPrint hex(DataWord)
    HSerSend 9

    'Write the value of the PFMAddress to the PFM
    PFMWrite ( PFMAddress, DataWord )

    'Reset to 0
    DataWord = 0x0000

    'Read the value of the PFMAddress to the PFM
    PFMRead  ( PFMAddress, DataWord )

    'Display the received value
    HSerPrint "0x"
    HSerPrint hex(DataWord_h)
    HSerPrint hex(DataWord)
    HSerPrintCRLF

Next
HSerPrintCRLF

do
loop
