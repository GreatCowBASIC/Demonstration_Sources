'''
'''This program shows how to provide a PWM signal of 1KHz with variable duty when the ChipMhz is 64Mhz
'''
'''The chip has multiple PWM has channels.  
'''Each PWM channel has two outputs each channel is call a slice.  
'''In the PPS these are called PWMxy. Where x is the PWM module and y is the PWM channel.  As it PWM11 and PWM12 for PWM1_16bit module address ouput channels 1 and 2.
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.00
'''@date       11.02.2023
'''********************************************************************************
#CHIP 18F26Q71
#OPTION Explicit


    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.2
    'PinManager data: v1.81.0
    'Generated for 18F26Q71
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F26Q71

    Sub InitPPS

            'Module: PWM1_16BIT
            RC0PPS = 0x000F    'PWM11 > RC0 
            RC1PPS = 0x0010    'PWM12 > RC1 

    End Sub
    'Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   -----------------SW--ADC----------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX---------LED--LED-LED LED--
''-----------------------------------------




'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATC

Dir     RC0         Out
Dir     RC1         Out
Dir     RC2         Out
Dir     RC3         Out

#DEFINE POTENTIOMETER PORTA.2
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTA.3
Dir     SWITCHIN      In

'analogue port selection
#DEFINE ADCChannelSelected ANA2
#DEFINE ADSpeed LowSpeed

' ------ Start of main program to provide a PWM signal of 1KHz with variable duty when the ChipMhz is 64Mhz


    //PWMERS External Reset Disabled
    PWM1ERS = 0x00  //! Default at POR - setting the register is for completeness only

    //PWMCLK FOSC
    PWM1CLK = 0x02

    //PWMLDS Autoload disabled
    PWM1LDS = 0x00  //! Default at POR - setting the register is for completeness only

    //PWMPRL 255
    PWM1PRL = 0xFF

    //PWMPRH 249
    PWM1PRH = 0xF9

    //PWMCPRE No prescale
    PWM1CPRE = 0x00

    //PWMPIPOS No postscale
    PWM1PIPOS = 0x00 //! Default at POR - setting the register is for completeness only

    //PWMS1P2IF PWM2 output match did not occur PWMS1P1IF PWM1 output match did not occur
    PWM1GIR = 0x00 //! Default at POR - setting the register is for completeness only

    //PWMS1P2IE disabled; PWMS1P1IE disabled;
    PWM1GIE = 0x00 //! Default at POR - setting the register is for completeness only

    //PWMPOL2 disabled; PWMPOL1 disabled; PWMPPEN disabled; PWMMODE Left aligned mode
    PWM1S1CFG = 0x00 //! Default at POR - setting the register is for completeness only

    //PWMS1P1L 0
    PWM1S1P1L =   0x80

    //PWMS1P1H 125
    PWM1S1P1H = 0x3E

    //PWMS1P2L 0
    PWM1S1P2L = 0x00

    //PWMS1P2H 125
    PWM1S1P2H = 0x7D

    //Clear PWM1_16BIT period interrupt flag
    PWM1PIF = 0  //! Default at POR - setting the register is for completeness only

    //Clear PWM1_16BIT interrupt flag
    PWM1IF = 0  //! Default at POR - setting the register is for completeness only

    //Clear PWM1_16BIT slice 1, output 1 interrupt flag
    S1P1IF = 0  //! Default at POR - setting the register is for completeness only

    //Clear PWM1_16BIT slice 1, output 2 interrupt flag
    S1P2IF = 0  //! Default at POR - setting the register is for completeness only

    //PWM1_16BIT interrupt enable bit
    PWM1IE = 0  //! Default at POR - setting the register is for completeness only

    //PWM1_16BIT period interrupt enable bit
    PWM1PIE = 0  //! Default at POR - setting the register is for completeness only

    //PWMEN enabled; PWMLD disabled; PWMERSPOL disabled; PWMERSNOW disabled;
    PWM1CON = 0x80


     // Duty Slice 1
     Dim PWM1S1P1Val as word alias PWM1S1P1H, PWM1S1P1L

     // Duty Slice 2
     Dim PWM1S1P2Val as word alias PWM1S1P2H, PWM1S1P2L


    // PWM1 Slice2 Duty fixed at 50% ( Period / 2)
    // Output on PORTC.1
       PWM1S1P2Val = 0xF9FF / 2


    // Sweep PWM1 Slice1 Duty from 0% to 50% then from 50% to 0%
    // Change DutyVal to 0xF9FF  for 0% = to 100% Sweep
    // Output on PORTC.0

    Do
          for PWM1S1P1Val = 0 to 0x7CFF  //! 50% = (Period / 2) where Period = 0xF9FF (64000-1)
            wait 250 us
            // Load new parameter values at next Period event
            PWMLOAD = 0x01
          Next

          for PWM1S1P1Val = 0x7CFF to 0x00 Step -1
            wait 250 us
            // Load new parameter values at next Period event
            PWMLOAD = 0x01
          Next

    Loop

    End
