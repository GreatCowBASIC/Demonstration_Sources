
'''
'''This demonstration program is a simple GLCD demonstration of the SSD1306 GLCD capabilities and Maths/Trig capabilities.
'''
'''This program demonstrates theGCBASIC primatives a voltmeter on a Graphical LCD (GLCD)
''':
'''You can change the microcontroller, the GLCD and the analogue port.
'''
'''To change the microcontroller simply change the #chip statement
'''To change the GLCD replace GLCD definition
'''To change the analogue port change the ADCChannelSelected constant
'''
'''************************************************************************
'''@author  StanC & EvanV
'''@licence GPL
'''@version 1.00
'''@date    31.11.2022
' ----- Configuration


'Chip Settings.
#CHIP 18F16Q20
#OPTION Explicit

    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F16Q20

    Sub InitPPS
    
            // Module: I2C1
            RB6PPS = 0x001C    // SCL1 > RB6
            I2C1SCLPPS = 0x000E    // RB6 > SCL1 (bi-directional)
            RB5PPS = 0x001D    // SDA1 > RB5
            I2C1SDAPPS = 0x000D    // RB5 > SDA1 (bi-directional)

            // Module: UART pin directions
            Dir PORTB.7 Out    // Make TX1 pin an output
            // Module: UART1
            RB7PPS = 0x0013    // TX1 > RB7

    End Sub
    'Template comment at the end of the config file

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF


/*
    Hardware
    -------------------PORTA----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    -----------------SW---------ADC-- 
    -----------------------------------------

    -------------------PORTB----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    TX-----------^-------------------
    ------------------VDDIO3---------------- You must apply correct Voltage
    
    ------------------PORTC-----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    LED-LED-LED-LED------^-----------
    --------------------------VDDIO2-------- You must apply correct Voltage

  */

// Define constants to make things easier. We can reuse these at any time.
    #DEFINE LEDPORT LATC
    #DEFINE LEDD7 PORTC.7
    #DEFINE LEDD6 PORTC.6
    #DEFINE LEDD5 PORTC.5
    #DEFINE LEDD4 PORTC.4

// Set the ports as an output
    Dir LEDD7 Out
    Dir LEDD6 Out
    Dir LEDD5 Out
    Dir LEDD4 Out

    #DEFINE POTENTIOMETER PORTA.0
    // This is the PORTA.0 port
    Dir POTENTIOMETER In

    #DEFINE SWITCHIN      PORTA.3
    Dir     SWITCHIN      In
    #DEFINE DOWN          0


// Define I2C settings
    #DEFINE HI2C_BAUD_RATE  100
    #DEFINE HI2C_DATA       PORTB.5
    #DEFINE HI2C_CLOCK      PORTB.6
    HI2CMode (Master)

#INCLUDE <glcd.h>
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address 0x78
#DEFINE GLCD_PROTECTOVERRUN

#INCLUDE <trig2places.h>

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

'analogue port selection
#DEFINE ADCChannelSelected ANA0
#DEFINE ADSpeed LowSpeed



'*******************************************************************************************

Dim radius,xcentre,ycentre,xend,old_xend,yend,old_yend As Byte
Dim angle,old_angle,adcval As Word
Dim volts As String * 4
xcentre=63
ycentre=58
'draw dial
GLCDCLS
Box 0,0,127,63
For radius=144 To 141 step -1
    dial
Next radius
GLCDDrawChar (5,40,Asc("0")):GLCDDrawChar (115,40,Asc("5"))
radius=120
angle=1
anglecheck

Do
    old_angle=angle
    '--- DVM
    adcval=ReadAD10(ADCChannelSelected)

    //Calicabrate to 4.08V
    adcval = scale( adcval, 0, 1023, 0, 255 )
    angle=adcval/2
    '
    adcval=adcval*100
    adcval=adcval/51
    volts=Str(adcval)
    If adcval<10 Then
        volts="0.0"+Left(volts,1,1)
        Goto volt_format_done
    End If
    If adcval<100 Then
        volts="0."+Mid(volts,1,2)
    Else
        volts=Left(volts,1,1)+"."+Mid(volts,2,2)
    End If
volt_format_done:
    '---
    anglecheck
    old_xend = xcentre + radius  * sin (old_angle)/255
    old_yend = ycentre - radius  * cos (old_angle)/255
    xend = xcentre + radius  * sin (angle)/255
    yend = ycentre - radius  * cos (angle)/255
    If old_angle<>angle Then
        '-- update screen if volts has changed
        '   erase old needle

        Line (xcentre,ycentre,old_xend,old_yend,0)
        '   draw V
        Line (55,22,63,38):Line (63,38,71,22)
        '   print new voltage
        'print Voltage
        GLCDPrint (50,10,volts,1)
        '   draw new needle
        Line (xcentre,ycentre,xend,yend,1)
        Wait 20 ms
    End If
Loop
'end main


Sub plotdial
    xend = 63 + radius  * sin (angle)/255
    yend = 58 - radius  * cos (angle)/255
    Pset (xend,yend,1)
End Sub
'
Sub dial
    For angle= 296 To 359
        plotdial
    Next angle
    '
    For angle= 0 To 63
        plotdial
    Next angle
End Sub
'
Sub anglecheck
    If angle>127 Then
        angle =angle-127
    Else
        angle =296+angle
    End If
End Sub
