/*
    This demonstration flashes an LED to show the use of a Timer 0 overflow event

    Timer0 is a counter implemented in the processor. It may be used to count instruction
    cycles or external events, that occur at or below the instruction cycle rate.
    In thE pic, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
    enhanced mid-range core implements only an 8-bit counter.
    This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
    over. This frees up the processor to do meaningful work rather than wasting instruction
    cycles in a timing loop.
    Using a counter provides a convenient method of measuring time or delay loops as it
    allows the processor to work on other tasks rather than counting instruction cycles.


    ************************************************************************
    @author  EvanV
    @licence GPL
    @version 1.00
    @date    04-02-2024
*/
' ----- Configuration

'Chip Settings.
#CHIP 18F16Q20, 16
#OPTION Explicit

/*
    Hardware
    -------------------PORTA----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    -----------------SW---------ADC-- 
    -----------------------------------------


    -------------------PORTB----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    TX-------------------------------
    ----------------------------------------

    ------------------PORTC-----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    LED-LED-LED-LED------------------
    ----------------------------------------
  */

// Define constants to make things easier. We can reuse these at any time.
    #DEFINE LEDPORT LATC
    #DEFINE LEDD7 PORTC.7
    #DEFINE LEDD6 PORTC.6
    #DEFINE LEDD5 PORTC.5
    #DEFINE LEDD4 PORTC.4

// Set the ports as an output
    Dir LEDD7 Out
    Dir LEDD6 Out
    Dir LEDD5 Out
    Dir LEDD4 Out

    #DEFINE POTENTIOMETER PORTA.0
    // This is the PORTA.0 port
    Dir POTENTIOMETER In

    #DEFINE SWITCHIN      PORTA.3
    Dir     SWITCHIN      In
    #DEFINE DOWN          0

//*****************************************************************************************************
// Main program commences here.. everything before this is setup for the board.

Dim TIMEOUT As Byte


// Initialise the timer.
// Firstly tell the compiler to use a 16bit timer for this demonstration
#DEFINE TMR0_16BIT

//   For this we need the following:
//     Prescaler with the FOSC/4 with no post scaler
//         1:64
InitTimer0 Osc, PRE0_64 + TMR0_FOSC4 ,  POST0_1

// Every 1 sec.  0x0bdc is calculated value using a tool like Mr E. Timer Helper
SetTimer ( 0 , 0x0bdc  )

// Set the type of event
On Interrupt Timer0Overflow Call blink

// Start the Timer - you need to start this Timer0!
StartTimer 0

// Set one bit of the port on, where 1 equate to ON
LEDD4 = 1

    Do Forever

        If TimeOut = 1 Then

            // Rotate the LEDs.  We are only interested in the four LEDs
            Set C Off
            Rotate LEDPORT Left
            IF C = 1 Then LEDD4 = 1

            TimeOut= 0
            // Set timer to 1 second - there is some processing time to be included here... so, your scope will show you the exact period.
            SetTimer ( 0, 0x0bdc )

        End If

    Loop


Sub blink
    TimeOut = 1
    // Clear the Timer0 overflow event - this is a added for clarity. 
    // GCBASIC automatically clears the event flag for you
    TMR0IF = 0
End Sub
