'''
'''  This demonstration produces a variable speed rotating LED display that is proportional to the ADC value.
'''  The ADC value and LED rotate speed are  proportional to each other.
'''
'''  The demonstration also introduces the PERIPHERAL PIN SELECT (PPS) MODULE.  We have created the Serial PPS settings for you on Port C.4.
'''
'''  Rotate the POT to see the LEDs shift faster, and press the switch to reverse the direction of the LEDs.
'''
'''  The Serial port shows the value of the ADC and the direction!
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.02
'''@date    31.11.2022
' ----- Configuration

'Chip Settings.
#CHIP 18F16Q20
#OPTION Explicit
'This Configuration change is needed to enable programming in Low Voltage Programming Mode


    #startup InitPPS, 85
    #define PPSToolPart 18F16Q20

    Sub InitPPS

            'Module: UART pin directions
            Dir PORTC.4 Out    ' Make TX1 pin an output
            'Module: UART1
            RC4PPS = 0x13       ' RC4->EUSART1:TX1

    End Sub
    'Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   -----------------SW----------ADC--
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -----------TX1-LED--LED-LED LED--
''-----------------------------------------

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATC

Dir     RC0         Out
Dir     RC1         Out
Dir     RC2         Out
Dir     RC3         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTA.3
Dir     SWITCHIN      In

'USART settings - setup the serial port - connects to PortC.4 via PPS
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING


'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

Dim direction As Byte
Dim mydelay As Word
Dim leds  As Byte
#DEFINE LED_RIGHT 0
#DEFINE LED_LEFT  1

'start from the right to left
direction = LED_RIGHT

'Set the initial LED states - change to suit your configuration
#DEFINE LEDSTATEMACRO RC0 = 0: RC1 = 0: RC2 = 0: RC3 = 1
#DEFINE LEDMASK = 0x1111000
leds = 0b10000



wait 2 s

HSerPrintCRLF
HSerPrint "GCBASIC 2022 "
HSerPrint ChipNameStr
HSerPrint " at "
HSerPrint ChipMHz
HSerPrint "mHz"
HSerPrintCRLF

wait 2 s

Do
    'Get a value for the ADC port
    mydelay = ReadAD12( ANA0 )
    mydelay = Scale( mydelay, 0, 4095, 25, 200 )

    'Show state
    If direction = LED_RIGHT Then
        HSerPrint ">R"
    Else
        HSerPrint "<L "
    End If
    HSerSend 9
    HSerPrint mydelay
    HSerPrintCRLF

    'Set the LEDs
    If  direction = LED_RIGHT  Then
        'Rotate the LEDs.  We are only interested in the four LEDs so we mask the other bits.
        Set C Off
        ' and shift the contents of LEDState
        Rotate leds Right
        ' If the LEDState.0is equal to 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
        If C = 1 Then
            leds = 16
        End if
        LEDPORT = ( LEDPORT and LEDMASK ) or leds

    Else
        'Rotate the LEDs.  We are only interested in the four LEDs so we mask the other bits.
        Set C Off
        ' and shift the contents of LEDState
        Rotate leds Left
        ' If the LEDState.0is equal to 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
        If leds = 32 Then
            'Mask off the other bits
            leds = 1
        End If
        LEDPORT = ( LEDPORT and LEDMASK ) or leds


    End If

    'wait, and then check the switch is DOWN
    If mydelay > 0 Then
        Wait mydelay ms
        If check_switch = TRUE Then
            ' toggle the direction
            direction = !direction
        End If
    End If


Loop

End

'global variable - if button is held down, we don't want to keep on switching directions
#DEFINE SWITCH_UP   1
#DEFINE SWITCH_DOWN 0

Dim previous_state As BIT
previous_state = SWITCH_UP

Function  check_switch
    'switch is normally open to 5V ...when pressed, RA3 is connected to GND
    If (SwitchIn = SWITCH_DOWN) Then
        'debounce by delaying and checking if switch is still pressed
        Wait 1 ms
        If ( (previous_state =  SWITCH_DOWN) & (SwitchIn = SWITCH_DOWN) ) Then
            ' don't toggle
            check_switch = FALSE
            Exit Function
        Else
            ' check if still down
            If (SwitchIn = SWITCH_DOWN) Then
                previous_state = SWITCH_DOWN
                ' reverse the LEDs
                check_switch = TRUE
                Exit Function
            Else
                'switch not properly held down
                previous_state = SWITCH_UP
                ' don't reverse
                check_switch = FALSE
                Exit Function
            End If
        End If
    Else
        'switch not pressed
        previous_state = SWITCH_UP
        'don't reverse
        check_switch = FALSE
        Exit Function
    End If

End Function



/* GCODE Optimisation file - this will optimise ADC operations by disabling the ADC operations on the AD channel that is set to FALSE
                          to enable ADC operations on a specific AD channel set to TRUE

    Legacy chip Constants for ADC
*/
          #DEFINE USE_AD0 FALSE
          #DEFINE USE_AD1 FALSE
          #DEFINE USE_AD2 FALSE
          #DEFINE USE_AD2 FALSE
          #DEFINE USE_AD3 FALSE
          #DEFINE USE_AD4 FALSE
          #DEFINE USE_AD5 FALSE
          #DEFINE USE_AD6 FALSE
          #DEFINE USE_AD7 FALSE
          #DEFINE USE_AD8 FALSE
          #DEFINE USE_AD9 FALSE
          #DEFINE USE_AD10 FALSE
          #DEFINE USE_AD11 FALSE
          #DEFINE USE_AD12 FALSE
          #DEFINE USE_AD13 FALSE
          #DEFINE USE_AD14 FALSE
          #DEFINE USE_AD15 FALSE
          #DEFINE USE_AD16 FALSE
          #DEFINE USE_AD17 FALSE
          #DEFINE USE_AD18 FALSE
          #DEFINE USE_AD19 FALSE
          #DEFINE USE_AD20 FALSE
          #DEFINE USE_AD21 FALSE
          #DEFINE USE_AD22 FALSE
          #DEFINE USE_AD23 FALSE
          #DEFINE USE_AD24 FALSE
          #DEFINE USE_AD25 FALSE
          #DEFINE USE_AD26 FALSE
          #DEFINE USE_AD27 FALSE
          #DEFINE USE_AD28 FALSE
          #DEFINE USE_AD29 FALSE
          #DEFINE USE_AD30 FALSE
          #DEFINE USE_AD31 FALSE
          #DEFINE USE_AD32 FALSE
          #DEFINE USE_AD33 FALSE
          #DEFINE USE_AD34 FALSE
//      Recent chip Constants for ADC
          #DEFINE USE_ADA0 TRUE
          #DEFINE USE_ADA1 FALSE
          #DEFINE USE_ADA2 FALSE
          #DEFINE USE_ADA3 FALSE
          #DEFINE USE_ADA4 FALSE
          #DEFINE USE_ADA5 FALSE
          #DEFINE USE_ADA6 FALSE
          #DEFINE USE_ADA7 FALSE
          #DEFINE USE_ADB0 FALSE
          #DEFINE USE_ADB1 FALSE
          #DEFINE USE_ADB2 FALSE
          #DEFINE USE_ADB3 FALSE
          #DEFINE USE_ADB4 FALSE
          #DEFINE USE_ADB5 FALSE
          #DEFINE USE_ADB6 FALSE
          #DEFINE USE_ADB7 FALSE
          #DEFINE USE_ADC0 FALSE
          #DEFINE USE_ADC1 FALSE
          #DEFINE USE_ADC2 FALSE
          #DEFINE USE_ADC3 FALSE
          #DEFINE USE_ADC4 FALSE
          #DEFINE USE_ADC5 FALSE
          #DEFINE USE_ADC6 FALSE
          #DEFINE USE_ADC7 FALSE
          #DEFINE USE_ADD0 FALSE
          #DEFINE USE_ADD1 FALSE
          #DEFINE USE_ADD2 FALSE
          #DEFINE USE_ADD3 FALSE
          #DEFINE USE_ADD4 FALSE
          #DEFINE USE_ADD5 FALSE
          #DEFINE USE_ADD6 FALSE
          #DEFINE USE_ADD7 FALSE
          #DEFINE USE_ADE0 FALSE
          #DEFINE USE_ADE1 FALSE
          #DEFINE USE_ADE2 FALSE
