/*
    This demonstration shows the impact of the time delay to manage the debouncing of a switch.
    The ADC value creates a delay and LEDs switch between each other when the switch is depressed.


    Press the switch to reverse the direction of the LEDs, increase the ADC value to increase the debounce check.

    ************************************************************************
    @author  EvanV
    @licence GPL
    @version 1.00
    @date    21/11/2024
    ----- Configuration
*/
// Chip Settings.
#CHIP 18F26Q24
#OPTION Explicit

/*
    Hardware
    -------------------PORTA----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------SW----------ADC-- 
    ----------------------------------------

    -------------------PORTB----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------LED-LED-LED-LED--
    ----------------------------------------
    
    ------------------PORTC-----------------
    Bit#:  -X---6---5---4---3---2---1---0---
    IO:    -^-------------------------------
    -----VDDIO2----------------------------- You must apply correct Voltage

    -------------------PORTE----------------
    Bit#:  -----------------3---------------
    IO:---------------------SW-------------- INTMCLR or EXTMCLR
    
  */

    // Define constants to make things easier. We can reuse a constant at any time.
    #DEFINE LEDD0 PORTB.0
    #DEFINE LEDD1 PORTB.1
    #DEFINE LEDD2 PORTB.2
    #DEFINE LEDD3 PORTB.3

    #DEFINE LEDPORT LATB

    Dir     LEDD0 Out
    Dir     LEDD1 Out
    Dir     LEDD2 Out
    Dir     LEDD3 Out

    #DEFINE POTENTIOMETER PORTA.0
    //This is the PORTA.0 port
    Dir POTENTIOMETER In

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

    #DEFINE SWITCHIN      PORTA.3
    Dir     SWITCHIN      In
    #DEFINE DOWN          1

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

//*****************************************************************************************************
//Main program commences here.. everything before this is setup for the board.

    Dim direction As Bit
    Dim mydelay As Word
    Dim LEDportState as Byte
    
    //  Control Constants 
        #DEFINE LED_RIGHT 0
        #DEFINE LED_LEFT  1

//Start from left direction
    direction = LED_LEFT

//Set the initial LED states - change to suit your configuration
    LEDportState = 1

Do




    //Get a value for the ADC port
        mydelay = ReadAD( ANA0 )
        mydelay = scale( mydelay, 0, 255, 50, 1000 )

    //Set the port and only the state of our LEDs
        LATB = LEDportState AND 0b00001111

    //Wait, and then check the switch has been pressed
        Wait mydelay ms

    // Manage the direction
        If  funcKeyPressed() = TRUE Then
            //  change the direction
            direction = !direction
        End If

    //Set the LEDs
        If  direction = LED_LEFT  Then
            If LEDportState.3 = 1 then 
                LEDportState = 0
                C = 1
            Else
                C = 0
            End If
            'shift the contents of LEDportState
            Rotate LEDportState Left
        Else
            'shift the contents of LEDportState
            C = 0
            Rotate LEDportState Right
            If C = 1 Then LEDportState.3 = 1
        End If





Loop

// This is function, it returns the state of the switch
    Function  funcKeyPressed as Bit
    
        // Define some variables
        Dim CurrentSwitchState As Bit
        Dim LastSwitchState As Bit

        wait 1 ms

        // Is the switch pressed down ?
        If ( SWITCHIN = DOWN ) Then
            // Set the state
            CurrentSwitchState = TRUE
        Else
            // So, switch is therefore UP/released
            CurrentSwitchState = FALSE
        End If

        // This check ensures the state of the switch ....
        // ensure the switch has changed state
        If ( CurrentSwitchState <> LastSwitchState ) AND ( CurrentSwitchState = TRUE ) Then
            // Return the state value - returns TRUE
            funcKeyPressed = TRUE
        Else      
            // Switch is not down
            funcKeyPressed = FALSE
        End If

        LastSwitchState = CurrentSwitchState

    End Function