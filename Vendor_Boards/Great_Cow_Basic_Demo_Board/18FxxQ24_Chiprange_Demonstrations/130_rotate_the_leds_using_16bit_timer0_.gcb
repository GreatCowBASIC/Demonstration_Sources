/*
    This demonstration flashes an LED to show the use of a 16Bit Timer 0

    Timer0 is a counter implemented in the processor. It may be used to count instruction
    cycles or external events, that occur at or below the instruction cycle rate.
    In the PIC18, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
    enhanced mid-range core implements only an 8-bit counter.

    This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
    over. This frees up the processor to do meaningful work rather than wasting instruction
    cycles in a timing loop using a 16bit timer.
    Using a counter provides a convenient method of measuring time or delay loops as it
    allows the processor to work on other tasks rather than counting instruction cycles.

    LEDs should flash  ~1 second.
*/ 

// Chip Settings 
//! The timer calculations are based on 16mHz.  
//! You would need to recalculate the timer values if 16mHz is not used
#CHIP 18F26Q24, 16
#OPTION Explicit

    // PIC PPS Tool version: 0.0.6.5
    
    #startup InitPPS, 85
    #define PPSToolPart 18F26Q24

    Sub InitPPS
            
            // Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            // Module: UART1
            RC6PPS = 0x0015    // TX1 > RC6
        
        End Sub
    // Add this code segment to your GCBASIC source program

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF
    
    //! Optional verification of auto baud rate calculation
        //! #DEFINE ISSUE_CHECK_USART_BAUD_RATE_WARNING

/*
    Hardware
    -------------------PORTA----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------SW----------ADC-- 
    ----------------------------------------

    -------------------PORTB----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------LED-LED-LED-LED--
    ----------------------------------------
    
    ------------------PORTC-----------------
    Bit#:  -X---6---5---4---3---2---1---0---
    IO:    -^--TX---------------------------
    -----VDDIO2----------------------------- You must apply correct Voltage

    -------------------PORTE----------------
    Bit#:  -----------------3---------------
    IO:---------------------SW-------------- INTMCLR or EXTMCLR
    
  */

    // Define constants to make things easier. We can reuse a constant at any time.
    #DEFINE LEDD0 PORTB.0
    #DEFINE LEDD1 PORTB.1
    #DEFINE LEDD2 PORTB.2
    #DEFINE LEDD3 PORTB.3

    #DEFINE LEDPORT LATB

    Dir     LEDD0 Out
    Dir     LEDD1 Out
    Dir     LEDD2 Out
    Dir     LEDD3 Out

    #DEFINE POTENTIOMETER PORTA.0
    //This is the PORTA.0 port
    Dir POTENTIOMETER In

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

    #DEFINE SWITCHIN      PORTA.3
    Dir     SWITCHIN      In
    #DEFINE DOWN          1

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

//*****************************************************************************************************
// Main program commences here.. everything before this is setup for the board.

// Initialise the timer.
    // Firstly tell the compiler to use a 16bit timer for this program
    #DEFINE TMR0_16BIT

    // For this we need the following for timer0
    //       Prescaler with the FOSC/4 with no post scaler
    //          1:64
    InitTimer0 Osc, PRE0_64 + TMR0_FOSC4 ,  POST0_1
    //    Start the Timer
    StartTimer 0

    // Every 1 sec.  0x0bdc is calculated value using a tool like Mr E. Timer Helper
    SetTimer ( 0 , 3036  )

    // Create byte variable as a flag
    Dim TIMEOUT As Bit

    // Initialize a variable to hold the LED states
    DIM LEDs AS BYTE
    LEDs = 0B0001  // Start with the first LED on

    // Initialize a counter for rotations
    DIM RotateCount AS BYTE
    RotateCount = 0


Do

    // wait for the event
    Wait While TMR0IF = 0

    // Clearing Timer 0 flag will reset event
    TMR0IF = 0

//! Same rotate code as 040

    HSerPrintStringCRLF "."

    // Output the current state to PORTB
    LATB = LEDs
    
    // Rotate the LEDs to the left
    Rotate LEDs Left Simple
    
    // Increment the rotation counter
    RotateCount = RotateCount + 1
    
    // Reset the LEDs after 4 rotations
    If RotateCount >= 4 Then
        LEDs = 0B0001  // Reset to initial state
        RotateCount = 0  // Reset counter
    End If
        
    // Set timer 0 to 1s before the next event occurs.  This value as close as you can get to 1s
    SetTimer ( 0 , 3036 )

Loop
