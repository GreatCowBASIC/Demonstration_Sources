/*
    This demonstration flashes an LED to show the use of an 8Bit Timer 0

    Timer0 is a counter implemented in the processor. It may be used to count instruction
    cycles or external events, that occur at or below the instruction cycle rate.
    In the PIC18, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
    enhanced mid-range core implements only an 8-bit counter.

    This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
    over. This frees up the processor to do meaningful work rather than wasting instruction
    cycles in a timing loop.
    Using a counter provides a convenient method of measuring time or delay loops as it
    allows the processor to work on other tasks rather than counting instruction cycles.


    ************************************************************************
    @author  EvanV
    @licence GPL
    @version 1.00
    @date    24-11-2024
    */


'Chip Settings.
#CHIP 18F26Q24, 16
#OPTION Explicit

    // PIC PPS Tool version: 0.0.6.5
    
    #startup InitPPS, 85
    #define PPSToolPart 18F26Q24

    Sub InitPPS
            
            // Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            // Module: UART1
            RC6PPS = 0x0015    // TX1 > RC6
        
        End Sub
    // Add this code segment to your GCBASIC source program

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF
    
    //! Optional verification of auto baud rate calculation
        //! #DEFINE ISSUE_CHECK_USART_BAUD_RATE_WARNING

/*
    Hardware
    -------------------PORTA----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------SW----------ADC-- 
    ----------------------------------------

    -------------------PORTB----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------LED-LED-LED-LED--
    ----------------------------------------
    
    ------------------PORTC-----------------
    Bit#:  -X---6---5---4---3---2---1---0---
    IO:    -^--TX---------------------------
    -----VDDIO2----------------------------- You must apply correct Voltage

    -------------------PORTE----------------
    Bit#:  -----------------3---------------
    IO:---------------------SW-------------- INTMCLR or EXTMCLR
    
  */

    // Define constants to make things easier. We can reuse a constant at any time.
    #DEFINE LEDD0 PORTB.0
    #DEFINE LEDD1 PORTB.1
    #DEFINE LEDD2 PORTB.2
    #DEFINE LEDD3 PORTB.3

    #DEFINE LEDPORT LATB

    Dir     LEDD0 Out
    Dir     LEDD1 Out
    Dir     LEDD2 Out
    Dir     LEDD3 Out

    #DEFINE POTENTIOMETER PORTA.0
    //This is the PORTA.0 port
    Dir POTENTIOMETER In

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

    #DEFINE SWITCHIN      PORTA.3
    Dir     SWITCHIN      In
    #DEFINE DOWN          1

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

//*****************************************************************************************************
// Main program commences here.. everything before this is setup for the board.

//! Initialise the timer.
    '     For this we need the following:
    '       Prescaler with the FOSC/4
    '           1:256 which is the constant PRE0_256
    '       Prescaler with the FOSC/4 with a post scaler
    '           1:1 which is the constant POST0_1

    InitTimer0 Osc, PRE0_256 + TMR0_FOSC4 ,  POST0_1

    '   Start the Timer
    StartTimer 0

    'Every 10 msec, we will count 100 to make 1 second
    SetTimer ( 0 , 0x9b  )

    'we will use this to count the number of times the event happens
    Dim TimerCounter As Byte
    TimerCounter = 0

    //! Support variables

        // Initialize a variable to hold the LED states
        DIM LEDs AS BYTE
        LEDs = 0B0001  // Start with the first LED on

        // Initialize a counter for rotations
        DIM RotateCount AS BYTE
        RotateCount = 0


Do
    'wait for the event
    Wait While TMR0IF = 0
    ' Clearing Timer flag will reset event
    TMR0IF = 0

    TimerCounter = TimerCounter + 1

    'When at 100 we are at 1 s
    If TimerCounter = 100 Then

        //! Same code as previous demo 040

            HSerPrintStringCRLF "."

            // Output the current state to PORTB
            LATB = LEDs
            
            // Rotate the LEDs to the left
            Rotate LEDs Left Simple
            
            // Increment the rotation counter
            RotateCount = RotateCount + 1
            
            // Reset the LEDs after 4 rotations
            If RotateCount >= 4 Then
                LEDs = 0B0001  // Reset to initial state
                RotateCount = 0  // Reset counter
            End If

        TimerCounter = 0

        ' Set the Timer start value
        SetTimer ( 0 , 0x9b  )

    End If
Loop
