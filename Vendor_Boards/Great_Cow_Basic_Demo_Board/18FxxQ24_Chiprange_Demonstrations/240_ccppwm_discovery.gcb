#CHIP 18F26Q24, 16
#OPTION Explicit


    // PIC PPS Tool version: 0.0.6.5
    #define PPSToolPart 18F26Q24

    Sub InitPPS
            
            // Module: CCP1
            RB0PPS = 0x000D    // CCP1 > RB0
            CCP1PPS = 0x0008    // RB0 > CCP1 (bi-directional)
            RB1PPS = 0x000D    // CCP1 > RB1
            CCP1PPS = 0x0009    // RB1 > CCP1 (bi-directional)
            RB2PPS = 0x000D    // CCP1 > RB2
            CCP1PPS = 0x000A    // RB2 > CCP1 (bi-directional)
            RB3PPS = 0x000D    // CCP1 > RB3
            CCP1PPS = 0x000B    // RB3 > CCP1 (bi-directional)
            // Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            // Module: UART1
            RC6PPS = 0x0015    // TX1 > RC6
        
        End Sub
    // Add this code segment to your GCBASIC source program

    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF
    
    //! Optional verification of auto baud rate calculation
        //! #DEFINE ISSUE_CHECK_USART_BAUD_RATE_WARNING

    // Define constants to make things easier. We can reuse a constant at any time.
    #DEFINE LEDD0 PORTB.0
    #DEFINE LEDD1 PORTB.1
    #DEFINE LEDD2 PORTB.2
    #DEFINE LEDD3 PORTB.3

    #DEFINE LEDPORT LATB

    Dir     LEDD0 Out
    Dir     LEDD1 Out
    Dir     LEDD2 Out
    Dir     LEDD3 Out

    #DEFINE POTENTIOMETER PORTA.0
    //This is the PORTA.0 port
    Dir POTENTIOMETER In

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

    #DEFINE SWITCHIN      PORTA.3
    Dir     SWITCHIN      In
    #DEFINE DOWN          1

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

' ------ Start of main Program
    //~ 11/12/2024 Updated to support T2PR and PR2 via conditional compilation

    // #DEFINE DEVELOPER_PWM_DEBUG     
    #DEFINE PWM_FREQ    38
    #DEFINE PWM_DUTY    50

                HSerSend 1  // clear terminal
                wait 100 ms
                HSerSend 1  // clear terminal
                wait 100 ms
                HSerPrintStringCRLF "Hardware CCP/PWM Discovery"
                

                HSerPrintStringCRLF "Before PWMon = Fixed Mode PWM"
                ShowDetails
                
    PWMOn  

                HSerPrintStringCRLF "After PWMon"
                ShowDetails
                HserPrintCRLF 2
                HSerPrintStringCRLF "If no Fixed Mode PWM signal... are the PWM ports set to OUT? Correct PPS?"
                HSerPrintStringCRLF " or, the registers in this chip are not the same is on previous chips"
                HSerPrintStringCRLF "     compare CCPCONCache  to CCP1CON.  The enable bit needs to set for Fixed Mode PWM to work"
                HSerPrintStringCRLF "     the error is probalby a renamed bit in CCP1CON or one of the other key registers/"
                
                HserPrintCRLF 2

                Repeat 10
                    wait 500 ms
                    HserSend "."
                End Repeat

                HserPrintCRLF
                HSerPrintStringCRLF "PWMOff"
    PWMoff

                HserPrintCRLF
                HSerPrintStringCRLF "After PWMoff"
                ShowDetails
                HSerPrintStringCRLF "Fixed mode PWM signal will now stop"
                HserPrintCRLF
                wait 2 s

    #DEFINE CALCULATED_PWM_DUTY  ( ( 255 * PWM_DUTY ) / 100  )

    // These variables are in pmw.h used to calc the registers. Set to zero here just to see the values after the functional call.
                PWMDuty = 0
                PWMResolution = 0

                HSerPrint "Issue `HPWM 1, PWM_FREQ,"
                HSerprint CALCULATED_PWM_DUTY
                HSerPrintStringCRLF "` command.  The third parameter range is 0 to 255, where 127 = 50%"
                HserPrintCRLF

    HPWM 1, PWM_FREQ, CALCULATED_PWM_DUTY           
    // HPWM_CCPTimerN 1, PWM_FREQ, CALCULATED_PWM_DUTY, 2  // Equates to using Timer2

    //! uncomment to add this to the pwm.h section as a test, if no PWM signal    
    // #define AddHPWMCCPExit1 CCP1CON  = CCPCONCache
    
                HSerPrintStringCRLF pad("", 80, "*")
                HSerPrint "After `HPWM 1, PWM_FREQ,"
                HSerprint CALCULATED_PWM_DUTY
                HSerPrintStringCRLF "` command"

                HSerPrintCRLF 2
                HSerPrintStringCRLF " As HPWM() used same Frq & Duty as `fixed mode PWM`, then, CCP1CON should be equal to CCPCONCache"
                HSerPrintCRLF 
                HSerPrintStringCRLF "No signal ?"
                HSerPrintStringCRLF "  1. Has ChipFamilyPWMCCP1CON16Handler, in PWM.h, been updated for this chip family ?"
                HSerPrintStringCRLF "     If the specific chip has ONLY ONE CCP then the section ChipFamilyPWMCCP1CON16Handler must be updated"
                HSerPrintStringCRLF "     So, check the datasheet for CCP1 only.. so, search for CCP2 if not found then only one CCP"
                HSerPrintCRLF
                HSerPrintStringCRLF "  2. Is CCPTMRS0 correct for timer2? if not, is PWMTimerVariant in DAT file the correct value ?"
                HSerPrintCRLF
                HSerPrintStringCRLF "  3. Examine SETUPCCPPWMREGISTERS section in pwm.h... there is clearly a library issue"
                HserPrintCRLF
                HSerPrintStringCRLF "If PWM is working.. Then, all is good!"


                HSerPrintStringCRLF pad("", 80, "*")
                ShowDetails

                HserPrintCRLF
                HSerPrintStringCRLF "Completed - examine results"

                Do
                Loop












Sub ShowDetails

    #IFDEF VAR(PPSLOCK)
        //! If this causes and error .. remove the first one. Let the be the only #startup instruction
        #startup InitPPS, 85
    #endif

    HSerPrint "Constants"               : HserPrintCRLF
        HserPrint "PWM_FREQ:        "
            HserPrint PWM_FREQ          : HserPrintCRLF
        HserPrint "PWM_DUTY:        "
            HserPrint PWM_DUTY          : HserPrintCRLF
        HserPrint "USE_HPWMCCP1:    "
            HserPrint USE_HPWMCCP1      : HserPrintCRLF
        HserPrint "USE_HPWM_TIMER2: "
            HserPrint USE_HPWM_TIMER2   : HserPrintCRLF
        #If def(DisableCCPFixedModePWM) 
            HserPrint "DisableCCPFixedModePWM: "
                HserPrint DisableCCPFixedModePWM    : HserPrintCRLF
        #endif

    HserPrintCRLF
    HserPrint "Registers": HserPrintCRLF
        PReg("CCP1CON      ", CCP1CON, "CCP Control Register" )
        PReg("CCPCONCache  ", CCPCONCache, "Cached register used to by PWMon" )
        #ifdef var(T2PR)
            PReg("T2PR         ", T2PR, "Timer Period" )
        #else
            PReg("PR2          ", PR2, "Timer Period" )
        #endif
        Preg("T2CON        ", T2CON ,"Timer2 control")
        Preg("T2CLKCON     ", T2CLKCON, "Clock Source Selection" )
        Preg("CCPR1H       ", CCPR1H, "Duty cycle H" )
        Preg("CCPR1L       ", CCPR1L, "Duty cycle L")
        Preg("CCPTMRS0     ", CCPTMRS0, "Timer Selection")
        
        
    HserPrintCRLF
    HserPrint "Variables": HserPrintCRLF
        dim _PWMTimerSelected as Byte
        Preg( "_PWMTimerSelected", _PWMTimerSelected, "Selected Timer")
        Preg( "PWMDuty          ", PWMDuty, "[WORD] used in calculateDuty() in pwm.h ")
        Preg( "PWMResolution    ", PWMResolution, "[WORD] used in calculateDuty() in pwm.h")
        
        

End Sub

Macro PReg ( xstr, xreg , comment )

        
        HSerPrint "  "+xstr+": "
            HSerPrint ByteToBin(xreg): HSerPrint ", 0x"+Hex(xreg):HSerPrint ", "+ Pad(Str(xreg),10," "  ):HserPrint chr(9)+comment: HserPrintCRLF


End Macro



/* GCBASIC Optimisation file - this will optimise PWM operations by disabling the PWM operations on the PWM channel and Timer that is set to FALSE
                             to enable PWM and Timer operations set to FALSE

           Optimise CCP/PWM    
*/

           #DEFINE USE_HPWMCCP1 TRUE
           #DEFINE USE_HPWMCCP2 FALSE
           #DEFINE USE_HPWMCCP4 FALSE
           #DEFINE USE_HPWMCCP5 FALSE

//         Optimise PWM
           #DEFINE USE_HPWM1 TRUE
           #DEFINE USE_HPWM2 FALSE
           #DEFINE USE_HPWM3 FALSE
           #DEFINE USE_HPWM4 FALSE
           #DEFINE USE_HPWM5 FALSE
           #DEFINE USE_HPWM6 FALSE
           #DEFINE USE_HPWM7 FALSE
           #DEFINE USE_HPWM8 FALSE

//         Optimise Timers associated with PWM operations
           #DEFINE USE_HPWM_TIMER2 TRUE
           #DEFINE USE_HPWM_TIMER4 FALSE
           #DEFINE USE_HPWM_TIMER6 FALSE
