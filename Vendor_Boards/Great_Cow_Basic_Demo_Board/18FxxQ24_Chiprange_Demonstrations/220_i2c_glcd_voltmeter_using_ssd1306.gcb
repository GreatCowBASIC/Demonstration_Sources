/*
This demonstration program is a simple GLCD demonstration of the SSD1306 GLCD capabilities and Maths/Trig capabilities.

This program demonstrates theGCBASIC primatives a voltmeter on a Graphical LCD (GLCD)
:
You can change the microcontroller, the GLCD and the analogue port.

To change the microcontroller simply change the #chip statement
To change the GLCD replace GLCD definition
To change the analogue port change the ADCChannelSelected constant

************************************************************************
    @author  EvanV
    @licence GPL
    @version 1.02
    @date    01-12-2024
    */
// ----- Configuration

'Chip Settings.
#CHIP 18F26Q24, 64
#OPTION Explicit

    // PIC PPS Tool version: 0.0.6.5
    
    #startup InitPPS, 85
    #define PPSToolPart 18F26Q24

    Sub InitPPS
            
        Dir PORTC.6 Out    ' Make TX1 pin an output
        // Module: UART1
        RC6PPS = 0x0015    // TX1 > RC6   

        RC3PPS=0x23; // 0x23 => SCL1
        I2C1SCLPPS=0x13; // 0x13 => RC3

        RC4PPS=0x24; // 0x24 => SDA1
        I2C1SDAPPS=0x14;// 0x14 => RC4

        End Sub
    // Add this code segment to your GCBASIC source program



    #DEFINE USART_BAUD_RATE 9600
    #DEFINE USART_TX_BLOCKING
    #DEFINE USART_DELAY OFF
    
    //! Optional verification of auto baud rate calculation
        //! #DEFINE ISSUE_CHECK_USART_BAUD_RATE_WARNING

/*
    Hardware
    -------------------PORTA----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------SW----------ADC-- 
    ----------------------------------------

    -------------------PORTB----------------
    Bit#:  -7---6---5---4---3---2---1---0---
    IO:    ----------------LED-LED-LED-LED--
    ----------------------------------------
    
    ------------------PORTC-----------------
    Bit#:  -X---6---5---4---3---2---1---0---
    IO:    -^--TX------SDA-SCL--------------
    -----VDDIO2----------------------------- You must apply correct Voltage

    -------------------PORTE----------------
    Bit#:  -----------------3---------------
    IO:---------------------SW-------------- INTMCLR or EXTMCLR
    
  */



    // Define constants to make things easier. We can reuse a constant at any time.
    #DEFINE LEDD0 PORTB.0
    #DEFINE LEDD1 PORTB.1
    #DEFINE LEDD2 PORTB.2
    #DEFINE LEDD3 PORTB.3

    #DEFINE LEDPORT LATB

    Dir     LEDD0 Out
    Dir     LEDD1 Out
    Dir     LEDD2 Out
    Dir     LEDD3 Out

    #DEFINE POTENTIOMETER PORTA.0
    //This is the PORTA.0 port
    Dir POTENTIOMETER In

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

    #DEFINE SWITCHIN      PORTA.3
    Dir     SWITCHIN      In
    #DEFINE DOWN          1

    #DEFINE RSTBUTTON     PORTE.3
    Dir     RSTBUTTON     In  // this is set automatically - and, you cannot set as an output

// Define I2C settings
    #DEFINE HI2C_DATA       PORTC.4
    #DEFINE HI2C_CLOCK      PORTC.3
    #DEFINE HI2C_BAUD_RATE  100
    HI2CMode (Master)

    // I2C Controls specific to 18FxxQ2x chips
    //! Optional the default is 128
    #DEFINE HIC2Q2XBUFFERSIZE 16
    //! Optional the default is to issue a warning
    #DEFINE MUTE_HIC2Q2XBUFFERSIZE_WARNING

#INCLUDE <glcd.h>

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address 0x78
#DEFINE GLCD_PROTECTOVERRUN

#INCLUDE <trig2places.h>

'analogue port selection
#DEFINE ADCChannelSelected ANA0
#DEFINE ADSpeed LowSpeed



'*******************************************************************************************

Dim radius,xcentre,ycentre,xend,old_xend,yend,old_yend As Byte
Dim angle,old_angle,adcval As Word
Dim volts As String * 4
xcentre=63
ycentre=58
'draw dial
GLCDCLS
Box 0,0,127,63
For radius=144 To 141 step -1
    dial
Next radius
GLCDDrawChar (5,40,Asc("0")):GLCDDrawChar (115,40,Asc("5"))
radius=120
angle=1
anglecheck

Do
    old_angle=angle
    '--- DVM
    adcval=ReadAD10(ADCChannelSelected)

    //Calicabrate to 4.08V
    adcval = scale( adcval, 0, 1023, 0, 255 )
    angle=adcval/2
    '
    adcval=adcval*100
    adcval=adcval/51
    volts=Str(adcval)
    If adcval<10 Then
        volts="0.0"+Left(volts,1,1)
        Goto volt_format_done
    End If
    If adcval<100 Then
        volts="0."+Mid(volts,1,2)
    Else
        volts=Left(volts,1,1)+"."+Mid(volts,2,2)
    End If
volt_format_done:
    '---
    anglecheck
    old_xend = xcentre + radius  * sin (old_angle)/255
    old_yend = ycentre - radius  * cos (old_angle)/255
    xend = xcentre + radius  * sin (angle)/255
    yend = ycentre - radius  * cos (angle)/255
    If old_angle<>angle Then
        '-- update screen if volts has changed
        '   erase old needle

        Line (xcentre,ycentre,old_xend,old_yend,0)
        '   draw V
        Line (55,22,63,38):Line (63,38,71,22)
        '   print new voltage
        'print Voltage
        GLCDPrint (50,10,volts,1)
        '   draw new needle
        Line (xcentre,ycentre,xend,yend,1)
        Wait 20 ms
    End If
Loop
'end main


Sub plotdial
    xend = 63 + radius  * sin (angle)/255
    yend = 58 - radius  * cos (angle)/255
    Pset (xend,yend,1)
End Sub
'
Sub dial
    For angle= 296 To 359
        plotdial
    Next angle
    '
    For angle= 0 To 63
        plotdial
    Next angle
End Sub
'
Sub anglecheck
    If angle>127 Then
        angle =angle-127
    Else
        angle =296+angle
    End If
End Sub
