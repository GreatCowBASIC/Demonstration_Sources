'''
'''******************************************************************
''' LCD demonstration for the board. We have added the LCD section to specific the ports.
''' All the LCD commands are standard GCBASIC LCD commands.
'''
''' The methods used in this demonstration are shown below.
'''
''' rtcc_Initialize - required set intial values
''' rtcc_TimeGet    - MPLAB equivilent method. Return values in global variables as follows:
'''    tm_year, tm_mon, tm_wday, tm_mday, tm_hour, tm_min, tm_sec
''' rtcc_GetFormatted_Value converts byte data to tens and digites ( rtcc_data as byte , out digits , out tens)
''' rtcc_SetClock(hour, minute, second, DOW, date, month, year)
''' rtcc_SetTime(hour, minute, second)
''' rtcc_SetDate(DOW, date, month, year)
''' rtcc_ReadClock(hour, minute, second, a.m.|p.m., DOW, date, month, year)
''' rtcc_ReadTime(hour, minute, second, a.m.|p.m.)
''' rtcc_ReadDate(DOW, date, month, year)
''' rtcc_Enable ( true or false )
''' rtcc_ReadAlarm ( hour, minute, second, DOW, date ). Return values
''' rtcc_SetAlarm ( hour, minute, second, DOW, date )
''' rtcc_SetAlarmMask ( alarmAssertionMatch )
''' rtcc_ClearAlarm  unset the alarm )
''' rtcc_ReStartAlarm  reset an existing alarm
''' rtcc_GetDecimalValue ( value ) return number value in tens and digits
''' rtcc_DecToBcd  Convert pure decimal number to binary coded decimal
''' rtcc_BcdToDec  Convert binary coded decimal to pure decimal
'''
'''************************************************************************
    'Chip Settings.
    #chip 16F19156, 32
    #option Explicit

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.5.11
    'PinManager data: v1.55
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85

    Sub InitPPS

            'Module: MSSP1
            RC3PPS = 0x0013    'SCL1 > RC3
            SSP1CLKPPS = 0x0013    'RC3 > SCL1 (bi-directional)
            RC4PPS = 0x0014    'SDA1 > RC4
            SSP1DATPPS = 0x0014    'RC4 > SDA1 (bi-directional)
            'Module: EUSART1
            RC6PPS = 0x000D    'TX1 > RC6
            TX1PPS = 0x0016    'RC6 > TX1 (bi-directional)

    End Sub
    'Template comment at the end of the config file


    '' -------------------PORTA----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---|RS |RW | E |D7 |D6 |D5 |D4
    ''-----------------------------------------
    ''

    '' -------------------PORTB----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -------| O | A |-------| O | I |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---| TX| A |-I---I---------------
    ''-----------------------------------------
    ''
    'USART settings
    #define USART_BAUD_RATE 9600
    #define USART_TX_BLOCKING

    #define LEDD1 PORTB.1
    #define LEDD2 PORTB.5
    #define SwitchIn        PORTB.0

    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     SwitchIn      In

        ' Define I2C settings
    #define HI2C_BAUD_RATE 100
    #define HI2C_DATA PORTC.4
    #define HI2C_CLOCK PORTC.3

    HI2CMode Master

    'Initialise I2C - For the MSSP module the ports need to be set to Input
    Dir HI2C_DATA in
    Dir HI2C_CLOCK in

    '''Set up LCD
    #define LCD_IO 10
    #define LCD_I2C_Address_1 0x4E

    'You may need to use SLOW or MEDIUM if your LCD is a slower device.
    #define LCD_SPEED slow
    'You may need to invert these states. Dependent of LCD I2C adapter.
    #define LCD_Backlight_On_State  1
    #define LCD_Backlight_Off_State 0


    'RTCC specific setup

    #define  rttc_AlarmPulse porta.1
    dir rttc_AlarmPulse out
    #define  rttc_AlarmPort porta.0
    dir rttc_AlarmPort out
    rttc_AlarmPort = 0


    #define LEDD1 PORTB.1
    #define SwitchIn        PORTB.0

    Dir     LEDD1         Out
    Dir     SwitchIn      In


    '*****************************************************************************************************
    'Main program commences here.. everything before this is setup for the board.

    #define rtcc_Calibration_Offset 0

    'SETUP THE RTCC
    rtcc_Initialize
    rtcc_SetAlarm( 0 , 0 , 4 , 0, 0, 0 )   ' every 4th second
    rtcc_SetAlarmMark ( rtcc_AlarmAssertion_EverySecond )
    on Interrupt RTCAlarmTrigger call rttc_Interrupt

    'MAIN LOOP VARIABLES
    Dim Secs as byte
    Dim OldSecs as byte
    Dim Digits as byte
    Dim Tens as byte
    OldSecs = 0

    Do

      If seconds <> oldsecs then

        'Use a generic approach to display information on the serial terminal and the LCD
          'Hours
          rtcc_GetFormatted_Value ( Hours, digits, tens )
          HSerPrint Tens
          Hserprint Digits
          HSerPrint ":"
          locate 0,0
          Print Tens
          Print Digits
          Print ":"

          'Minutes
          rtcc_GetFormatted_Value ( Minutes , digits, tens )
          HSerPrint Tens
          Hserprint Digits
          HSerPrint ":"
          Print Tens
          Print Digits
          Print ":"

          'Seconds
          rtcc_GetFormatted_Value ( Seconds , digits, tens )
          HSerPrint Tens
          Hserprint Digits
          HSerSend 9
          Print Tens
          Print Digits

          Oldsecs = Seconds
          Tens = 0
          Digits = 0
       End If

     'Use a similar approach to MPLAB to display information on the serial terminal and the LCD
      if rtcc_TimeGet = true Then
          HSerPrint tm_mday
          HSerPrint ":"
          HSerPrint tm_mon
          HSerPrint ":"
          HSerPrint tm_year
          HSerPrint " "
          HSerPrint tm_hour
          HSerPrint ":"
          HSerPrint tm_min
          HSerPrint ":"
          HSerPrint tm_sec
          HSerPrint " ("
          HSerPrint tm_wday
          HSerPrint ")"
          HSerPrintCRLF


          locate 1,0
          Print tm_mday
          Print ":"
          Print tm_mon
          Print ":"
          Print tm_year
          Print " ("
          Print tm_wday
          Print ")"

      end if

    Loop


'************************* RTCC Library Functions ****************************************************
' You should not change below here.


 #define rtcc_AlarmAssertion_EveryHalfSecond                     0x04
 #define rtcc_AlarmAssertion_EverySecond                         0x05
 #define rtcc_AlarmAssertion_EveryTenSeconds                     0x06
 #define rtcc_AlarmAssertion_EveryMinute                         0x07
 #define rtcc_AlarmAssertion_EveryTenMinutes                     0x08
 #define rtcc_AlarmAssertion_EveryHour                           0x09
 #define rtcc_AlarmAssertion_OnceADay                            0x0A
 #define rtcc_AlarmAssertion_OnceAWeek                           0x0B
 #define rtcc_AlarmAssertion_OnceAMonth                          0x0C
 #define rtcc_AlarmAssertion_OnceAYear                           0x0D




sub rtcc_Initialize
    dim  rtccTimeInitialized  as Bit
    rtccTimeInitialized  = false


'    ---------     IMPORTANT ! -----------------
    '//  If RTCEN bit is set at same time or before
    '//  RTCWREN bit, then rtcc will not start


    'In order to be able to write the Write Enable(WREN) bit for rtcc you neet to enable EEPROM writing
    'it is strongly recommended to disable interrupts during this code segment
     INTOFF
     Wait 1 s               'Wait stabilisation
     RTCCON.rtccLKSEL0 = 0  'POR  Default
     RTCCON.rtccLKSEL1 = 0  'POR Default
     RTCCON.RTCWREN = 1     'MUST Write this bit before RTCEN
     Wait 100 ms            'Wait for SOSC to stabilise

      if ( rtccTimeInitialized = false ) then
          HSerPrint "rtccTimeInitialized = false"
          HSerPrintCRLF
          'set rtcc time 2017-10-28 12-13-22
          YEAR     = 0x17      ' year
          MONTH    = 0x12      ' month
          WEEKDAY  = 0x04      ' weekday
          DAY      = 0x14      ' day
          HOURS    = 0x23      ' hours
          MINUTES  = 0x59      ' minutes
          SECONDS  = 0x58      ' seconds
          rtccTimeInitialized = true

      end if
      'calibration register
      rtccAL = rtcc_Calibration_Offset
      'Enable rtcc, clear RTCWREN
      RTCCON.RTCEN = 1
      wait while RTCCON.RTCSYNC = 0
      RTCCON.RTCWREN = 0
      INTON
end sub



' This function implements rtcc_TimeGet. It access the
' registers of  rtcc and writes to them the values provided
' in a time structure.

    dim tm_year as word
    dim tm_mon, tm_wday, tm_mday, tm_hour, tm_min, tm_sec as byte
function rtcc_TimeGet


    if ( RTCCON.RTCSYNC = 0 ) then
        rtcc_TimeGet =  false
        exit function
    end if

    'Set the RTCWREN bit
    RTCCON.RTCWREN = 1

    'get year
    tm_year    = ConcatInt( 20, rtcc_BcdToDec(YEAR) )
    'get month
    tm_mon     = rtcc_GetDecimalValue(MONTH)
    ' get weekday
    tm_wday    = rtcc_GetDecimalValue(WEEKDAY)
    'get day
    tm_mday    = rtcc_GetDecimalValue(DAY)
    'get hour
    tm_hour    = rtcc_GetDecimalValue(HOURS)
    'get minutes
    tm_min     = rtcc_GetDecimalValue(MINUTES)
    'get seconds
    tm_sec     = rtcc_GetDecimalValue(SECONDS)

    RTCCON.RTCWREN = 0
    rtcc_TimeGet = true

end function

sub rtcc_getFormatted_Value ( in rtcc_data as byte , out digits as byte , out tens  as byte )

          Digits = rtcc_data AND 0b00001111
          Tens.0 = rtcc_data.4
          Tens.1 = rtcc_data.5
          Tens.2 = rtcc_data.6

end sub

' Set the clock
sub rtcc_setClock(in DS_Hour, in DS_Min, in DS_Sec, in DS_DOW, in DS_Date, in DS_Month, in DS_Year)

      '    ---------     IMPORTANT ! -----------------
      'If RTCEN bit is set at same time or before
      'RTCWREN bit, then rtcc will not start

      'In order to be able to write the Write Enable(WREN) bit for rtcc you neet to enable EEPROM writing
      'it is strongly recommended to disable interrupts during this code segment
      INTOFF
      Wait 1 s               'Wait stabilisation
      RTCCON.rtccLKSEL0 = 0  'POR  Default
      RTCCON.rtccLKSEL1 = 0  'POR Default
      RTCCON.RTCWREN = 1     'MUST Write this bit before RTCEN
      Wait 100 ms            'Wait for SOSC to stabilise

      YEAR     = DS_Year      ' year
      MONTH    = DS_Month     ' month
      WEEKDAY  = DS_DOW       ' weekday
      DAY      = DS_Date      ' day
      HOURS    = DS_Hour      ' hours
      MINUTES  = DS_Min       ' minutes
      SECONDS  = DS_Sec       ' seconds
      rtccTimeInitialized = true

      'Enable rtcc, clear RTCWREN
      RTCCON.RTCEN = 1
      wait while RTCCON.RTCSYNC = 0
      RTCCON.RTCWREN = 0
      INTON
end sub

' Set the time
sub rtcc_SetTime(in DS_Hour, in DS_Min, in DS_Sec)

      '    ---------     IMPORTANT ! -----------------
      'If RTCEN bit is set at same time or before
      'RTCWREN bit, then rtcc will not start

      'In order to be able to write the Write Enable(WREN) bit for rtcc you neet to enable EEPROM writing
      'it is strongly recommended to disable interrupts during this code segment
      INTOFF
      Wait 1 s               'Wait stabilisation
      RTCCON.rtccLKSEL0 = 0  'POR  Default
      RTCCON.rtccLKSEL1 = 0  'POR Default
      RTCCON.RTCWREN = 1     'MUST Write this bit before RTCEN
      Wait 100 ms            'Wait for SOSC to stabilise

      HOURS    = DS_Hour      ' hours
      MINUTES  = DS_Min       ' minutes
      SECONDS  = DS_Sec       ' seconds
      rtccTimeInitialized = true

      'Enable rtcc, clear RTCWREN
      RTCCON.RTCEN = 1
      wait while RTCCON.RTCSYNC = 0
      RTCCON.RTCWREN = 0
      INTON
end sub

' Set the date
sub rtcc_setDate(in DS_DOW, DS_Date, in DS_Month, in DS_Year)

      '    ---------     IMPORTANT ! -----------------
      'If RTCEN bit is set at same time or before
      'RTCWREN bit, then rtcc will not start

      'In order to be able to write the Write Enable(WREN) bit for rtcc you neet to enable EEPROM writing
      'it is strongly recommended to disable interrupts during this code segment
      INTOFF
      Wait 1 s               'Wait stabilisation
      RTCCON.rtccLKSEL0 = 0  'POR  Default
      RTCCON.rtccLKSEL1 = 0  'POR Default
      RTCCON.RTCWREN = 1     'MUST Write this bit before RTCEN
      Wait 100 ms            'Wait for SOSC to stabilise

      YEAR     = DS_Year      ' year
      MONTH    = DS_Month     ' month
      WEEKDAY  = DS_DOW       ' weekday
      DAY      = DS_Date      ' day
      rtccTimeInitialized = true

      'Enable rtcc, clear RTCWREN
      RTCCON.RTCEN = 1
      wait while RTCCON.RTCSYNC = 0
      RTCCON.RTCWREN = 0
      INTON
end sub

' Read the clock
sub rtcc_ReadClock(out tm_hour, out tm_min, out tm_sec, out tm_wday, out tm_mday, out tm_mon, out tm_year)
    ;Read entire clock: hours, minutes, seconds, day of week, date, month, year

    if ( RTCCON.RTCSYNC = 0 ) then
        rtcc_TimeGet =  false
    end if

    'Set the RTCWREN bit
    RTCCON.RTCWREN = 1

    'get year
    tm_year    = ConcatInt( 20, rtcc_BcdToDec(YEAR) )
    'get month
    tm_mon     = rtcc_GetDecimalValue(MONTH)
    ' get weekday
    tm_wday    = rtcc_GetDecimalValue(WEEKDAY)
    'get day
    tm_mday    = rtcc_GetDecimalValue(DAY)
    'get hour
    tm_hour    = rtcc_GetDecimalValue(HOURS)
    'get minutes
    tm_min     = rtcc_GetDecimalValue(MINUTES)
    'get seconds
    tm_sec     = rtcc_GetDecimalValue(SECONDS)

    RTCCON.RTCWREN = 0
    rtcc_TimeGet = true

End Sub

' Read the time
sub rtcc_Readtime(out tm_hour, out tm_min, out tm_sec)
    ;Read entire clock: hours, minutes, seconds, day of week, date, month, year

    if ( RTCCON.RTCSYNC = 0 ) then
        rtcc_TimeGet =  false
    end if

    'Set the RTCWREN bit
    RTCCON.RTCWREN = 1
    tm_hour    = rtcc_GetDecimalValue(HOURS)
    'get minutes
    tm_min     = rtcc_GetDecimalValue(MINUTES)
    'get seconds
    tm_sec     = rtcc_GetDecimalValue(SECONDS)

    RTCCON.RTCWREN = 0
    rtcc_TimeGet = true

End Sub


' Read the date
sub rtcc_ReadDate(out tm_wday, out tm_mday, out tm_mon, out tm_year)
    ;Read entire clock: hours, minutes, seconds, day of week, date, month, year

    if ( RTCCON.RTCSYNC = 0 ) then
        rtcc_TimeGet =  false
    end if

    'Set the RTCWREN bit
    RTCCON.RTCWREN = 1

    'get year
    tm_year    = ConcatInt( 20, rtcc_BcdToDec(YEAR) )
    'get month
    tm_mon     = rtcc_GetDecimalValue(MONTH)
    ' get weekday
    tm_wday    = rtcc_GetDecimalValue(WEEKDAY)
    'get day
    tm_mday    = rtcc_GetDecimalValue(DAY)
    RTCCON.RTCWREN = 0
    rtcc_TimeGet = true

End Sub

' Enable the RTCC
Sub rtcc_Enable ( in rtcc_data )

     RTCCON.RTCWREN = 1     'MUST Write this bit before RTCEN
     'Enable /Disable rtcc, clear RTCWREN
     RTCCON.RTCEN = rtcc_data.0
     wait while RTCCON.RTCSYNC = 0
     RTCCON.RTCWREN = 0

End Sub

' Read the Alarm settings
sub rtcc_ReadAlarm( out tm_Hour, out tm_Min, out tm_Sec, out tm_wday, out tm_mday, out tm_mon )


    if ( RTCCON.RTCSYNC = 0 ) then
        rtcc_TimeGet =  false
    end if

    'Set the RTCWREN bit
    RTCCON.RTCWREN = 1

    'get month
    tm_mon     = rtcc_GetDecimalValue(ALRMMTH)
    ' get weekday
    tm_wday    = rtcc_GetDecimalValue(ALRMWD)
    'get day
    tm_mday    = rtcc_GetDecimalValue(ALRMDAY)
    'get hour
    tm_hour    = rtcc_GetDecimalValue(ALRMHR)
    'get minutes
    tm_min     = rtcc_GetDecimalValue(ALRMMIN)
    'get seconds
    tm_sec     = rtcc_GetDecimalValue(ALRMSEC)

    RTCCON.RTCWREN = 0
    rtcc_TimeGet = true

end sub

'Set the alarm
sub rtcc_SetAlarm( in tm_Hour, in tm_Min, in tm_Sec, in tm_DOW, in tm_Date, in tm_month )

      ALRMCON.ALRMEN = 0
      ALRMMTH     = tm_Month     ' month
      ALRMWD      = tm_DOW       ' weekday
      ALRMDAY     = tm_Date      ' day
      ALRMHR      = tm_Hour      ' hours
      ALRMMIN     = tm_Min       ' minutes
      ALRMSEC     = tm_Sec       ' seconds
      ALRMCON.ALRMEN = 1

end sub

'Set the alarm mask
Sub rtcc_SetAlarmMark ( in rtcc_data )

    AMASK0 = rtcc_data.0
    AMASK1 = rtcc_data.1
    AMASK2 = rtcc_data.2
    AMASK3 = rtcc_data.3

End Sub

'Clear the alarm
sub rtcc_ClearAlarm
      ALRMCON.ALRMEN = 0
End sub

'Restart the alarm
sub rtcc_ReStartAlarm
      ALRMCON.ALRMEN = 1
End sub

'Get the decimal value of register
function rtcc_GetDecimalValue ( in rtcc_data ) as word

  dim rtcc_Digits, rtcc_Tens as byte

  rtcc_Digits = rtcc_data AND 0b00001111
  rtcc_Tens.0 = rtcc_data.4
  rtcc_Tens.1 = rtcc_data.5
  rtcc_Tens.2 = rtcc_data.6
  rtcc_GetDecimalValue =  ConcatInt( rtcc_Tens, rtcc_Digits )

end function

'Concat to numbers
function ConcatInt( uint1 as word, uint2) as word

    dim ConcatInt_temp as Word
    ConcatInt_temp = 1

    if (uint2 = 0) then

        if ( uint1 =  20)  then 'if the result is about the year

            ConcatInt_temp = 100

        else

            ConcatInt_temp = 10

        end if

    end if


    while ( ConcatInt_temp <= uint2 )

        ConcatInt_temp = ConcatInt_temp * 10

    loop

    ConcatInt = [word]( [word]uint1 * [word]ConcatInt_temp ) + uint2

end function

'Convert pure decimal number to binary coded decimal
function rtcc_DecToBcd(in va ) as byte
  rtcc_DecToBcd=( va /10)*16+ va %10
end function

'Convert binary coded decimal to pure decimal
function rtcc_BcdToDec(in va ) as byte
  rtcc_BcdToDec=( va /16)*10+ va %16
end function

'Handle the interrupt
sub rttc_Interrupt
    'Clear the Interrupt
    RTCCIF = 0
    rttc_AlarmPort = !rttc_AlarmPort
    rtcc_ReStartAlarm
end sub