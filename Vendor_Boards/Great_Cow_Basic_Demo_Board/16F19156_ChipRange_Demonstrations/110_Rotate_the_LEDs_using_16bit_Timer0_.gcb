'''
'''******************************************************************
'''
'''  Timer0 is a counter implemented in the processor. It may be used to count instruction
'''  cycles or external events, that occur at or below the instruction cycle rate.
'''  In the PIC16, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
'''  enhanced mid-range core implements only an 8-bit counter.
'''  This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
'''  over. This frees up the processor to do meaningful work rather than wasting instruction
'''  cycles in a timing loop.
'''  Using a counter provides a convenient method of measuring time or delay loops as it
'''  allows the processor to work on other tasks rather than counting instruction cycles.
'''
'''
'''  LEDs should flash  1 second.
'''
'''
'''
'''GCBASIC Header block
'''
'''@author  Evan R. Venn
'''@licence GPL
'''@version 1.00
'''@date    03/05/2018
'''****
' ----- Configuration
    'Chip Settings.
    #chip 16F19156, 32
    #option Explicit

    '' -------------------PORTA----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---|RS |RW | E |D7 |D6 |D5 |D4
    ''-----------------------------------------
    ''

    '' -------------------PORTB----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -------| O | A |-------| O | I |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---| TX| A |---------------------
    ''-----------------------------------------
    ''


    #define LEDD1 PORTB.1
    #define LEDD2 PORTB.5
    #define SwitchIn        PORTB.0

    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     SwitchIn      In

    '*****************************************************************************************************
    'Main program commences here.. everything before this is setup for the board.


'   Initialise the timer.
'   Firstly tell the compiler to use a 16bit timer for this demonstration
    #define TMR0_16BIT

'     For this we need the following:
'       Prescaler
'           1:256
'            HF int Osc, and
'            NOT to sync Timer
'       Post scaler
'           1:2
    InitTimer0 Osc, PRE0_256 + TMR0_HFINTOSC ,  POST0_2
'     Start the Timer
    StartTimer 0

    'Every 1 sec
    Settimer ( 0 , 0x0bdc  )

   'Set the LED states
    LEDD1 = 0
    LEDD2 = 1

    do
            'wait for the event
            wait while TMR0IF = 0

            ' Clearing Timer flag will reset event
            TMR0IF = 0
            'Set the LED states
            LEDD1 = !LEDD1
            LEDD2 = !LEDD2


            'Set timer to 1s before the next event occurs.  This as close as you can get to 1s
             Settimer ( 0 , 0x0bdc )

        loop
