'''
'''******************************************************************
''' DS18B20 demonstration for the board. We have added the DS18B20  section to specift the DS18B20 port.
''' All the DS18B20 commands are standard GCBASIC LCD commands.
'''
''' Set the section "DS18B20 setup section" for the specification of the setup Configuration.
'''
''' This demonstration show the tempature on the LCD as an Integer value and a Decimal Value.
'''
'''************************************************************************
    'Chip Settings.
    #chip 16F19156, 32
    #option Explicit

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.5.11
    'PinManager data: v1.55
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85

    Sub InitPPS

            'Module: MSSP1
            RC3PPS = 0x0013    'SCL1 > RC3
            SSP1CLKPPS = 0x0013    'RC3 > SCL1 (bi-directional)
            RC4PPS = 0x0014    'SDA1 > RC4
            SSP1DATPPS = 0x0014    'RC4 > SDA1 (bi-directional)
            'Module: EUSART1
            RC6PPS = 0x000D    'TX1 > RC6
            TX1PPS = 0x0016    'RC6 > TX1 (bi-directional)

    End Sub
    'Template comment at the end of the config file


    '' -------------------PORTA----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---|RS |RW | E |D7 |D6 |D5 |D4
    ''-----------------------------------------
    ''

    '' -------------------PORTB----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -------| O | A |-------| O | I |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---| TX| A |-I---I-| X |---------
    ''-----------------------------------------
    ''


    #define LEDD1 PORTB.1
    #define LEDD2 PORTB.5
    #define SwitchIn        PORTB.0

    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     SwitchIn      In

    ' Define I2C settings
    #define HI2C_BAUD_RATE 100
    #define HI2C_DATA PORTC.4
    #define HI2C_CLOCK PORTC.3

    HI2CMode Master

    'Initialise I2C - For the MSSP module the ports need to be set to Input
    Dir HI2C_DATA in
    Dir HI2C_CLOCK in

    '''Set up LCD
    #define LCD_IO 10
    #define LCD_I2C_Address_1 0x4E

    'You may need to use SLOW or MEDIUM if your LCD is a slower device.
    #define LCD_SPEED slow
    'You may need to invert these states. Dependent of LCD I2C adapter.
    #define LCD_Backlight_On_State  1
    #define LCD_Backlight_Off_State 0

    'DS18B20 setup section
    #include <ds18b20.h>

    ; ----- Constants
    ' DS18B20 port settings
    #define DQ PortA.7


    '*****************************************************************************************************
    'Main program commences here.. everything before this is setup for the board.

    ; ----- Variables
      dim TempC_100 as word   ' a variabler to handle the temperature calculations
      Dim CCOUNT, SIGNBIT, WHOLE, FRACT, DIG as Byte


; ----- Main body of program commences here.

    ccount = 0
    CLS
    print "GCBASIC 2017"
    locate 1,0
    print "DS18B20 Demo"
    wait 2 s
    CLS

    do forever
       ' The function readtemp returns the integer value of the sensor
       DSdata = readtemp()

       ' Display the integer value of the sensor on the LCD
       locate 0,0
       print hex(ccount)
       print ":"
       print DSdata
       print chr(223)+"C"



       ' Display the integer and decimal value of the sensor on the LCD

       ' The function readtemp12 returns the raw value of the sensor.
       ' The sensor is read as a 12 bit value therefore each unit equates to 0.0625 of a degree
       DSdata = readtemp12()
       SignBit = DSdata / 256 / 128
       If SignBit = 0 Then goto Positive
       ' its negative!
       DSdata = ( DSdata # 0xffff ) + 1 ' take twos comp

    Positive:

       ' Convert value * 0.0625. Mulitple value by 6 then add result to multiplication of the value with 25 then divide result by 100.
       TempC_100 =  DSdata * 6
       DSdata = ( DSdata * 25 ) / 100
       TempC_100 = TempC_100 + DSdata

       Whole = TempC_100 / 100
       Fract = TempC_100 % 100
       If SignBit = 0 Then goto DisplayTemp
       Print "-"

    DisplayTemp:
       locate 1,0
       print hex(ccount)
       print ":"
       print str(Whole)
       print "."
      ' To ensure the decimal part is two digits
       Dig = Fract / 10
       print Dig
       Dig = Fract % 10
       print Dig
       print chr(223)
       print "C"
       wait 2 s
       ccount++

    loop
