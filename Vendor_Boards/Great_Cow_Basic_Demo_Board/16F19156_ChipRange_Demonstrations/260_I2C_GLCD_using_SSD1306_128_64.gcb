'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The SSD1306 controller a small graphical OLED, suitable for a lot of various projects.
'''The display is 38*35 mm, with an active display surface of 0.96inches, and a 128*64 pixel resolution.
'''The display is easy to interface, using an I2C type of communication.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''
'''This version is compatible will all version of GCBASIC as this demonstration uses Full Memory GLCD mode only.  This can be adapted to Low Memory GLCD mode.
'''
'''************************************************************************
'''
'''  PIC: 18f26k22
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: GCBASIC Board
'''  Date: 29.8.17
'''
' ----- Configuration
    'Chip Settings.
    #chip 16F19156, 32

    #option Explicit

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.5.11
    'PinManager data: v1.55
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85

    Sub InitPPS

            'Module: MSSP1
            RC3PPS = 0x0013    'SCL1 > RC3
            SSP1CLKPPS = 0x0013    'RC3 > SCL1 (bi-directional)
            RC4PPS = 0x0014    'SDA1 > RC4
            SSP1DATPPS = 0x0014    'RC4 > SDA1 (bi-directional)
            'Module: EUSART1
            RC6PPS = 0x000D    'TX1 > RC6
            TX1PPS = 0x0016    'RC6 > TX1 (bi-directional)

    End Sub
    'Template comment at the end of the config file


    '' -------------------PORTA----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---|RS |RW | E |D7 |D6 |D5 |D4
    ''-----------------------------------------
    ''

    '' -------------------PORTB----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -------| O | A |-------| O | I |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---| TX| A |-I---I---------------
    ''-----------------------------------------
    ''


    #define LEDD1 PORTB.1
    #define LEDD2 PORTB.5
    #define SwitchIn        PORTB.0
    #define LDR             PORTA.4

    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     SwitchIn      In
    Dir     LDR           In    'this is the ANB4 port

        ' Define I2C settings
    #define HI2C_BAUD_RATE 100
    #define HI2C_DATA PORTC.4
    #define HI2C_CLOCK PORTC.3

    HI2CMode Master

    'Initialise I2C - For the MSSP module the ports need to be set to Input
    Dir HI2C_DATA in
    Dir HI2C_CLOCK in

    #include <glcd.h>
    #define GLCD_TYPE GLCD_TYPE_SSD1306
    #define GLCD_I2C_Address 0x78

; ----- Define variables

    'These constants allow you to change the GLCD memory usage.
    #define GLCD_PROTECTOVERRUN

; ----- Define variables

  Dim BYTENUMBER, CCOUNT as Byte

  CCount = 0
  dim longNumber as long
  longNumber = 123456 ' max value = 4294967290
  dim wordNumber as Word
  dim outstring as string
  wordNumber = 0
  byteNumber = 0

; ----- Main program

  GLCDPrint 0, 0,   "Great Cow BASIC"
  GLCDPrint (0, 16, "Anobium 2017")
  GLCDPrint (0, 32, "Portability Demo")
  GLCDPrint (0, 48, ChipNameStr )




  wait 3 s
  GLCDCLS

  ' Prepare the static components of the screen
  GLCDPrint ( 0,   0, "PrintStr")                                ; Print some text
  GLCDPrint ( 64,  0, "@")                                    ; Print some more text
  GLCDPrint ( 72,  0, ChipMhz)                                   ; Print chip speed
  GLCDPrint ( 86, 0, "Mhz")                                     ; Print some text
  GLCDDrawString( 0,8,"DrawStr")                                 ; Draw some text
  box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1                            ; Draw a box
  box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1    ; Draw a box
  Circle( 44,41,15)                                              ; Draw a circle
  line 64,31,0,31                                                ; Draw a line

  DO forever

     for CCount = 32 to 127

          GLCDPrint ( 64 ,  36,  hex(longNumber_E ) )                 ; Print a HEX string
          GLCDPrint ( 76 ,  36,  hex(longNumber_U ) )                 ; Print a HEX string
          GLCDPrint ( 88 ,  36,  hex(longNumber_H ) )                 ; Print a HEX string
          GLCDPrint ( 100 ,  36, hex(longNumber   ) )                 ; Print a HEX string
          GLCDPrint ( 112 ,  36, "h" )                                ; Print a HEX string


          GLCDPrint ( 64 ,  44, pad(str(wordNumber), 5 ) )           ; Print a padded string
          GLCDPrint ( 64 ,  52, pad(str(byteNumber), 3 ) )           ; Print a padded string


          box (46,9,56,19)                                           ; Draw a Box
          GLCDDrawChar(48, 10, CCount )                              ; Draw a character
          outString = str( CCount )                                  ; Prepare a string
          GLCDDrawString(64, 9, pad(outString,3) )                   ; Draw a string

          filledbox 3,43,11,51, wordNumber                           ; Draw a filled box

          FilledCircle( 44,41,9, longNumber xor 1)                   ; Draw a filled box
          line 0,63,64,31                                            ; Draw a line

                                                                     ; Do some simple maths
          longNumber = longNumber + 7 : wordNumber = wordNumber + 3 : byteNumber++
      NEXT
  LOOP
  end
