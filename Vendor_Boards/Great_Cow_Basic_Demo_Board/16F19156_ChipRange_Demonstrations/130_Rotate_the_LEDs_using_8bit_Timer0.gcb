'''
'''******************************************************************
'''
'''  Timer0 is a counter implemented in the processor. It may be used to count instruction
'''  cycles or external events, that occur at or below the instruction cycle rate.
'''  In the PIC16, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
'''  enhanced mid-range core implements only an 8-bit counter.
'''
'''  This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
'''  over. This frees up the processor to do meaningful work rather than wasting instruction
'''  cycles in a timing loop of 1 s.
'''  Using a counter provides a convenient method of measuring time or delay loops as it
'''  allows the processor to work on other tasks rather than counting instruction cycles.
'''
'''
'''GCBASIC Header block
'''
'''@author  Evan R. Venn
'''@licence GPL
'''@version 1.00
'''@date    03/05/2018
'''****
' ----- Configuration
    'Chip Settings.
    #chip 16F19156, 32
    #option Explicit

    '' -------------------PORTA----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---|RS |RW | E |D7 |D6 |D5 |D4
    ''-----------------------------------------
    ''

    '' -------------------PORTB----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -------| O | A |-------| O | I |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---| TX| A |---------------------
    ''-----------------------------------------
    ''


    #define LEDD1 PORTB.1
    #define LEDD2 PORTB.5
    #define SwitchIn        PORTB.0

    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     SwitchIn      In


    '*****************************************************************************************************
    'Main program commences here.. everything before this is setup for the board.



    'Setup the timer.
    'params    Source, Prescaler                , Postscaler
    InitTimer0 Osc, PRE0_32 + TMR0_FOSC4,       POST0_11

    ' Start the Timer by writing to TMR0ON bit
    StartTimer 0

    ' Set the Timer start value at 1 s
    SetTimer ( 0, 0xE2 )

    StartTimer 0

    'Set the LED states
    LEDD1 = 0
    LEDD2 = 1

    dim TimerCounter as byte 'we will use this to count the number of times the event happens
    TimerCounter = 0

    do
            'wait for the event
            wait while TMR0IF = 0
            ' Clearing Timer flag will reset event
            TMR0IF = 0

            TimerCounter = TimerCounter + 1

            'when at 100 we are at 1 s
            if TimerCounter = 100 then

              'Set the LED states
              LEDD1 = !LEDD1
              LEDD2 = !LEDD2

              'restart our event counter
              TimerCounter = 0

             end if

          ' Set the Timer start value
          SetTimer ( 0, 0xE2 )

        loop
