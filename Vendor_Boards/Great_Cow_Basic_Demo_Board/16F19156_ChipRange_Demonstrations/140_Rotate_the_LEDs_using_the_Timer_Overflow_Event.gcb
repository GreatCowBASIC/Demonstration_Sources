'''
'''******************************************************************
'''
'''  Timer0 is a counter implemented in the processor. It may be used to count instruction
'''  cycles or external events, that occur at or below the instruction cycle rate.
'''  In 16F pic, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
'''  enhanced mid-range core implements only an 8-bit counter.
'''  This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
'''  over. This frees up the processor to do meaningful work rather than wasting instruction
'''  cycles in a timing loop of 1s.
'''  Using a counter provides a convenient method of measuring time or delay loops as it
'''  allows the processor to work on other tasks rather than counting instruction cycles.
'''
'''
'''GCBASIC Header block
'''
'''@author  Evan R. Venn
'''@licence GPL
'''@version 1.00
'''@date    03/05/2018
'''****
' ----- Configuration
    'Chip Settings.
    #chip 16F19156, 32
    #option Explicit


    '' -------------------PORTA----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---|RS |RW | E |D7 |D6 |D5 |D4
    ''-----------------------------------------
    ''

    '' -------------------PORTB----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -------| O | A |-------| O | I |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---| TX| A |---------------------
    ''-----------------------------------------
    ''


    #define LEDD1 PORTB.1
    #define LEDD2 PORTB.5
    #define SwitchIn        PORTB.0

    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     SwitchIn      In

    '*****************************************************************************************************
    'Main program commences here.. everything before this is setup for the board.


    Dim TIMEOUT as Byte


'   Initialise the timer.
'   Firstly tell the compiler to use a 16bit timer for this demonstration
    #define TMR0_16BIT

'     For this we need the following:
'       Prescaler
'           1:256
'            HF int Osc, and
'            NOT to sync Timer
'       Post scaler
'           1:2
    InitTimer0 Osc, PRE0_256 + TMR0_HFINTOSC ,  POST0_2

    On Interrupt Timer0Overflow call blink

    'Set timer to 1 second`
    SetTimer ( 0, 0x0bdc )

'     Start the Timer - you need to start this Timer0!
    StartTimer 0

    'Set the LED states
    LEDD1 = 0
    LEDD2 = 1


    Do Forever

          if TimeOut = 1 then

            'Set the LED states
            LEDD1 = !LEDD1
            LEDD2 = !LEDD2

            TimeOut= 0
            SetTimer ( 0, 0x0bdc ) ' Set timer to 1 second`

          end if




    Loop


    Sub blink
          TimeOut = 1
          'Clear the Timer0 overflow event
          TMR0IF = 0
    End Sub
