'''
'''  This demonstration produces a variable speed toggling the LEDs displayed that is proportional to the ADC value.
'''
'''  Adjust the LDR or rotate the POT to see the LEDs shift faster.
'''
'''  Press the switch to reverse the direction of the LEDs.
'''
'''
'''GCBASIC Header block
'''
'''@author  Evan R. Venn
'''@licence GPL
'''@version 1.00
'''@date    03/05/2018
'''****
' ----- Configuration
    'Chip Settings.
    #chip 16F19156, 32
    #option Explicit

    '' -------------------PORTA----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---|RS |RW | E |D7 |D6 |D5 |D4
    ''-----------------------------------------
    ''

    '' -------------------PORTB----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -------| O | A |-------| O | I |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---| TX| A |---------------------
    ''-----------------------------------------
    ''


    #define LEDD1 PORTB.1
    #define LEDD2 PORTB.5
    #define LDR             PORTB.4
    #define SwitchIn        PORTB.0

    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     LDR           In    'this is the ANB4 port
    Dir     SwitchIn      In

    '*****************************************************************************************************
    'Main program commences here.. everything before this is setup for the board.

    #define DOWN        0
    #define UP          1


    Dim DIRECTION as Byte
    Dim mydelay, leds  as byte
    #define LED_RIGHT 0
    #define LED_LEFT  1

    'start from the right to left
    direction = LED_RIGHT

    'Initialise the value
    leds = 8

    do

        'Turn the LEDS off so we can see them Flash
        LEDD1 = 0
        LEDD2 = 0

        'Get a value for the ADC port
        mydelay = ReadAD( ANB4, true )

        'Set the LEDs
        if  direction = LED_RIGHT  then

            LEDD1 = 1
            LEDD2 = 0

        else

            LEDD1 = 0
            LEDD2 = 1

        end if

        'wait, and then check the switch is DOWN
        if mydelay > 0 then
              wait mydelay ms
              if check_switch = true then
                  ' toggle the direction
                  direction = !direction
              end if
        end if


    loop



  'global variable - if button is held down, we don't want to keep on switching directions
  #define SWITCH_UP   1
  #define SWITCH_DOWN 0

  dim previous_state as bit
  previous_state = SWITCH_UP

  function  check_switch
      'switch is normally open to 5V ...when pressed, button is connected to GND
      if (SwitchIn = SWITCH_DOWN) then
          'debounce by delaying and checking if switch is still pressed
          wait 1 ms
          if ( (previous_state =  SWITCH_DOWN) & (SwitchIn = SWITCH_DOWN) ) then
              ' don't toggle
              check_switch = false
              exit function
          else
              ' check if still down
              if (SwitchIn = SWITCH_DOWN) then
                 previous_state = SWITCH_DOWN
                 ' reverse the LEDs
                 check_switch = true
                 exit function
             else
              'switch not properly held down
              previous_state = SWITCH_UP
              ' don't reverse
              check_switch = false
              exit function
             end if
          end if
      else
         'switch not pressed
          previous_state = SWITCH_UP
          'don't reverse
          check_switch = false
          exit function
      end if

  end Function
