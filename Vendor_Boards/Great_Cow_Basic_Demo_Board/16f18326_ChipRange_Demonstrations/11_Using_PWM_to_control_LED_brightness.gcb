''' A demonstration program for GCBASIC.
'''
'''
''' Pulse-Width Modulation (PWM) is a scheme that provides power to a load by switching
''' quickly between fully on and fully off states. The PWM signal resembles a square wave
''' where the high portion of the signal is considered the on state and the low portion of
''' the signal is considered the off state. The high portion, also known as the pulse width,
''' can vary in time and is defined in steps. A longer, high on time will illuminate the LED
''' brighter. The frequency or period of the PWM does not change. A larger number of
''' steps applied, which lengthens the pulse width, also supplies more power to the load.
''' Lowering the number of steps applied, which shortens the pulse width, supplies less
''' power. The PWM period is defined as the duration of one complete cycle or the total
''' amount of on and off time combined.
'''
''' The demo vary the PWM to all the LEDS. This is achieved by redirected PMW6 to the LEDS.
'''
'''
'''   You need four LEDs connnect to portc.0, portc.1, portc.2 and portc.3 connected via suitable resistors.
'''  ************************************************************************************************************************************************************************************
'''
'''
'''  PIC: 16F18326
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''@author   EvanV
'''@licence  GPL
'''@version  1.0
'''@date     29.07.2016

#CHIP 16F18326

'Set the PPS of the PWM and the RS232 ports.
'Set the PPS for this solution.
#STARTUP InitPPS, 85

Sub InitPPS
    UNLOCKPPS
    '   'RC3->PWM6:PWM6OUT;
    RC3PPS = 0x0003
    '   'RC2->PWM6:PWM6OUT;
    RC2PPS = 0x0003
    '   'RC1->PWM6:PWM6OUT;
    RC1PPS = 0x0003
    '   'RC0->PWM6:PWM6OUT;
    RC0PPS = 0x0003
    LOCKPPS
End Sub

'' -------------------LATC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' LED:   ---------------|D5 |D4 |D3 |D2 |-
''-----------------------------------------
''
#DEFINE LEDD2  PORTC.0
#DEFINE LEDD3  PORTC.1
#DEFINE LEDD4  PORTC.2
#DEFINE LEDD5  PORTC.3
#DEFINE LEDBANK portc

'You do need to specfic the ports as outputs
Dir     LEDD2 Out
Dir     LEDD3 Out
Dir     LEDD4 Out
Dir     LEDD5 Out


'Optimise commands  for PWM modules to reduce the size of the code produced.
' not used Optimise
#DEFINE USE_HPWMCCP1 FALSE
' not used Optimise
#DEFINE USE_HPWMCCP2 FALSE
' not used Optimise
#DEFINE USE_HPWMCCP3 FALSE
' not used Optimise
#DEFINE USE_HPWMCCP4 FALSE

' used so compile
#DEFINE USE_HPWM6 TRUE
' not used Optimise
#DEFINE USE_HPWM5 FALSE

' used so compile
#DEFINE USE_HPWM_TIMER2 TRUE
' not used Optimise
#DEFINE USE_HPWM_TIMER4 FALSE
' not used Optimise
#DEFINE USE_HPWM_TIMER6 FALSE

#DEFINE myFrequency 60
#DEFINE myTimerSelected 2
Dim myDuty As Byte
'start at 50%
myDuty = 50

HPWM ( HPWM6, myFrequency, myDuty , myTimerSelected  )

Do Forever
    For myDuty = 0 To 100
        Wait 10 ms
        HPWM ( HPWM6, myFrequency, myDuty, myTimerSelected  )
    Next
    Wait 10 ms
Loop
