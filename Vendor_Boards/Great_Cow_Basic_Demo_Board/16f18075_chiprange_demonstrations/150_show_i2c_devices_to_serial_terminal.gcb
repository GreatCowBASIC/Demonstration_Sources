'''
'''  This demonstration shows the I2C devices attached the microcontroller, this program support the Microchip I2C module.
'''
'''  I2C device required a data bus and a clock bus, devices also required an input voltage and 0v.
'''   I2C data bus is connected to port shown below.
'''   I2C clock bus is connected to port shown below.
'''   Serial output is connected, as previously, to port shown below.
'''
'''  Connect your I2C devices and see the results on the serial terminal.
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.02
'''@date    15/09/2022
' ----- Configuration

'Chip Settings.
#CHIP 16F18075, 16
#OPTION Explicit
#config MCLRE=INTMCLR

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.3
    'PinManager data: v1.81.8
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 16LF18875

    Sub InitPPS

            'Module: EUSART
            RC6PPS = 0x000E    'TX > RC6
            'Module: MSSP1
            SSP1CLKPPS = 0x13;  //RC3->MSSP1:SCL1;
            RC3PPS = 0x15;  //RC3->MSSP1:SCL1;
            SSP1DATPPS = 0x14;  //RC4->MSSP1:SDA1;
            RC4PPS = 0x16;  //RC4->MSSP1:SDA1;

    End Sub
    'Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    --------IN-LED--LED-LED LED -----
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX------SDA-SCL--------------
''-----------------------------------------
''

'' ------------------PORTE-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------RST--------------
''-----------------------------------------
''

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.2
#DEFINE LEDD3 PORTB.3
#DEFINE LEDD4 PORTB.4
#DEFINE LEDPORT LATB


Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     LEDD3         Out
Dir     LEDD4         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTB.5
Dir     SWITCHIN      In

'Setup Serial port
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING

' Define I2C settings
#DEFINE HI2C_BAUD_RATE 100
#DEFINE HI2C_DATA PORTC.4
#DEFINE HI2C_CLOCK PORTC.3
'Initialise I2C - note for the I2C module the ports need to be set to correct direction
Dir HI2C_DATA In
Dir HI2C_CLOCK In

HI2CMode Master

    
'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

Dim DeviceID As Byte
Dim DISPLAYNEWLINE As Byte

wait 1 s 

Do

    HSerPrintCRLF
    HSerPrint "Hardware I2C "
    HSerPrintCRLF 2

    ' Now assumes Serial Terminal is operational
    HSerPrintCRLF
    HSerPrint "   "
    'Create a horizontal row of numbers
    For DeviceID = 0 To 15
        HSerPrint Hex(deviceID)
        HSerPrint " "
    Next

    'Create a vertical column of numbers
    For DeviceID = 0 To 255
    
        DisplayNewLine = DeviceID % 16
        If DisplayNewLine = 0 Then
            HSerPrintCRLF
            HSerPrint Hex(DeviceID)
            If DisplayNewLine > 0 Then
                HSerPrint " "
            End If
        End If
        HSerPrint " "

        'Do an initial Start

        HI2CStart
        If HI2CWaitMSSPTimeout <> TRUE Then

            'Send to address to device
            HI2CSend ( deviceID )

            'Did device fail to respond?
            If HI2CAckpollState = FALSE Then
                HI2CSend ( 0 )
                HSerPrint   Hex(deviceID)
            Else
                HSerPrint "--"
            End If

            'Do a stop.
            HI2CStop
        Else
            HSerPrint "!!"
        End If

    Next

    HSerPrintCRLF 2
    HSerPrint   "End of Search"
    HSerPrintCRLF 2
    Wait 1 s
    Wait While SwitchIn = ON
Loop



' ----- Support methods.  Subroutines and Functions


