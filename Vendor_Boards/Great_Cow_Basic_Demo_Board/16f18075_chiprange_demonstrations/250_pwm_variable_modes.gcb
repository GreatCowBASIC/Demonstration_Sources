'''
'''This program shows how to use PWM to provide 250Hz at 50% for 16Khz chip frequency
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.01
'''@date       15/09/2022
'''********************************************************************************
#CHIP 16F18075, 16
#option Explicit

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.1
    'PinManager data: v1.79.0
    'Generated for 16F18075
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 16F18075

    Sub InitPPS

        RB2PPS = 0x0C;  //RB2->PWM4:PWM4;
        RB1PPS = 0x0B;  //RB1->PWM3:PWM3;
        
    End Sub
    'Template comment at the end of the config file

'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    --------IN-LED--LED-LED LED -----
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX---------------------------
''-----------------------------------------
''

'' ------------------PORTE-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------RST--------------
''-----------------------------------------
''

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.2
#DEFINE LEDD3 PORTB.3
#DEFINE LEDD4 PORTB.4
#DEFINE LEDPORT LATB


Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     LEDD3         Out
Dir     LEDD4         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTB.5
Dir     SWITCHIN      In
'analogue port selection
#DEFINE ADCChannelSelected ANA0
#DEFINE ADSpeed LowSpeed


' ------ Start of main Program 

Dim myDuty, myFrequency As Byte

myFrequency = 80
'start at 50%
myDuty = 50

Do Forever
    For myDuty = 0 To 255
        Wait 10 ms
        HPWM ( HPWM4, myFrequency, myDuty, 2  )
        HPWM ( HPWM3, myFrequency, 255-myDuty, 2  )
    Next
    For myDuty = 254 To 1 step -1
        Wait 10 ms
        HPWM ( HPWM4, myFrequency, myDuty, 2  )
        HPWM ( HPWM3, myFrequency, 255-myDuty, 2  )
    Next
Loop

    End
