'''
'''This demonstration program is a simple GLCD demonstration of the SSD1306 GLCD capabilities and Maths/Trig capabilities.
'''
'''This program demonstrates theGCBASIC primatives a voltmeter on a Graphical LCD (GLCD)
''':
'''You can change the microcontroller, the GLCD and the analogue port.
'''
'''To change the microcontroller simply change the #chip statement
'''To change the GLCD replace GLCD definition
'''To change the analogue port change the ADCChannelSelected constant
'''
'''************************************************************************
'''@author  StanC & EvanV
'''@licence GPL
'''@version 1.01
'''@date    15/09/2022
' ----- Configuration

'Chip Settings.
#CHIP 16F18075
#OPTION Explicit

#INCLUDE <trig2places.h>


    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.1
    'PinManager data: v1.79.0
    'Generated for 16F18075
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 16F18075

    Sub InitPPS

            'Module: EUSART
            RC6PPS = 0x000E    'TX > RC6
            'Module: MSSP1
            SSP1CLKPPS = 0x13;  //RC3->MSSP1:SCL1;
            RC3PPS = 0x15;  //RC3->MSSP1:SCL1;
            SSP1DATPPS = 0x14;  //RC4->MSSP1:SDA1;
            RC4PPS = 0x16;  //RC4->MSSP1:SDA1;

    End Sub
    'Template comment at the end of the config file

'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------------------ADC---
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    --------IN-LED--LED-LED LED -----
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX------SDA-SCL--------------
''-----------------------------------------
''

'' ------------------PORTE-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------RST--------------
''-----------------------------------------
''

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.2
#DEFINE LEDD3 PORTB.3
#DEFINE LEDD4 PORTB.4
#DEFINE LEDPORT LATB


Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     LEDD3         Out
Dir     LEDD4         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTB.5
Dir     SWITCHIN      In
'analogue port selection
#DEFINE ADCChannelSelected ANA0
#DEFINE ADSpeed LowSpeed

' Define I2C settings
#DEFINE HI2C_BAUD_RATE 100
#DEFINE HI2C_DATA PORTC.4
#DEFINE HI2C_CLOCK PORTC.3
'Initialise I2C - note for the I2C module the ports need to be set to out
Dir HI2C_DATA In
Dir HI2C_CLOCK In
'Port specific controls may be required - see the datasheet

#INCLUDE <glcd.h>
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address 0x78
'These constants allow you to change the GLCD memory usage.
#DEFINE GLCD_PROTECTOVERRUN
'We have set this demonstration to use only 128bytes of RAM for GLCD operations.
#DEFINE GLCD_TYPE_SSD1306_LOWMEMORY_GLCD_MODE
#DEFINE GLCD_TYPE_SSD1306_CHARACTER_MODE_ONLY

'*******************************************************************************************






Dim radius,xcentre,ycentre,xend,old_xend,yend,old_yend As Byte
Dim angle,old_angle,adcval As Word
Dim volts As String * 4
xcentre=63
ycentre=58
'draw dial
GLCDCLS
    // GLCD_Open_PageTransaction 0,7
    //     Box 0,0,127,63

    // For radius=144 To 141 step -1
    //     dial
    // Next radius

    //     GLCDDrawChar (5,40,Asc("0")):GLCDDrawChar (115,40,Asc("5"))
    // GLCD_Close_PageTransaction
radius=120
angle=1
anglecheck
'main
Do
    old_angle=angle
    '--- DVM
    adcval=ReadAD(ADCChannelSelected)
    angle=adcval/2
    '
    adcval=adcval*100
    adcval=adcval/51
    volts=Str(adcval)
    If adcval<10 Then
        volts="0.0"+Left(volts,1,1)
        Goto volt_format_done
    End If
    If adcval<100 Then
        volts="0."+Mid(volts,1,2)
    Else
        volts=Left(volts,1,1)+"."+Mid(volts,2,2)
    End If
volt_format_done:
    '---
    anglecheck
    old_xend = xcentre + radius  * sin (old_angle)/255
    old_yend = ycentre - radius  * cos (old_angle)/255
    xend = xcentre + radius  * sin (angle)/255
    yend = ycentre - radius  * cos (angle)/255
    If old_angle<>angle Then
        '-- update screen if volts has changed
        '   erase old needle

        GLCD_Open_PageTransaction 0,7
            Box 0,0,127,63

            GLCDDrawChar (5,40,Asc("0")):GLCDDrawChar (115,40,Asc("5"))

            Line (xcentre,ycentre,old_xend,old_yend,0)
            '   draw V
            Line (55,22,63,38):Line (63,38,71,22)
            '   print new voltage
            'print Voltage

            GLCDPrint (50,10,volts,1)
        
            '   draw new needle
            Line (xcentre,ycentre,xend,yend,1)
        GLCD_Close_PageTransaction
        Wait 20 ms
    End If
Loop
'end main


Sub plotdial
    xend = 63 + radius  * sin (angle)/255
    yend = 58 - radius  * cos (angle)/255

    Pset (xend,yend,1)

End Sub
'
Sub dial

        For angle= 296 To 359
            plotdial
        Next angle
        '
        For angle= 0 To 63
            plotdial
        Next angle

End Sub
'
Sub anglecheck
    If angle>127 Then
        angle =angle-127
    Else
        angle =296+angle
    End If
End Sub
