'''
'''******************************************************************
'''
''' Pulse-Width Modulation (PWM) is a scheme that provides power to a load by switching
''' quickly between fully on and fully off states. The PWM signal resembles a square wave
''' where the high portion of the signal is considered the on state and the low portion of
''' the signal is considered the off state. The high portion, also known as the pulse width,
''' can vary in time and is defined in steps. A longer, high on time will illuminate the LED
''' brighter. The frequency or period of the PWM does not change. A larger number of
''' steps applied, which lengthens the pulse width, also supplies more power to the load.
''' Lowering the number of steps applied, which shortens the pulse width, supplies less
''' power. The PWM period is defined as the duration of one complete cycle or the total
''' amount of on and off time combined.
'''
''' This demonstation shows a how the changing PWM values can dim the LEDs
'''
''' This demonstration uses CCP1 that is then redirected via PPS to the output LEDs
'''
'''
'''
'''  PIC: 16F18855
'''  Compiler: GCB
'''  IDE: GC Studio
'''
'''  Board: PICKit 28-Pin Demo Board
'''  Date: 1.12.2022
'''

#CHIP 16f18855
#OPTION EXPLICIT

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.3
    // Generated for 16f18855
    //
    // Template comment at the start of the config file
    //
    #startup InitPPS, 85
    #define PPSToolPart 16f18855

    Sub InitPPS
              
            'Module: CCP1
            RB0PPS = 0x0009    'CCP1 > RB0
            CCP1PPS = 0x0008    'RB0 > CCP1 (bi-directional)
            RB1PPS = 0x0009    'CCP1 > RB1
            CCP1PPS = 0x0009    'RB1 > CCP1 (bi-directional)
            RB2PPS = 0x0009    'CCP1 > RB2
            CCP1PPS = 0x000A    'RB2 > CCP1 (bi-directional)
            RB3PPS = 0x0009    'CCP1 > RB3
            CCP1PPS = 0x000B    'RB3 > CCP1 (bi-directional)

    End Sub
    // Template comment at the end of the config file

'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   -----------------------------ADC--
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------LED--LED-LED LED--
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTE-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------SW--------------
''-----------------------------------------
''



'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATB

Dir     RB0         Out
Dir     RB1         Out
Dir     RB2         Out
Dir     RB3         Out

#DEFINE POTENTIOMETER RA0
Dir     POTENTIOMETER In

#DEFINE SWITCHIN      RE3

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

'Using ADC value to control the LED via the CCP/PWM
Do

    ' HPWM
    ' CCP/PWM CHANNEL 1, 40 Mhz PWM Frequency, the DUTY value read from the ADC ( range 0 to 255 equates to 0 to 100 )
    HPWM 1, 40, ReadAD( AN0 )
    Wait 10 ms

Loop












'Code optimisation

' This is used so do not optimise
#DEFINE USE_HPWMCCP1 TRUE
' This is not used so optimise
#DEFINE USE_HPWMCCP2 FALSE
' This is not used so optimise
#DEFINE USE_HPWMCCP3 FALSE
' This is not used so optimise
#DEFINE USE_HPWMCCP4 FALSE
' This is not used so optimise
#DEFINE USE_HPWMCCP5 FALSE

' This is used so include in the compiled code
#DEFINE USE_HPWM_TIMER2 TRUE
#DEFINE USE_HPWM_TIMER4 FALSE
#DEFINE USE_HPWM_TIMER6 FALSE
#DEFINE USE_HPWM_TIMER7 FALSE
