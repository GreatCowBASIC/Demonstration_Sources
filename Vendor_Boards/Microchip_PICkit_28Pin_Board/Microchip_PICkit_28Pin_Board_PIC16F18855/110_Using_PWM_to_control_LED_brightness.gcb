'''
'''******************************************************************
'''
''' Pulse-Width Modulation (PWM) is a scheme that provides power to a load by switching
''' quickly between fully on and fully off states. The PWM signal resembles a square wave
''' where the high portion of the signal is considered the on state and the low portion of
''' the signal is considered the off state. The high portion, also known as the pulse width,
''' can vary in time and is defined in steps. A longer, high on time will illuminate the LED
''' brighter. The frequency or period of the PWM does not change. A larger number of
''' steps applied, which lengthens the pulse width, also supplies more power to the load.
''' Lowering the number of steps applied, which shortens the pulse width, supplies less
''' power. The PWM period is defined as the duration of one complete cycle or the total
''' amount of on and off time combined.
'''
''' The demo vary the PWM to all the LEDS. This is achieved by redirected PMW6 to the LEDS.
'''
'''
'''  PIC: 16F18855
'''  Compiler: GCB
'''  IDE: GC Studio
'''
'''  Board: PICKit 28-Pin Demo Board
'''  Date: 06.11.2017
'''

#CHIP 16f18855,32

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.3
    'PinManager data: Not available (3)
    // Generated for 16f18855
    //
    // Template comment at the start of the config file
    //
    #startup InitPPS, 85
    #define PPSToolPart 16f18855

    Sub InitPPS
              
            'Module: PWM6
            RC0PPS = 0x000E    'PWM6OUT > RC0
            RC1PPS = 0x000E    'PWM6OUT > RC1
            RC2PPS = 0x000E    'PWM6OUT > RC2
            RC3PPS = 0x000E    'PWM6OUT > RC3
        
      
    End Sub
    // Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   -----------------------------ADC--
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------LED--LED-LED LED--
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------PWM-PWM-PWM-PWM--
''-----------------------------------------
''

'' ------------------PORTE-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------SW--------------
''-----------------------------------------
''



'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATB

Dir     RB0         Out
Dir     RB1         Out
Dir     RB2         Out
Dir     RB3         Out

#DEFINE POTENTIOMETER RA0
Dir     POTENTIOMETER In

#DEFINE SWITCHIN      RE3

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.



'Optimise commands  for PWM modules to reduce the size of the code produced.
' not used Optimise
#DEFINE USE_HPWMCCP1 FALSE
' not used Optimise
#DEFINE USE_HPWMCCP2 FALSE
' not used Optimise
#DEFINE USE_HPWMCCP3 FALSE
' not used Optimise
#DEFINE USE_HPWMCCP4 FALSE

' used so compile
#DEFINE USE_HPWM6 TRUE
' not used Optimise
#DEFINE USE_HPWM7 FALSE

' used so compile
#DEFINE USE_HPWM_TIMER2 TRUE
' not used Optimise
#DEFINE USE_HPWM_TIMER4 FALSE
' not used Optimise
#DEFINE USE_HPWM_TIMER6 FALSE

#DEFINE myFrequency 60
#DEFINE myTimerSelected 2

Dim myDuty As Byte
'start at 50%
myDuty = 50

HPWM ( HPWM6, myFrequency, myDuty , myTimerSelected  )

Do Forever
    For myDuty = 0 To 255
        Wait 10 ms
        HPWM ( HPWM6, myFrequency, myDuty, myTimerSelected  )
    Next
    Wait 10 ms
Loop
