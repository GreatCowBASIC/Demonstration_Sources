'''
'''  This demonstration produces a variable speed rotating LED display that is proportional to the ADC value.
'''  The ADC value and LED rotate speed are inversely proportional to each other.
'''
'''  Rotate the POT counterclockwise to see the LEDs shift faster, press the switch to reverse the direction of the LEDs.
'''
'''  An attached Serial Terminal will show the state of the LEDs and the direction of the rotation.
'''
'''  Rotate the potentiometer to change the LEDs.
'''
'''
'''  PIC: 16F18855
'''  Compiler: GCB
'''  IDE: GC Studio
'''
'''  Board: PICKit 28-Pin Demo Board
'''  Date: 10.12.2022
'''

' ----- Configuration
#CHIP 16f18855
#OPTION Explicit

'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   -----------------------------ADC--
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------LED--LED-LED LED--
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    TX-------------------------------
''-----------------------------------------
''

'' ------------------PORTE-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------SW---------------
''-----------------------------------------
''

' The `#STARTUP` will ensure the PPS is setup early in the initialisation process
    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.3
    // Generated for 16f18855
    //
    // Template comment at the start of the config file
    //
    #startup InitPPS, 85
    #define PPSToolPart 16f18855

    Sub InitPPS

        'Module: EUSART
        RC7PPS = 0x0010    'TX > RC7

    End Sub
    // Template comment at the end of the config file


#DEFINE USART_BAUD_RATE 19200
#DEFINE USART_TX_BLOCKING

#DEFINE SWITCH_DOWN         0
#DEFINE SWITCH_UP           1

#DEFINE LED_RIGHT           TRUE
#DEFINE LED_LEFT            FALSE

#DEFINE SWITCH              PORTE.3

Dim leds  As Byte
Dim DIRECTION As Byte

Dim mydelay As Word

'start from the right to left
direction = LED_RIGHT

Dir porta Out
leds = 8

'Potentitor is connected to RA4...set as input
Dir portA.0 In

HSerPrintCRLF 2
HSerPrint "Great Cow Basic @2020": HSerPrintCRLF
HSerPrint "28Pin Demo Board": HSerPrintCRLF
HSerPrint "Rotate demonstrations with serial": HSerPrintCRLF 3
Wait 1 s


Do

    'Show WORD read of ADC10
    mydelay = ReadAD10 ( AN0 )
    HSerPrint "ADC: "
    HSerPrint LeftPad(Str(mydelay),4, " ")
    HSerSend 9

    ' Factor the ADC reading to delay steps
    mydelay = Scale( mydelay, 0, 1023, 100, 1000 )
    HSerPrint "Time: "
    HSerPrint LeftPad(Str(mydelay),4, " ")
    HSerSend 9


    Wait mydelay ms
    If check_switch = TRUE Then
        ' toggle the direction
        direction = !direction
    End If

    PORTB = leds

    'Show state
    If direction = LED_RIGHT Then
        HSerPrint ">> "
    Else
        HSerPrint "<< "
    End If

    HSerPrint Right(ByteToBin( leds ),4)
    HSerPrintCRLF


    If  direction = LED_RIGHT  Then

        'shift to the right by 1 but ensure the Carry bit is clear by setting to off
        Set C Off
        Rotate leds Right

        If leds = 0 Then
            leds = 8
        End If

    Else

        'Set C off to ensure the carry bit does not impact
        Set C Off
        Rotate leds Left

        'when the last LED is lit, restart the pattern
        If  leds = 16 Then
            leds = 1
        End If
    End If
Loop



'global variable - if button is held down, we don't want to keep on switching directions
Dim previous_state As BIT
previous_state = SWITCH_UP

Function  check_switch
    'switch is normally open to 5V ...when pressed, RA3 is connected to GND
    If (SWITCH = SWITCH_DOWN) Then
        'debounce by delaying and checking if switch is still pressed
        Wait 1 ms
        If ( (previous_state =  SWITCH_DOWN) & (SWITCH = SWITCH_DOWN) ) Then
            ' don't toggle
            check_switch = FALSE
            Exit Function
        Else
            ' check if still down
            If (SWITCH = SWITCH_DOWN) Then
                previous_state = SWITCH_DOWN
                ' reverse the LEDs
                check_switch = TRUE
                Exit Function
            Else
                'switch not properly held down
                previous_state = SWITCH_UP
                ' don't reverse
                check_switch = FALSE
                Exit Function
            End If
        End If
    Else
        'switch not pressed
        previous_state = SWITCH_UP
        'don't reverse
        check_switch = FALSE
        Exit Function
    End If

End Function

''' GCB Optimisation file

'Optmise PWM.h
#DEFINE USE_HPWMCCP1 TRUE
#DEFINE USE_HPWMCCP2 TRUE
#DEFINE USE_HPWMCCP3 TRUE
#DEFINE USE_HPWMCCP4 TRUE

#DEFINE USE_HPWM6 TRUE
#DEFINE USE_HPWM7 TRUE

#DEFINE USE_HPWM_TIMER2 TRUE
#DEFINE USE_HPWM_TIMER4 TRUE
#DEFINE USE_HPWM_TIMER6 TRUE

'Optimise A-d.h
'Standard family chips
#DEFINE USE_AD0 FALSE
#DEFINE USE_AD1 FALSE
#DEFINE USE_AD2 FALSE
#DEFINE USE_AD2 FALSE
#DEFINE USE_AD3 FALSE
#DEFINE USE_AD4 TRUE
#DEFINE USE_AD5 FALSE
#DEFINE USE_AD6 FALSE
#DEFINE USE_AD7 FALSE
#DEFINE USE_AD8 FALSE
#DEFINE USE_AD9 FALSE
#DEFINE USE_AD10 FALSE
#DEFINE USE_AD11 FALSE
#DEFINE USE_AD12 FALSE
#DEFINE USE_AD13 FALSE
#DEFINE USE_AD14 FALSE
#DEFINE USE_AD15 FALSE
#DEFINE USE_AD16 FALSE
#DEFINE USE_AD17 FALSE
#DEFINE USE_AD18 FALSE
#DEFINE USE_AD19 FALSE
#DEFINE USE_AD20 FALSE
#DEFINE USE_AD21 FALSE
#DEFINE USE_AD22 FALSE
#DEFINE USE_AD23 FALSE
#DEFINE USE_AD24 FALSE
#DEFINE USE_AD25 FALSE
#DEFINE USE_AD26 FALSE
#DEFINE USE_AD27 FALSE
#DEFINE USE_AD28 FALSE
#DEFINE USE_AD29 FALSE
#DEFINE USE_AD30 FALSE
#DEFINE USE_AD31 FALSE
#DEFINE USE_AD32 FALSE
#DEFINE USE_AD33 FALSE
#DEFINE USE_AD34 FALSE

'Family of chips based on 16f1688x with ADCON3 register
#DEFINE USE_ADA0 FALSE
#DEFINE USE_ADA1 FALSE
#DEFINE USE_ADA2 FALSE
#DEFINE USE_ADA3 FALSE
#DEFINE USE_ADA4 TRUE
#DEFINE USE_ADA5 FALSE
#DEFINE USE_ADA6 FALSE
#DEFINE USE_ADA7 FALSE
#DEFINE USE_ADB0 FALSE
#DEFINE USE_ADB1 FALSE
#DEFINE USE_ADB2 FALSE
#DEFINE USE_ADB3 FALSE
#DEFINE USE_ADB4 FALSE
#DEFINE USE_ADB5 FALSE
#DEFINE USE_ADB6 FALSE
#DEFINE USE_ADB7 FALSE
#DEFINE USE_ADC0 FALSE
#DEFINE USE_ADC1 FALSE
#DEFINE USE_ADC2 FALSE
#DEFINE USE_ADC3 FALSE
#DEFINE USE_ADC4 FALSE
#DEFINE USE_ADC5 FALSE
#DEFINE USE_ADC6 FALSE
#DEFINE USE_ADC7 FALSE
#DEFINE USE_ADD0 FALSE
#DEFINE USE_ADD1 FALSE
#DEFINE USE_ADD2 FALSE
#DEFINE USE_ADD3 FALSE
#DEFINE USE_ADD4 FALSE
#DEFINE USE_ADD5 FALSE
#DEFINE USE_ADD6 FALSE
#DEFINE USE_ADD7 FALSE
#DEFINE USE_ADE0 FALSE
#DEFINE USE_ADE1 FALSE
#DEFINE USE_ADE2 FALSE
