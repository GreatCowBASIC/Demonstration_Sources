'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The SSD1306 controller a small graphical OLED, suitable for a lot of various projects.
'''The display is 38*35 mm, with an active display surface of 0.96inches , and a 128*64 pixel resolution.
'''The display is easy to interface, using an I2C type of communication using pull-up resistors on the IC2 data and the IC2 clock lines.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''@author  EvanV
'''@licence GPL
'''@version 1.0
'''@date    7.7.2018
'''********************************************************************************

' ----- Configuration
#CHIP 16f15376, 32
#OPTION Explicit

#INCLUDE <glcd.h>

'Generated by PIC PPS Tool for GCBASIC
'PPS Tool version: 0.0.5.22
'PinManager data: Not available (3)
'Generated for 16F15376
'
'Template comment at the start of the config file
'
#STARTUP InitPPS, 85
#DEFINE PPSToolPart 16F15376

Sub InitPPS

    'Module: MSSP1
    'SDA1 > RB5
    RB5PPS = 0x0016
    'RB5 > SDA1 (bi-directional)
    SSP1DATPPS = 0x000D
    'SCL1 > RB7
    RB7PPS = 0x0015
    'RB7 > SCL1 (bi-directional)
    SSP1CLKPPS = 0x000F

End Sub
'Template comment at the end of the config file



' ----- Define Hardware settings
' Define I2C settings - CHANGE PORTS if required for your specific device.
#DEFINE HI2C_BAUD_RATE 400
' Use a suitable pullup resistor.
#DEFINE HI2C_DATA  PORTB.5
' Use a suitable pullup resistor.
#DEFINE HI2C_CLOCK PORTB.7
'I2C pins need to be input for SSP module when used on Microchip PIC device
Dir HI2C_DATA In
Dir HI2C_CLOCK In

' ----- Define GLCD Hardware settings
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address 0x78

' ----- Define variables

Dim BYTENUMBER, CCOUNT As Byte

CCount = 0
Dim longNumber As Long
' max value = 4294967290
longNumber = 123456
Dim wordNumber As Word
Dim outstring As String
wordNumber = 0
byteNumber = 0

// ----- Main program

GLCDPrint 0, 0,   "Great Cow BASIC"
GLCDPrint (0, 11, "Anobium 2019")
GLCDPrint (0, 23, "MPLAB Xpress Board")
GLCDPrint (0, 35, "PIC"+ChipNameStr )
GLCDPrint (0, 47, "I2C OLED SDD1306" )

Wait 3 s
GLCDCLS

' Prepare the static components of the screen
' Print some text
GLCDPrint ( 2,   1, "PrintStr")
' Print some more text
GLCDPrint ( 64,  1, "@")
' Print chip speed
GLCDPrint ( 72,  1, ChipMHz)
' Print some text
GLCDPrint ( 86, 1, "Mhz")
' Draw a box
Box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1
' Draw a box
Box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1
' Draw a circle
Circle( 44,41,15)
' Draw a line
Line 64,31,0,31

Do Forever

    For CCount = 32 To 127

        ' Print a HEX string
        GLCDPrint ( 64 ,  36,  Hex(longNumber_E ) )
        ' Print a HEX string
        GLCDPrint ( 76 ,  36,  Hex(longNumber_U ) )
        ' Print a HEX string
        GLCDPrint ( 88 ,  36,  Hex(longNumber_H ) )
        ' Print a HEX string
        GLCDPrint ( 100 ,  36, Hex(longNumber   ) )
        ' Print a HEX string
        GLCDPrint ( 112 ,  36, "h" )


        ' Print a padded string
        GLCDPrint ( 64 ,  44, Pad(Str(wordNumber), 5 ) )
        ' Print a padded string
        GLCDPrint ( 64 ,  52, Pad(Str(byteNumber), 3 ) )


        ' Draw a Box
        Box (46,9,56,19)
        ' Draw a character
        GLCDDrawChar(48, 10, CCount )
        ' Prepare a string
        outString = Str( CCount )
        ' Draw a string
        GLCDDrawString(64, 10, Pad(outString,3) )

        ' Draw a filled box
        FilledBox 3,43,11,51, wordNumber

        ' Draw a filled box
        FilledCircle( 44,41,9, longNumber XOR 1)
        ' Draw a line
        Line 0,63,64,31

        ' Do some simple maths
        longNumber = longNumber + 7 : wordNumber = wordNumber + 3 : byteNumber++

    Next

Loop
End
