'''A demonstration of GCBASIC supporting the WS2812 LED devices.
'''
'''This demonstration contains three operational demonstrations, and two methods of driving the WS2812 LEDs.
'''
'''    The demos have a speed control using the Pot. This adjusts the timing.
'''
'''     Demos:
'''         1. Chaser - LED chaser
'''         2. Flash All LEDs
'''         3. Xylon Chaser, also known as Knight Rider
'''
'''     Methods of driving the WS2812:
'''         1. CLC approach using the Microchip Configurable Logic Cells (CLC) to create a specialised SPI signal in terms of timing
'''         2. Bit Banging a SPI signal, again in terms of timing.
'''
'''
'''     Operation:
'''         By default the Chaser (#1) will be operational when applying power to the microcontroller and the WS2812 LEDs.
'''         Pressing the Switch will change the operational to the Flash All LEDs (#2), pressing the Switch again with return to Chaser operation.
'''         To select the Xylon Chase press the switch when applying power to the microcontroller and the WS2812 LEDs.
'''
'''     Selecting the method of generating the specialised SPI signal:
'''         Using the Microchip CLC method as detailed in AN1606.
'''             This method can be selected by defining the constants as follows.
'''                 #define UseWS2812PWMSendData
'''                 #define WS2812SendData WS2812PWMSendData
'''         Using the bit Banging method.
'''             This method can be selected by defining the constants as follows.
'''                 #define UseWS2812BitBangSendData
'''                 #define WS2812SendData WS2812BitBangSendData
'''
'''         These are mutually exclusive - choose either CLC or Bit Banging, define the TWO constants.  The constants ensure the code is configured correctly.
'''
'''     Configuration:
'''         WS2812 DIN is connected to PORTC.7.
'''         Pot is connected to PORTA.4
'''         Switch is pulled high and connected to PORTA.5
'''
'''
'''     General commentary:
'''         The use of CLC is detailed in AN1606. Please review this document.
'''         The timing of the WS2812 is absolutely critical.  Please review the WS2812 datasheet for the specific timing that are required.
'''
'''         The Chaser demonstration simply writes to the WS2812 (for the number of LEDs) and indexes through the LEDS enabling the select color on each pass through the sequence.
'''         The Flash ALL LEDS simply writes to all the LEDS the same color.
'''         The Xylon chaser uses an ARRAY to hold the pattern. When a bit in 1 then the LEDs with be turn on.
'''
'''     This demonstration can be further developed - have fun.
'''
'''
'''************************************************************************
'''
'''PIC: 16F18855
'''Compiler: GCB
'''IDE: GCB@SYN
'''Board: Xpress Evaluation Board
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.00
'''@date       17.08.2016
'''********************************************************************************
'''
'----- Configuration
'Chip Settings.
#CHIP 16f18855, 32
#OPTION Explicit


Setup:

#DEFINE UseWS2812PWMSendData
#DEFINE WS2812SendData WS2812PWMSendData

'    #define UseWS2812BitBangSendData
'    #define WS2812SendData WS2812BitBangSendData

#DEFINE DoTracer
#DEFINE DoXyLon

' ----- Define Hardware settings
'Set the PPS of the microcontroller
'Set the PPS for this solution.
#STARTUP InitPPS, 85

Sub InitPPS
    UNLOCKPPS

    #IFDEF UseWS2812PWMSendData
        'Setup CLC inputs and outputs
        'RC4->MSSP1:SDI1
        SSP1DATPPS = 0x0014
        'RA7->CLC1:CLCIN0
        CLCIN0PPS = 0x0007
        'RA7->CLC1:CLCIN1
        CLCIN1PPS = 0x0007
        'RB6->CLC1:CLCIN2
        CLCIN2PPS = 0x000E
        'RB7->CLC1:CLCIN3
        CLCIN3PPS = 0x000F
        'RB4->CCP1:CCP1
        RB4PPS = 0x0009
        'RC3->TMR2:T2IN
        T2AINPPS = 0x0013

        'Setup SPI and the outout for DIN
        'RB1->MSSP1:SDO1
        RB1PPS = 0x0015
        'RB0->MSSP1:SCK1
        RB0PPS = 0x0014
        'RC7->CLC1:CLC1OUT
        RC7PPS = 0x0001

        'Setup PWM
        'RA0->PWM6:PWM6OUT
        RA0PPS = 0x000E
    #ENDIF

    'Setup RS232
    'RC0->EUSART:TX
    RC0PPS = 0x0010
    'RC1->EUSART:RX
    RXPPS  = 0x0011

    LOCKPPS
End Sub

'-------------------LATC-----------------
'Bit#:  -7---6---5---4---3---2---1---0---
'      |PWM|-----------------------------
'------|DIN|-----------------------------
'

' ----- Constants


#DEFINE USART_BAUD_RATE 115200
#DEFINE USART_TX_BLOCKING

'STANDARD XPRESS BOARD CONSTANTS
#DEFINE LEDD2  PORTA.0
#DEFINE LEDD3  PORTA.1
#DEFINE LEDD4  PORTA.2
#DEFINE LEDD5  PORTA.3
Dir    LEDD2 Out
Dir    LEDD3 Out
Dir    LEDD4 Out
Dir    LEDD5 Out

#DEFINE Potentiometer      PORTA.4
Dir      Potentiometer In

#DEFINE SWITCH_DOWN         0
#DEFINE SWITCH_UP           1
#DEFINE SWITCH             PORTA.5
Dir    SWITCH              In

'WS2812 SPECIFIC CONSTANTS
#DEFINE DIN PORTC.7
Dir     DIN Out
#DEFINE SSPOutRegister SSP1BUF

' ----- Variables

Dim YLOOP, PIXELCOUNT, XLOOP, XYLONELEMENTVALUE, LEDDISPLAYSTATE, SWITCHSTATE As Byte

'Number of WS2812 LEDs
PixelCount = 8
'Color to send to LEDs 6 byte  color address
ColorofLED = 0
'Curent LED being address - between 1 and the PixelCount
CurrentAddessedLED = 1
'Current LED sequence pointer. Simply points to the array of colors
CurrentLEDColorSequence = 0
'LEDDisplayState = 0 or 1.  0 = LEDs addressed is sequence 1-2-3-4 etc OR 1 = ALL on 'not' sequential
LEDDisplayState = 1
'State of the switch tracker.  Toggle LEDDisplayState 1 | 0
SwitchState = SWITCH_UP

Dim CurrentAddessedLED, CurrentLEDColorSequence As Byte
Dim ColortoSend, ColorofLED As Long

' ----- Main body of program commences here.

MainCode:

WS2812_Init

If SWITCH = SWITCH_DOWN Then

    #IFDEF DoXyLon


        ' Data array of Xylon LEDs
        #DEFINE XyLonSteps  6
        Dim XyLonArray( XyLonSteps )
        XyLonArray(1)  = 0b10000001
        XyLonArray(2)  = 0b01000010
        XyLonArray(3)  = 0b00100100
        XyLonArray(4)  = 0b00011000
        XyLonArray(5)  = 0b00100100
        XyLonArray(6)  = 0b01000010

        Do

            'Send data
            For yloop =1 To XyLonSteps

                #IFDEF UseWS2812BitBangSendData
                    'Ensure minimum delay has happended as the timing is critical
                    'The delay is maintained by the timer0 Interrupt
                    Wait While timeoutocurred =  0
                    IntOff
                #ENDIF


                XyLonElementValue = XyLonArray(yloop)

                For xloop = 1 To PixelCount

                    If XyLonElementValue.7 = 1 Then
                        ' Red
                        ColortoSend = 0x00ff00
                    Else
                        ' black
                        ColortoSend = 0
                    End If

                    'Send the data - either to the CLC or bit banging
                    WS2812SendData ( ColortoSend )

                    Rotate XyLonElementValue Left

                Next

                #IFDEF UseWS2812BitBangSendData
                    'Set InterPacketDelay running
                    ' Preload Count
                    SetTimer(0, period_us)
                    timeoutocurred =  0
                    IntOn
                #ENDIF

                'The minimum delay is 50us. This will SURELY never happen....
                Dim mydelay As Word
                mydelay =  ReadAD10( AN4 )

                If mydelay > 0 Then
                    Wait mydelay ms
                Else
                    Wait While ReadAD10( AN4 ) = 0
                End If
                If mydelay > 1015 Then
                    Do

                    Loop While ReadAD10( AN4 ) > 1000
                End If

            Next

        Loop

    #ENDIF

Else

    #IFDEF DoTracer

        ' Set of colors stored in an array for simplicity - they can be addressed with a pointer.
        ' 5 long element in the array = 5 * 4 = 20
        Dim colorArray( 20)

        ' Set the values of the array to the colors.  Five colors are defined. You can add more.....
        'RED
        SetLongArrayValueHandler ( colorArray, 0, 0x00FF00 )
        'yellow
        SetLongArrayValueHandler ( colorArray, 1, 0xFFFF00 )
        'GREEN
        SetLongArrayValueHandler ( colorArray, 2, 0xFF0000 )
        'WHITE
        SetLongArrayValueHandler ( colorArray, 3, 0xFFFFFF )
        'BLACK
        SetLongArrayValueHandler ( colorArray, 4, 0x000000 )

        Do

            'This gets the long value of color from the array - CurrentLEDColorSequence is a index into the array
            ColorofLED = GetLongArrayValueHandler ( ColorArray, CurrentLEDColorSequence )

            'first loop - as we interate through the first loop to get the tracer display working
            For yloop = 1 To PixelCount

                #IFDEF UseWS2812BitBangSendData
                    'Ensure minimum delay has happended as the timing is critical
                    'The delay is maintained by the timer0 Interrupt
                    Wait While timeoutocurred =  0
                    IntOff
                #ENDIF

                ' second loop - loop sends data to the LEDs
                For xloop = 1 To PixelCount

                    'Set the color or set to black
                    If xloop = CurrentAddessedLED Then
                        ColortoSend = ColorofLED
                    Else
                        If LEDDisplayState = 1 Then
                            'black
                            ColortoSend = 0x000000
                        Else
                            'This has to reset here... why? As the output function destroys the long value when ROTATING the number.
                            ColortoSend = ColorofLED
                        End If
                    End If

                    'Send the data - either to the CLC or bit banging
                    WS2812SendData ( ColortoSend )

                Next

                'Increment the LED being addressed
                CurrentAddessedLED++

                'The minimum delay is 50us. This will SURELY never happen....
                Dim mydelay As Word
                mydelay =  ReadAD10( AN4 )

                If mydelay > 0 Then
                    Wait mydelay ms
                Else
                    Wait While ReadAD10( AN4 ) = 0
                End If
                If mydelay > 1015 Then
                    Do

                    Loop While ReadAD10( AN4 ) > 1000
                End If

                If Switch = SWITCH_DOWN AND SwitchState = SWITCH_UP Then
                    LEDDisplayState = !LEDDisplayState
                    SwitchState = SWITCH_DOWN
                End If

                If Switch = SWITCH_UP Then
                    SwitchState = SWITCH_UP
                End If

                #IFDEF UseWS2812BitBangSendData
                    'Set InterPacketDelay running
                    ' Preload Count
                    SetTimer(0, period_us)
                    timeoutocurred =  0
                    IntOn
                #ENDIF

            Next

            'Reset the addressed LED
            CurrentAddessedLED = 1
            'Resequence LEDs the start of the color sequence
            CurrentLEDColorSequence = ( CurrentLEDColorSequence + 1 ) mod 4

        Loop

    #ENDIF

End If
End

' ----- Support methods.  Subroutines and Functions

'Initialise the LED device, timers etc.
Sub WS2812_Init

    Set DIN Off

    #IFDEF UseWS2812BitBangSendData
        timeoutocurred =  0
        'Period for LED internal processing
        #DEFINE period_us   0x1B00
        InitTimer0(Osc, TMR0_FOSC4 + PRE0_2 , POST0_1)
        ' Preload Count
        SetTimer(0, period_us)
        StartTimer 0
        On Interrupt Timer0Overflow Call ISR0

        Set DIN On
        Set DIN Off
        Wait 500 us
    #ENDIF

    #IFDEF UseWS2812PWMSendData
        ' SSPBUF updates ignoring BF for daisy-chained operation
        BOEN = 1

        ' SMP End CKE Idle to Active
        SSP1STAT = 0x00

        ' SSPEN enabled CKP Idle:Low, Active:High SPI Master mode, clock = T2_match/2
        SSP1CON1 = 0x23

        ' SSPADD 0
        SSP1ADD = 0x00

        ' Setup the PWM
        ' PWM6POL active_hi PWM6EN enabled
        PWM6CON = 0x80

        ' DC 2
        PWM6DCH = 0x02

        ' DC 1
        PWM6DCL = 0x40

        ' LC1G1POL inverted LC1G2POL not_inverted LC1G3POL not_inverted LC1G4POL not_inverted LC1POL not_inverted
        CLC1POL = 0x01

        ' LC1D1S PWM6_OUT
        CLC1SEL0 = 0x18

        ' LC1D2S SCK from MSSP1
        CLC1SEL1 = 0x27

        ' LC1D3S SDO from MSSP1
        CLC1SEL2 = 0x26

        ' LC1D4S CLCIN0 (CLCIN0PPS)
        CLC1SEL3 = 0x00

        ' LC1G1D3N disabled LC1G1D2N enabled LC1G1D4N disabled LC1G1D1T disabled LC1G1D3T disabled LC1G1D2T disabled LC1G1D4T disabled LC1G1D1N enabled
        CLC1GLS0 = 0x05

        ' LC1G2D2N disabled LC1G2D1N disabled LC1G2D4N disabled LC1G2D3N enabled LC1G2D2T disabled LC1G2D1T disabled LC1G2D4T disabled LC1G2D3T disabled
        CLC1GLS1 = 0x10

        ' LC1G3D1N disabled LC1G3D2N disabled LC1G3D3N disabled LC1G3D4N disabled LC1G3D1T disabled LC1G3D2T enabled LC1G3D3T disabled LC1G3D4T disabled
        CLC1GLS2 = 0x08

        ' LC1G4D1N disabled LC1G4D2N disabled LC1G4D3N disabled LC1G4D4N disabled LC1G4D1T disabled LC1G4D2T disabled LC1G4D3T enabled LC1G4D4T disabled
        CLC1GLS3 = 0x20

        ' LC1EN enabled INTN disabled INTP disabled MODE AND-OR
        CLC1CON = 0x80

        ' Set TMR2 to the options selected in the User Interface

        ' T2CKPS 1:1 T2OUTPS 1:1 TMR2ON off
        T2CON = 0x00

        ' T2CS FOSC/4
        T2CLKCON = 0x01

        ' T2PSYNC Synchronized T2MODE Software control T2CKPOL Falling Edge T2CKSYNC Synchronized
        T2HLT = 0xE0

        ' T2RSEL T2CKIPPS pin
        T2RST = 0x00

        ' PR2 4
        T2PR = 0x04

        ' TMR2 0
        T2TMR = 0x00

        ' Clearing IF flag.
        TMR2IF = 0

        ' Start TMR2
        StartTimer 2

    #ENDIF
End Sub

Sub WS2812BitBangSendData ( In ColortoSend As Long )

    Repeat 24
        If ColortoSend.23 On Then
            'High for to 1 bit
            Set DIN On
        Else
            'High and Low as fast as practical
            Set DIN On
            Set DIN Off
        End If
        Rotate ColortoSend Left
        'Low for the 1 bit
        Set DIN Off
    End Repeat

End Sub

'Uses SSP1BUF as the output buffer - change the define at the top for your chip
Sub WS2812PWMSendData ( In ColortoSend As Long )

    'Put byte to send into buffer
    'Will start transfer
    SSPOutRegister = ColortoSend_u
    Wait While BF = Off

    SSPOutRegister = ColortoSend_h
    Wait While BF = Off

    SSPOutRegister = ColortoSend
    Wait While BF = Off

End Sub

'Returns the long of a color for a specific element
Function GetLongArrayValueHandler ( In AddressArray(),  ElementPointer ) As Long

    ElementPointer = ( ElementPointer * 4 ) + ElementPointer
    GetLongArrayValueHandler = AddressArray(ElementPointer)
    GetLongArrayValueHandler_H = AddressArray(ElementPointer+1)
    GetLongArrayValueHandler_U = AddressArray(ElementPointer+2)
    GetLongArrayValueHandler_E = AddressArray(ElementPointer+3)

End Function

'Sets the array element to a specific long value
Sub SetLongArrayValueHandler ( In AddressArray(), ElementPointer, In ElementValue As Long )

    ElementPointer = ( ElementPointer * 4 ) + ElementPointer
    AddressArray(ElementPointer)   = ElementValue
    AddressArray(ElementPointer+1)  = ElementValue_H
    AddressArray(ElementPointer+2) = ElementValue_U
    AddressArray(ElementPointer+3) = ElementValue_E

End Sub

Sub ISR0

    TMR0IF = 0
    'Set InterPacketDelay running
    ' Preload Count
    SetTimer(0, period_us)
    timeoutocurred =  1

End Sub
