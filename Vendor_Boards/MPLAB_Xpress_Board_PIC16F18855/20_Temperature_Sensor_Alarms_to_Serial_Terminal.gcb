'''
''' This demonstration will show the tempature sensor on the serial terminal.  The sensor used I2C.
'''
''' It also shows many parameter from the sensor.
'''
''' The EMC1001 controls the two output pins (marked on the Xpress board as ALARM1 and ALARM2)
''' according to two different sets of rules.
''' While both pins are open drain, the Xpress evaluation board comes with a pull up resistor only
''' for the ALARM1 output. If you intend to use the second output you will have to mount a second
''' pull up resistor yourself (a ~10K ohm resistor will do).
'''
''' The ALARM1 output is activated (pulled low) only when Ttherm is passed (>85ï¿½C by default).
''' You can change this value by writing to the Therm Limit register (0x20).
''' Note: This is an 8-bit (integer) value.
'''
''' The ALARM2 output is activated (pulled low) when the temperature is above Th or below Tl. After appropriate configuration.
''' By default this output is not enabled.
''' Write to the Configuration register (0x03) the appropirate value (0x05 for example) to activate.
'''
''' You can also verify the device has detected the temperature conditions by reading the STATUS register (0x01).
''' Bit 6 and bit 5 are set when Thigh and Tlow respectively are violated (equiv ALARM2), while bit 0 is set when the THERM limit is exceeded (equiv. ALARM1)
'''
'''
'''  PIC: 16F18855
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: Xpress Evaluation Board
'''  Date: 13.3.2016
'''


' ----- Configuration
'Chip Settings.
#CHIP 16f18855,32
#OPTION Explicit

#INCLUDE <lowlevel\hwi2c2.h>
#INCLUDE <emc1001.h>


#DEFINE SWITCH_DOWN         0
#DEFINE SWITCH_UP           1

#DEFINE SWITCH      PORTA.5

#DEFINE LEDD2 PORTA.0
#DEFINE LEDD3 PORTA.1
#DEFINE LEDD4 PORTA.2
#DEFINE LEDD5 PORTA.3
Dir     LEDD2 Out
Dir     LEDD3 Out
Dir     LEDD4 Out
Dir     LEDD5 Out

#DEFINE ALARM1  PORTA.7
#DEFINE ALARM2  PORTA.6
Dir     ALARM1  In
Dir     ALARM2  In

'Set the PPS of the PWM and the RS232 ports.
'Set the PPS for this solution.
#STARTUP InitPPS, 85

Sub InitPPS
    UNLOCKPPS
    'RC0->EUSART:TX;
    RC0PPS = 0x0010
    'RC1->EUSART:RX;
    RXPPS  = 0x0011

    'RC3->MSSP2:SDA2;
    RC3PPS = 0x0017
    'RC3->MSSP2:SDA2;
    SSP2DATPPS = 0x0013
    'RC4->MSSP2:SCL2;
    SSP2CLKPPS = 0x0014
    'RC4->MSSP2:SCL2;
    RC4PPS = 0x0016
    LOCKPPS
End Sub

#DEFINE USART_BAUD_RATE 19200
#DEFINE USART_TX_BLOCKING

' ----- Define Hardware settings for HWI2C2
' Define I2C settings - CHANGE PORTS if required for your specific device.
#DEFINE HI2C2_BAUD_RATE 400
#DEFINE HI2C2_DATA PORTC.3
#DEFINE HI2C2_CLOCK PORTC.4
'Initialise I2C Master
'I2C pins need to be input for SSP2 module
Dir HI2C2_DATA In
Dir HI2C2_CLOCK In
'MASTER Second Port
HI2C2Mode Master

Dim HI, LO, EMC_TEMP_H, SIGNBIT, WHOLE, FRACT, DIG, SHOWDEGREECHAR, DATA, OLDSTATUS As Byte
showDegreeChar = FALSE

// ----- Main body of program commences here.

HSerPrintCRLF 2
HSerPrint "Great Cow Basic @2016": HSerPrintCRLF
HSerPrint "Xpress Demo Board": HSerPrintCRLF
HSerPrint "09 Temperature": HSerPrintCRLF 3
Wait 1 s

'  slave device address
#DEFINE EMC1001_ADDRESS     0x70

Dim emc_temp As Word

EMC1001_Write ( EMC1001_TEMP_LIMIT_HI_H , 30)
EMC1001_Write ( EMC1001_TEMP_LIMIT_LO_H , 22)

EMC1001_Write ( EMC1001_TEMP_THERM_LIMIT, 30)
EMC1001_Write ( EMC1001_TEMP_THERM_HYSTERIS, 0x01)
EMC1001_Write ( EMC1001_TEMP_SMBus_Timeout, 0xFF)

'Initiliase the character set.  If button is pressed at start... show the character

If SWITCH = SWITCH_DOWN Then
    showDegreeChar = TRUE
End If

Do
    'Optionally, Send a bell alert to the terminal
    'HSerSend 7
    'Read Product ID register
    EMC1001_Read( EMC1001_TEMP_PROD_ID ,  data )
    If ( HI2C2WaitMSSPTimeout <> TRUE )  Then
        HSerPrint "Product ID:         EMC1001"
        If data <> 0 Then
            HSerPrint "-"
            HSerPrintByteCRLF data
        End If
        HSerPrintCRLF

    End If

    'Read Manufacturer ID register
    EMC1001_Read( EMC1001_TEMP_MANUFACTURE_ID,  data )
    If ( HI2C2WaitMSSPTimeout <> TRUE )  Then
        HSerPrint "Manufacturer ID:    0x"
        HSerPrint Hex(data)
        HSerPrintCRLF
    End If

    'Read Revision register
    EMC1001_Read( EMC1001_TEMP_REV_NUMBER,  data )
    If ( HI2C2WaitMSSPTimeout <> TRUE )  Then
        HSerPrint "Revision:           "
        HSerPrintByteCRLF data
    End If

    'Read temp registers
    EMC1001_Read( EMC1001_TEMP_HI,  hi )
    EMC1001_Read( EMC1001_TEMP_LO,  lo )

    If ( HI2C2WaitMSSPTimeout <> TRUE )  Then
        emc_temp = 0
        emc_temp_h = hi

        If ( HI2C2WaitMSSPTimeout <> TRUE )  Then
            emc_temp = emc_temp + lo
            HSerPrint "The temperature is: "

            ' The sensor is read as a 8 bit value therefore each unit equates to 0.25 of a degree
            Dim DSdata As Word
            Dim TempC_100 As Word

            DSdata = emc_temp
            SignBit = DSdata.15
            If SignBit = 0 Then Goto Positive
            ' its negative!
            ' take twos comp
            DSdata = ( DSdata # 0xffff ) + 1

Positive:
            TempC_100 =  FnLSR ( DSdata, 6 )
            TempC_100 = ( TempC_100 * 25 )
            Whole = TempC_100 / 100
            Fract = TempC_100 % 100
            If SignBit = 0 Then Goto DisplayTemp
            HSerPrint "-"

DisplayTemp:
            HSerPrint Str(Whole)
            HSerPrint "."
            ' To ensure the decimal part is two digits
            Dig = Fract / 10
            HSerPrint Dig
            Dig = Fract % 10
            HSerPrint Dig
            If showDegreeChar = TRUE Then
                HSerPrint CHR(0xB0)
            End If
            HSerPrint "C"
            HSerPrintCRLF

        End If
    End If

    'Read Conversion register
    EMC1001_Read( EMC1001_CONV_RATE ,  data )
    If ( HI2C2WaitMSSPTimeout <> TRUE )  Then
        HSerPrint "Conversion rate is: "
        HSerPrintByteCRLF data
    End If

    'Read Hi limit register
    EMC1001_Read(EMC1001_TEMP_LIMIT_HI_H,  data )
    If ( HI2C2WaitMSSPTimeout <> TRUE )  Then
        HSerPrint "High limit is:      "
        HSerPrint data
        If showDegreeChar = TRUE Then
            HSerPrint CHR(0xB0)
        End If
        HSerPrint "C"
        HSerPrintCRLF
    End If

    'Read Low Limit register
    EMC1001_Read( EMC1001_TEMP_LIMIT_LO_H,  data )
    If ( HI2C2WaitMSSPTimeout <> TRUE )  Then
        HSerPrint "Low limit is:       "
        HSerPrint data
        If showDegreeChar = TRUE Then
            HSerPrint CHR(0xB0)
        End If
        HSerPrint "C"
        HSerPrintCRLF
    End If


    'Read Status register
    EMC1001_Read( EMC1001_TEMP_STATUS,  data )
    If ( HI2C2WaitMSSPTimeout <> TRUE )  Then
        HSerPrint "Status is:          "
        HSerPrint ByteToBin ( data )
        HSerPrintCRLF
    End If

    oldStatus = data
    Do While check_switch = check_switch
        SetWith ( LEDD2 , FnNotBit ( LEDD2 ) )
        Wait 100 ms
        'Alarms
        SetWith ( LEDD4 , FnEquBit ( ALARM1 ) )
        SetWith ( LEDD5 , FnEquBit ( ALARM2 ) )
        EMC1001_Read( EMC1001_TEMP_STATUS,  data )
        If data <> oldStatus Then
            'Exit to show all the information
            Exit Do
        End If
    Loop

    HSerPrintCRLF 2





Loop



' ----- Support methods.  Subroutines and Functions

'global variable - if button is held down, we don't want to keep on switching directions
Dim previous_state As BIT
previous_state = SWITCH_UP

Function  check_switch
    'switch is normally open to 5V ...when pressed, RA3 is connected to GND
    If (SWITCH = SWITCH_DOWN) Then
        'debounce by delaying and checking if switch is still pressed
        Wait 1 ms
        If ( (previous_state =  SWITCH_DOWN) & (SWITCH = SWITCH_DOWN) ) Then
            ' don't toggle
            check_switch = FALSE
            Exit Function
        Else
            ' check if still down
            If (SWITCH = SWITCH_DOWN) Then
                previous_state = SWITCH_DOWN
                ' reverse the LEDs
                check_switch = TRUE
                Exit Function
            Else
                'switch not properly held down
                previous_state = SWITCH_UP
                ' don't reverse
                check_switch = FALSE
                Exit Function
            End If
        End If
    Else
        'switch not pressed
        previous_state = SWITCH_UP
        'don't reverse
        check_switch = FALSE
        Exit Function
    End If

End Function


