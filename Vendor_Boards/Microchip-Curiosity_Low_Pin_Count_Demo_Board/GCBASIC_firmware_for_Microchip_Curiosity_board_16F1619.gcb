'''A demonstration program for GCBASIC.
'''--------------------------------------------------------------------------------
''' This program recreation of Microchip Curiosity firmware for the 16F1619
'''
''' Based on cvd_touch_button_16f1619 by Trevor B Roydhouse
''' 
''' Microchip Curiosity 8/14/20 pin 8 bit demo board
'''  o PIC16F1619 (http://microchip.com/pic16f1619)
'''  o LEDs D4-D7 on RA5, RA1/PGEC, RA2, RC5
'''  o Switch SWITCH1 on RC4
'''  o Switch S2 on RA3/MCLRE
'''  o Touch Switch S3 on RC1/AN5
'''  o Potentiometer POT1 on RC0/AN4
'''
''' An Implementation of Microchip Application Note AN1298
''' o  Capacitive Touch Using Only an ADC using the concept of Capacitive Voltage Divider ("CVD")
''' o  http://ww1.microchip.com/downloads/en/AppNotes/01298A.pdf
'''
''' On startup LEDs D4-D7 turn on and off
''' LED D6 turns on while S3 touch sensor is touched
''' LED D6 turns off when S3 touch sensor is not touched
''' LED D7 is the PWM signal
''' LED D4 turns in when S1 is pressed 
''' 
'''@author    Evan R. Venn   
'''@license   GPL
'''@version   1.00
'''@date      2023-04-02
'''********************************************************************************

' ---- Configuration

    'Microcontroller @ 32MHz
    #CHIP 16F1619, 32
    #SKIPTEST
    'MCLRE set on so that switch S2 can reset microcontroller
    #CONFIG MCLRE_ON

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.6.3
    'PinManager data: Not available (3)
    // Generated for 16f1619
    //
    // Template comment at the start of the config file
    //
    #startup InitPPS, 85
    #define PPSToolPart 16f1619

    Sub InitPPS
              

            'Module: PWM3
            RC5PPS = 0x000E    'PWM3OUT > RC5
        
      
    End Sub
    // Template comment at the end of the config file

    
    'Ensure all variables are explicitly defined
    #OPTION Explicit

    ' ---- Define hardware settings

    #DEFINE SWITCH1 PORTC.4
    Dir SWITCH1 In

    #DEFINE LED4 PORTA.5
    Dir PORTA.5 Out

    #DEFINE LED5 PORTA.1
    Dir PORTA.1 Out

    #DEFINE LED6 PORTA.2
    Dir PORTA.2 Out

    #DEFINE LED7 PORTC.5
    Dir PORTC.5 Out

    #DEFINE POT1 AN4
    Dir PORTC.0 In

    'startup wait in seconds
    #DEFINE WAITSECS 1

' ---- Variables

    Dim PWMSetCounter As Word
    PWMSetCounter = 0

' ---- Main body of program

    'LED init on program startup
    Wait WAITSECS s
    Set LED4 = 1
    Set LED5 = 1
    Set LED6 = 1
    Set LED7 = 1
    Wait WAITSECS s
    Set LED7 = 0
    Set LED6 = 0
    Set LED5 = 0
    Set LED4 = 0

    ' Required to support HPWMUpdate when using PWM/CCPn module
    #DEFINE HPWM_FAST           
    ' PMW Freqency and Duty to value 
    Dim PWMDutyValue as Byte
    Dim PWMDirection as Integer
    PWMDirection = 1
    PWMDutyValue = 127
    ' PWM3 is an 8 bit signal
    HPWM 3, 3, PWMDutyValue, 2

    'Program infinite loop
    Do Forever

        ' Set LED to state of switch
        LED4 = !SWITCH1

        If PWMSetCounter MOD 64 = 0 Then
            ' PMW Duty change
            HPWMUpdate 3, ReadAD ( AN4 )
            'PWMDutyValue
            'Cycle the Duty up and down
            PWMDutyValue = PWMDutyValue + PWMDirection
            If PWMDutyValue = 255 Then
                PWMDirection = -1
            Else If PWMDutyValue = 0 Then
                PWMDirection = 1
            End If

            ' Read mTouch state
            ReadmTouch 

        End If
        PWMSetCounter++



    Loop

' ---- Methods
Sub ReadmTouch 

    Dim ADCvalueWord As Word
    Dim SaveADCON0, SaveODCONC, SaveANSELC, SaveTRISC, SaveLATC as Byte
    SaveADCON0 = ADCON0
    SaveTRISC = TRISC
    SaveLATC = LATC

    ADCvalueWord = 0

    ' ---- Constants

    ' AN5/RC1 - sensor channel
    #DEFINE SENSORCHANNEL PORTC.1	
    Dir SENSORCHANNEL In

    ' AN6/RC2 - secondary (dummy) channel
    #DEFINE SECONDARYCHANNEL PORTC.2
    Dir SECONDARYCHANNEL Out

    IntOff

    'AN1298 - Step 1: Set secondary (dummy) channel high (VDD)
    'set as output
    Dir SECONDARYCHANNEL Out	

    'set as open drain
    SaveODCONC = ODCONC
    Set ODCONC.2 = 1

    'set as digital
    ANSELC = SaveANSELC
    Set ANSELC.2 = 0
    
    'set high (VDD)
    Set SECONDARYCHANNEL = 1

    'AN1298 - Step 2: Select secondary channel on ADC (charge CHOLD to VDD)
    'ADC channel select -> AN6/RC2 (bits 2-6)
    Set ADCON0 = 0b00011001

    'AN1298 - Step 3: Set sensor pin as output, low (GND) to eliminate any charge
    'Set as output
    Dir SENSORCHANNEL Out

    'Set as digital
    Set ANSELC.1 = 0
    
    'set low (ground)
    Set SENSORCHANNEL = 0

    'AN1298 - Step 4: Set sensor pin as input
    'Set as input
    Dir SENSORCHANNEL In	
    'Set as analog
    Set ANSELC.1 = 1

    'AN1298 - Step 5: Select sensor channel on ADC (V-div sensor:CHOLD)
    'ADC channel select -> AN5/RC1 (bits 2-6)
    Set ADCON0 = 0b00010101
    'Enable ADC (bit 0)
    'Delay to allow ADC voltage to stabilise
    Wait 10 us 		

    'AN1298 - Step 6: Start ADC conversion
    SET ADFM ON
    'Start ADC conversion (set go/done bit 1 = 1)
    Set ADCON0.1 = 1  	
    'Wait for ADC conversion (done bit 1 = 0)
    Wait While ADCON0.1 = 1

    'AN1298 - Step 7: Read ADC result
    ADCvalueWord = ReadAD10(AN5)

    'Action result
'LATC = SaveLATC 
HSerSend ADCvalueWord

    If ADCvalueWord > 10 Then
        'If touching S3 touch button
        LED6 = 1
    Else
        LED6 = 0
    End If
    TRISC = SaveTRISC
    ANSELC = SaveANSELC
    ODCONC = SaveODCONC
    ADCON0 = SaveADCON0
    ADCON0.ADON = 0
   
    IntOn

End Sub



/* GCODE Optimisation file - this will optimise ADC operations by disabling the ADC operations on the AD channel that is set to FALSE
                             to enable ADC operations on a specific AD channel set to TRUE

            Legacy chip Constants for ADC
 */
            #DEFINE USE_AD0 FALSE
            #DEFINE USE_AD1 FALSE
            #DEFINE USE_AD2 TRUE
            #DEFINE USE_AD3 FALSE
            #DEFINE USE_AD4 TRUE
            #DEFINE USE_AD5 FALSE
            #DEFINE USE_AD6 FALSE
            #DEFINE USE_AD7 FALSE
            #DEFINE USE_AD8 FALSE
            #DEFINE USE_AD9 FALSE
            #DEFINE USE_AD10 FALSE
            #DEFINE USE_AD11 FALSE
            #DEFINE USE_AD12 FALSE
            #DEFINE USE_AD13 FALSE
            #DEFINE USE_AD14 FALSE
            #DEFINE USE_AD15 FALSE
            #DEFINE USE_AD16 FALSE
            #DEFINE USE_AD17 FALSE
            #DEFINE USE_AD18 FALSE
            #DEFINE USE_AD19 FALSE
            #DEFINE USE_AD20 FALSE
            #DEFINE USE_AD21 FALSE
            #DEFINE USE_AD22 FALSE
            #DEFINE USE_AD23 FALSE
            #DEFINE USE_AD24 FALSE
            #DEFINE USE_AD25 FALSE
            #DEFINE USE_AD26 FALSE
            #DEFINE USE_AD27 FALSE
            #DEFINE USE_AD28 FALSE
            #DEFINE USE_AD29 FALSE
            #DEFINE USE_AD30 FALSE
            #DEFINE USE_AD31 FALSE
            #DEFINE USE_AD32 FALSE
            #DEFINE USE_AD33 FALSE
            #DEFINE USE_AD34 FALSE
//          Recent chip Constants for ADC 
            #DEFINE USE_ADA0 FALSE
            #DEFINE USE_ADA1 FALSE
            #DEFINE USE_ADA2 TRUE
            #DEFINE USE_ADA3 FALSE
            #DEFINE USE_ADA4 TRUE
            #DEFINE USE_ADA5 FALSE
            #DEFINE USE_ADA6 FALSE
            #DEFINE USE_ADA7 FALSE
            #DEFINE USE_ADB0 FALSE
            #DEFINE USE_ADB1 FALSE
            #DEFINE USE_ADB2 FALSE
            #DEFINE USE_ADB3 FALSE
            #DEFINE USE_ADB4 FALSE
            #DEFINE USE_ADB5 FALSE
            #DEFINE USE_ADB6 FALSE
            #DEFINE USE_ADB7 FALSE
            #DEFINE USE_ADC0 FALSE
            #DEFINE USE_ADC1 FALSE
            #DEFINE USE_ADC2 FALSE
            #DEFINE USE_ADC3 FALSE
            #DEFINE USE_ADC4 FALSE
            #DEFINE USE_ADC5 FALSE
            #DEFINE USE_ADC6 FALSE
            #DEFINE USE_ADC7 FALSE
            #DEFINE USE_ADD0 FALSE
            #DEFINE USE_ADD1 FALSE
            #DEFINE USE_ADD2 FALSE
            #DEFINE USE_ADD3 FALSE
            #DEFINE USE_ADD4 FALSE
            #DEFINE USE_ADD5 FALSE
            #DEFINE USE_ADD6 FALSE
            #DEFINE USE_ADD7 FALSE
            #DEFINE USE_ADE0 FALSE
            #DEFINE USE_ADE1 FALSE
            #DEFINE USE_ADE2 FALSE


/* GCODE Optimisation file - this will optimise PWM operations by disabling the PWM operations on the PWM channel and Timer that is set to FALSE
                             to enable PWM and Timer operations set to FALSE

           Optimise CCP/PWM    
*/
           #DEFINE USE_HPWMCCP1 TRUE
           #DEFINE USE_HPWMCCP2 FALSE
           #DEFINE USE_HPWMCCP4 FALSE
           #DEFINE USE_HPWMCCP5 FALSE

//         Optimise PWM
           #DEFINE USE_HPWM1 TRUE
           #DEFINE USE_HPWM2 FALSE
           #DEFINE USE_HPWM3 TRUE
           #DEFINE USE_HPWM4 FALSE
           #DEFINE USE_HPWM5 FALSE
           #DEFINE USE_HPWM6 FALSE
           #DEFINE USE_HPWM7 FALSE
           #DEFINE USE_HPWM8 FALSE

//         Optimise Timers associated with PWM operations
           #DEFINE USE_HPWM_TIMER2 TRUE
           #DEFINE USE_HPWM_TIMER4 FALSE
           #DEFINE USE_HPWM_TIMER6 FALSE
