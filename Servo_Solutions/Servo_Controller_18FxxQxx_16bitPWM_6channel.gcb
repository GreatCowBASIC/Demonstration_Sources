/*
A demonstration program for GCGB and GCB.
--------------------------------------------------------------------------------
Some PIC microcontrollers have 16-bit PWM peripherals.

These include 12F/16F15xx, 16F17xx and 18FxxQxx microcontrollers and possibly a few others. 
Great Cow Basic supports 16-bit PWM on the 12F/16F chips. 

18F series family of chips the 16-Bit PWM is supported by direct access to the PWM registers. This enable the use of the dedicated PWM modules.

Why 16-Bit?

16-Bit PWM allows for much better resolution in regards to both Frequency and Duty Cycle. 
For example, a 50Hz servo signal with a pulse width resolution of 1 us can be easily achieved. 
An example would be precision positional control of a damper or valve.

"Q" Series PWM Module:
The PWM modules on "Q" Series microcontroller are different than the other 16Bit PWM modules as there is a "prescaler" that can be set.
The "prescaler" can be set anywhere between 1 and 255 allowing for very precise frequency and pulse width control at high resolution. 
For example a 50Hz Frequency with 1us resolution of the pulse width from 800us to 2200us. 
That is 1400 discrete steps (If the servo is capable").

The program demonstrates a 6-channel high resolution servo controller at both 50Hz and 100Hz using a the 16-Bit "PWM1/2/3 " modules on a PIC 18F27Qxx. 
These frequencies equate to frame rates of 20 ms and 10 ms respectively. ( 10ms/100Hz for digital servos). 200hz and 300hz can be added if needed.


*********************************************************************************

The frequency and pulse widths were determined to give a pulse width from 800us to 2200us full range. This should work nicely on most servos. 

An improvement to this program would be a script to calculate the pulse widths based chip frequency and user input.

*/

//! PWM Register values are calculated to work at 32MHz. If you change the chip frequency it will not work properly.

//! Servo1 and 2 are on PWM1 and operate at 50Hz (Analog Servos)
//! Servo3 and 4 are on PWM2 and operate at 100Hz (Digital Servos)
//! Servo5 and 6 are on PWM3 and operate at 200Hz (Digital Servos)

//! Do not operate an analog servo at 100 or 200Hz as it could overheat and burn out



'''
'''
'''@author    Bill Roth   
'''@license   GPL
'''@version   1.00  
'''@date      2023-01-02
'''********************************************************************************


//! PWM Register values are calculated to work at 32MHz. If you change the chip frequency  you will need to change the register values.

#CHIP 18F27Q83, 32
#OPTION EXPLICIT


//   #CHIP 18F27Q43, 32
//   #CONFIG LVP = ON
//   #CONFIG MCLRE = ON


  #Startup  InitPPS, 85


    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.6.2
    'PinManager data: Not available (3)
    'Generated for 18f27q43
    Sub InitPPS

        'Module: PWM1_16BIT
        RC0PPS = 0x0018    'PWM1_1 > RC0  Servo1
        RC1PPS = 0x0019    'PWM1_2 > RC1  Servo2

        'Module: PWM2_16BIT
        RC2PPS = 0x001A    'PWM2_1 > RC2  Servo3
        RC3PPS = 0x001B    'PWM2_2 > RC3  Servo4

        'Module: PWM3_16BIT
        RC4PPS = 0x001C    'PWM3_1 > RC4  Servo5
        RC5PPS = 0x001D    'PWM3_2 > RC5  Servo6 (Fixed Output)

    End Sub
    '======================================================


// Set port directions
   Dir PORTC.0 OUT          // Servo 1
   Dir PORTC.1 OUT          // Servo 2
   Dir PORTC.2 OUT          // Servo 3
   Dir PORTC.3 OUT          // Servo 4
   Dir PORTC.4 OUT          // Servo 5
   Dir PORTC.5 OUT          // Servo 6
   
// Assign Variables using Aliases to PWM registers
  DIM PWM1_PERIOD Alias PWM1PRH, PWM1PRL as WORD       // PWM1
  DIM PWM1_1_DUTY Alias PWM1S1P1H,PWM1S1P1L as WORD    // Servo 1
  DIM PWM1_2_Duty Alias PWM1S1P2H,PWM1S1P2L as WORD    // Servo2

  DIM PWM2_PERIOD Alias PWM2PRH, PWM2PRL as WORD       // PWM2
  DIM PWM2_1_DUTY Alias PWM2S1P1H,PWM2S1P1L as WORD    // Servo 3
  DIM PWM2_2_Duty Alias PWM2S1P2H,PWM2S1P2L as WORD    // Servo 4

  DIM PWM3_PERIOD Alias PWM3PRH, PWM3PRL as WORD       // PWM3
  DIM PWM3_1_DUTY Alias PWM3S1P1H,PWM3S1P1L as WORD    // Servo 5
  DIM PWM3_2_Duty Alias PWM3S1P2H,PWM3S1P2L as WORD    // Servo 6




// Configure PWM1 MOdule - set the registers

    '+++++++++++++++++++++++++++++++++
    PWM1CLK = 3      'Clock Source = HFINTOSC

    //! PREscaler, PWM PERIOD and DUTY registers are calculated to work at 32MHz. If you change the chip frequency  you will need to change the register values.
    PWM1CPRE = 11   ' ( Can be 0 - 256)
    PWM1_PERIOD = 53390

    'Start at Servo Center Pos
    PWM1_1_DUTY = 5880  'Slice 1_1  Out on C.0
    PWM1_2_DUTY = 5880  'Slice 1_2  Out on C.1
        '---------------------------------

// Configure PWM2 MOdule - set the registers
    '+++++++++++++++++++++++++++++++++
    'Sets Frequency / Frame Rate to 100Hz
    PWM2CLK = 3  'Clock Source = HFINTOSC

    //! PREscaler, PWM PERIOD and DUTY registers are calculated to work at 32MHz. If you change the chip frequency  you will need to change the register values.
    PWM2CPRE = 5
    PWM2_PERIOD = 53390

    'Start at Servo Center Pos
    PWM2_1_DUTY = 11728  'Slice 1_1 Out on C.2
    PWM2_2_DUTY = 11728 'Slice 1_2 Out on C.3
    '---------------------------------

// Configure PWM3 MOdule - set the registers
    '+++++++++++++++++++++++++++++++++
    'Sets Frequency / Frame Rate to 200Hz
    PWM3CLK = 3  'Clock Source = HFINTOSC

    //! PREscaler, PWM PERIOD and DUTY registers are calculated to work at 32MHz. If you change the chip frequency  you will need to change the register values.
    PWM3CPRE = 2
    PWM3_PERIOD = 53390

    'Start at Servo Center Pos
    PWM3_1_DUTY = 23500  'Servo 5  low = 8544  High = 23500
    PWM3_2_DUTY = 23500
    '200 Hz
    '----------------------------------

// Enable all 3 PWM Modules
    '++++++++++++++++++++++++++++++++++
    PWM1CON.7 = 1
    PWM2CON.7 = 1
    PWM3CON.7 = 1

    PWMLOAD = 0b0111 'Load PR Registers
    '----------------------------------

// -------------- MAIN PROGRAM LOOP -----------------------------------
    Wait 500 ms  'Prevents Arbitrary Serial Out when Programming when/if serial enabled
    Do

        // PWM1 - 2 Servo channels  1 & 2
        PWM1_1_DUTY = SCALE (READAD12(ANA0), 0, 4095, 2136, 5880)  ;Servo 1  //! The transformed range is specific to a servo type - updated to modify end of range positioning
        PWM1_2_DUTY = SCALE (READAD12(ANA1), 0, 4095, 2136, 5880)  ;Servo 2  //! The transformed range is specific to a servo type - updated to modify end of range positioning

        // PWM2 - 2 Servo channels  3 & 4
        PWM2_1_DUTY = SCALE (READAD12(ANA2), 0, 4095, 4272, 11728)  ;Servo 3  //! The transformed range is specific to a servo type - updated to modify end of range positioning
        PWM2_2_DUTY = SCALE (READAD12(ANA3), 0, 4095, 4272, 11728)  ;Servo 4  //! The transformed range is specific to a servo type - updated to modify end of range positioning

        // PWM3 - 2 Servo channels  5 & 6
        PWM3_1_DUTY = SCALE (READAD12(ANA4), 0, 4095, 8544, 23500)  ;Servo 5  //! The transformed range is specific to a servo type - updated to modify end of range positioning


        PWM3_2_DUTY = SCALE (READAD12(ANA3), 0, 4095,8544, 23500) ;Servo 6   //! The transformed range is specific to a servo type - updated to modify end of range positioning

        PWMLOAD = 0b0111 ' load New Data to All "PR" Registers

    Loop
'----------------------------------------------------------------------


