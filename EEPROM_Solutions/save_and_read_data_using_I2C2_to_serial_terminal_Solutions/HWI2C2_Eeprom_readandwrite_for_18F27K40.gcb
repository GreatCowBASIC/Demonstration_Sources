'''A demonstration program for GCBASIC.
'''The program shows how the I2C2 bus can be used to access data in an external EEPROM.
''':
''':This demonstration how to use the second hardware I2C port to access the I2C EEPROM devices.
''':This uses the default I2C address for the EEPROM of 0xA0.
''':To use the second I2C2 simply add <lowlevel\hwi2c2.h> as an include and then all the i2c2 commands are
''':available with the 2 suffice.
''':
''':This I2C2 master access the I2C2 EEPROM and writes data, then reads the data, finally putting the returned information on a serial terminal.
''':
''':The demonstration creates user specific routines to write and read the EEPROM as the standard EEPROM library only supports I2C (not i2C2).
''':
''':I2C2 and Serial, for this device, will need PPS to setup the specific modules.
''':
'''@author  EvanV
'''@licence GPL
'''@version 1.0a
'''@date    Jan 2019
'''*************************************************************************

  'Chip Settings.
  #chip 18F27K40,64
  #option explicit


  #include <lowlevel\hwi2c2.h>

    'Generated by PIC PPS Tool for GCBASIC
    'PPS Tool version: 0.0.5.25
    'PinManager data: v1.75
    'Generated for 18f27k40
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18f27k40

    Sub InitPPS

            'Module: EUSART1
            RC6PPS = 0x0009    'TX1 > RC6
            'Module: MSSP2
            RC4PPS = 0x0012    'SDA2 > RC4
            SSP2DATPPS = 0x0014    'RC4 > SDA2 (bi-directional)
            RC3PPS = 0x0011    'SCK2 > RC3
            SSP2CLKPPS = 0x0013    'RC3 > SCK2 (bi-directional)


    End Sub
    'Template comment at the end of the config file


; ----- Define Hardware settings for HWI2C2
  ' Define I2C settings - CHANGE PORTS if required for your specific device.
  #define HI2C2_BAUD_RATE 100
  #define HI2C2_DATA PORTc.4
  #define HI2C2_CLOCK PORTc.3
  'Initialise I2C Master
  'I2C pins need to be input for SSP2 module
  Dir HI2C2_DATA in
  Dir HI2C2_CLOCK in
 'MASTER Second Port
  HI2C2Mode Master

; ----- Define Hardware settings for Serial
  'USART settings
  #define USART_BAUD_RATE 9600
  #define USART_TX_BLOCKING


; ----- Main program

  HSerPrintCRLF
  dim eepromVal as word
  eepromVal = 0

  do

        do
          HI2C2ReStart                            ;generate a start signal
          HI2C2Send(0xa0)                       ;inidcate a write
        loop While HI2C2AckPollState
        HI2C2Send(0)                    ;send address as two bytes
        HI2C2Send(0)
        HI2C2Send(eepromVal)                    ;then the value
        HI2C2Send(eepromVal_h)                    ;then the value
        HI2C2Stop

        eepromVal = 0

        do
          HI2C2ReStart                              ;generate a start signal
          HI2C2Send(0xa0)                       ;inidcate a write
        loop While HI2C2AckPollState
        HI2C2Send(0)                    ;send address as two bytes
        HI2C2Send(0)
        HI2C2ReStart
        HI2C2Send(0xa0+ 1)                   ;set the read flag
        HI2C2Receive(eepromVal, ACK)           ;read one byte and conclude
        HI2C2Receive(eepromVal_h, NACK)           ;read one byte and conclude
        HI2C2Stop

        HSerPrint hex(eepromVal_h)
        HSerPrint hex(eepromVal)
        HSerPrint ": "

        eepromVal++


  loop
